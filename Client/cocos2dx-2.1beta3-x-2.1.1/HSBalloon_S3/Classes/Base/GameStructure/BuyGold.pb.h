// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BuyGold.proto

#ifndef PROTOBUF_BuyGold_2eproto__INCLUDED
#define PROTOBUF_BuyGold_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BuyGold_2eproto();
void protobuf_AssignDesc_BuyGold_2eproto();
void protobuf_ShutdownFile_BuyGold_2eproto();

class BuyGold;

// ===================================================================

class BuyGold : public ::google::protobuf::MessageLite {
 public:
  BuyGold();
  virtual ~BuyGold();

  BuyGold(const BuyGold& from);

  inline BuyGold& operator=(const BuyGold& from) {
    CopyFrom(from);
    return *this;
  }

  static const BuyGold& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BuyGold* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BuyGold* other);

  // implements Message ----------------------------------------------

  BuyGold* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BuyGold& from);
  void MergeFrom(const BuyGold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string describ = 3;
  inline bool has_describ() const;
  inline void clear_describ();
  static const int kDescribFieldNumber = 3;
  inline const ::std::string& describ() const;
  inline void set_describ(const ::std::string& value);
  inline void set_describ(const char* value);
  inline void set_describ(const char* value, size_t size);
  inline ::std::string* mutable_describ();
  inline ::std::string* release_describ();
  inline void set_allocated_describ(::std::string* describ);

  // optional uint32 gold_Number = 4;
  inline bool has_gold_number() const;
  inline void clear_gold_number();
  static const int kGoldNumberFieldNumber = 4;
  inline ::google::protobuf::uint32 gold_number() const;
  inline void set_gold_number(::google::protobuf::uint32 value);

  // optional int32 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional string localName = 6;
  inline bool has_localname() const;
  inline void clear_localname();
  static const int kLocalNameFieldNumber = 6;
  inline const ::std::string& localname() const;
  inline void set_localname(const ::std::string& value);
  inline void set_localname(const char* value);
  inline void set_localname(const char* value, size_t size);
  inline ::std::string* mutable_localname();
  inline ::std::string* release_localname();
  inline void set_allocated_localname(::std::string* localname);

  // @@protoc_insertion_point(class_scope:message.BuyGold)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_describ();
  inline void clear_has_describ();
  inline void set_has_gold_number();
  inline void clear_has_gold_number();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_localname();
  inline void clear_has_localname();

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 gold_number_;
  ::std::string* describ_;
  ::std::string* localname_;
  ::google::protobuf::int32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_BuyGold_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_BuyGold_2eproto();
  #endif
  friend void protobuf_AssignDesc_BuyGold_2eproto();
  friend void protobuf_ShutdownFile_BuyGold_2eproto();

  void InitAsDefaultInstance();
  static BuyGold* default_instance_;
};
// ===================================================================


// ===================================================================

// BuyGold

// optional uint32 id = 1;
inline bool BuyGold::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyGold::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyGold::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyGold::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BuyGold::id() const {
  return id_;
}
inline void BuyGold::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool BuyGold::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyGold::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyGold::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyGold::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BuyGold::name() const {
  return *name_;
}
inline void BuyGold::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BuyGold::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BuyGold::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BuyGold::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BuyGold::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BuyGold::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string describ = 3;
inline bool BuyGold::has_describ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyGold::set_has_describ() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyGold::clear_has_describ() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyGold::clear_describ() {
  if (describ_ != &::google::protobuf::internal::kEmptyString) {
    describ_->clear();
  }
  clear_has_describ();
}
inline const ::std::string& BuyGold::describ() const {
  return *describ_;
}
inline void BuyGold::set_describ(const ::std::string& value) {
  set_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    describ_ = new ::std::string;
  }
  describ_->assign(value);
}
inline void BuyGold::set_describ(const char* value) {
  set_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    describ_ = new ::std::string;
  }
  describ_->assign(value);
}
inline void BuyGold::set_describ(const char* value, size_t size) {
  set_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    describ_ = new ::std::string;
  }
  describ_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BuyGold::mutable_describ() {
  set_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    describ_ = new ::std::string;
  }
  return describ_;
}
inline ::std::string* BuyGold::release_describ() {
  clear_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describ_;
    describ_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BuyGold::set_allocated_describ(::std::string* describ) {
  if (describ_ != &::google::protobuf::internal::kEmptyString) {
    delete describ_;
  }
  if (describ) {
    set_has_describ();
    describ_ = describ;
  } else {
    clear_has_describ();
    describ_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 gold_Number = 4;
inline bool BuyGold::has_gold_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuyGold::set_has_gold_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuyGold::clear_has_gold_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuyGold::clear_gold_number() {
  gold_number_ = 0u;
  clear_has_gold_number();
}
inline ::google::protobuf::uint32 BuyGold::gold_number() const {
  return gold_number_;
}
inline void BuyGold::set_gold_number(::google::protobuf::uint32 value) {
  set_has_gold_number();
  gold_number_ = value;
}

// optional int32 money = 5;
inline bool BuyGold::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuyGold::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuyGold::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuyGold::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 BuyGold::money() const {
  return money_;
}
inline void BuyGold::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional string localName = 6;
inline bool BuyGold::has_localname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuyGold::set_has_localname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuyGold::clear_has_localname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuyGold::clear_localname() {
  if (localname_ != &::google::protobuf::internal::kEmptyString) {
    localname_->clear();
  }
  clear_has_localname();
}
inline const ::std::string& BuyGold::localname() const {
  return *localname_;
}
inline void BuyGold::set_localname(const ::std::string& value) {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  localname_->assign(value);
}
inline void BuyGold::set_localname(const char* value) {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  localname_->assign(value);
}
inline void BuyGold::set_localname(const char* value, size_t size) {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  localname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BuyGold::mutable_localname() {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  return localname_;
}
inline ::std::string* BuyGold::release_localname() {
  clear_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = localname_;
    localname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BuyGold::set_allocated_localname(::std::string* localname) {
  if (localname_ != &::google::protobuf::internal::kEmptyString) {
    delete localname_;
  }
  if (localname) {
    set_has_localname();
    localname_ = localname;
  } else {
    clear_has_localname();
    localname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BuyGold_2eproto__INCLUDED
