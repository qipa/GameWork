// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PropInfo.proto

#ifndef PROTOBUF_PropInfo_2eproto__INCLUDED
#define PROTOBUF_PropInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PropInfo_2eproto();
void protobuf_AssignDesc_PropInfo_2eproto();
void protobuf_ShutdownFile_PropInfo_2eproto();

class PropInfo;

enum PropInfo_ActionObjectType {
  PropInfo_ActionObjectType_ACTION_UNKONW = 0,
  PropInfo_ActionObjectType_ACTION_OWN = 1,
  PropInfo_ActionObjectType_ACTION_OPPOSITE = 2
};
bool PropInfo_ActionObjectType_IsValid(int value);
const PropInfo_ActionObjectType PropInfo_ActionObjectType_ActionObjectType_MIN = PropInfo_ActionObjectType_ACTION_UNKONW;
const PropInfo_ActionObjectType PropInfo_ActionObjectType_ActionObjectType_MAX = PropInfo_ActionObjectType_ACTION_OPPOSITE;
const int PropInfo_ActionObjectType_ActionObjectType_ARRAYSIZE = PropInfo_ActionObjectType_ActionObjectType_MAX + 1;

enum PropInfo_PropType {
  PropInfo_PropType_Unknow = 0,
  PropInfo_PropType_ManualProp = 1,
  PropInfo_PropType_BufferProp = 2,
  PropInfo_PropType_EffectProp = 3,
  PropInfo_PropType_HeadProp = 4
};
bool PropInfo_PropType_IsValid(int value);
const PropInfo_PropType PropInfo_PropType_PropType_MIN = PropInfo_PropType_Unknow;
const PropInfo_PropType PropInfo_PropType_PropType_MAX = PropInfo_PropType_HeadProp;
const int PropInfo_PropType_PropType_ARRAYSIZE = PropInfo_PropType_PropType_MAX + 1;

enum PropInfo_ManualPropType {
  PropInfo_ManualPropType_MANUAL_PROPS_Unknow = 0,
  PropInfo_ManualPropType_MANUAL_PROPS_LaserGun = 1
};
bool PropInfo_ManualPropType_IsValid(int value);
const PropInfo_ManualPropType PropInfo_ManualPropType_ManualPropType_MIN = PropInfo_ManualPropType_MANUAL_PROPS_Unknow;
const PropInfo_ManualPropType PropInfo_ManualPropType_ManualPropType_MAX = PropInfo_ManualPropType_MANUAL_PROPS_LaserGun;
const int PropInfo_ManualPropType_ManualPropType_ARRAYSIZE = PropInfo_ManualPropType_ManualPropType_MAX + 1;

enum PropInfo_BufferPropType {
  PropInfo_BufferPropType_BUFFER_PROPS_Unkonw = 0,
  PropInfo_BufferPropType_BUFFER_PROPS_Chameleon = 1,
  PropInfo_BufferPropType_BUFFER_PROPS_Meidusha = 2,
  PropInfo_BufferPropType_BUFFER_PROPS_EnergyShield = 3
};
bool PropInfo_BufferPropType_IsValid(int value);
const PropInfo_BufferPropType PropInfo_BufferPropType_BufferPropType_MIN = PropInfo_BufferPropType_BUFFER_PROPS_Unkonw;
const PropInfo_BufferPropType PropInfo_BufferPropType_BufferPropType_MAX = PropInfo_BufferPropType_BUFFER_PROPS_EnergyShield;
const int PropInfo_BufferPropType_BufferPropType_ARRAYSIZE = PropInfo_BufferPropType_BufferPropType_MAX + 1;

enum PropInfo_EffectPropType {
  PropInfo_EffectPropType_Effect_Unkonw = 0,
  PropInfo_EffectPropType_Effect_ColorfulCandy = 1,
  PropInfo_EffectPropType_Effect_SickMucus = 2,
  PropInfo_EffectPropType_Effect_BlackInk = 3
};
bool PropInfo_EffectPropType_IsValid(int value);
const PropInfo_EffectPropType PropInfo_EffectPropType_EffectPropType_MIN = PropInfo_EffectPropType_Effect_Unkonw;
const PropInfo_EffectPropType PropInfo_EffectPropType_EffectPropType_MAX = PropInfo_EffectPropType_Effect_BlackInk;
const int PropInfo_EffectPropType_EffectPropType_ARRAYSIZE = PropInfo_EffectPropType_EffectPropType_MAX + 1;

// ===================================================================

class PropInfo : public ::google::protobuf::MessageLite {
 public:
  PropInfo();
  virtual ~PropInfo();

  PropInfo(const PropInfo& from);

  inline PropInfo& operator=(const PropInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const PropInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PropInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PropInfo* other);

  // implements Message ----------------------------------------------

  PropInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PropInfo& from);
  void MergeFrom(const PropInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef PropInfo_ActionObjectType ActionObjectType;
  static const ActionObjectType ACTION_UNKONW = PropInfo_ActionObjectType_ACTION_UNKONW;
  static const ActionObjectType ACTION_OWN = PropInfo_ActionObjectType_ACTION_OWN;
  static const ActionObjectType ACTION_OPPOSITE = PropInfo_ActionObjectType_ACTION_OPPOSITE;
  static inline bool ActionObjectType_IsValid(int value) {
    return PropInfo_ActionObjectType_IsValid(value);
  }
  static const ActionObjectType ActionObjectType_MIN =
    PropInfo_ActionObjectType_ActionObjectType_MIN;
  static const ActionObjectType ActionObjectType_MAX =
    PropInfo_ActionObjectType_ActionObjectType_MAX;
  static const int ActionObjectType_ARRAYSIZE =
    PropInfo_ActionObjectType_ActionObjectType_ARRAYSIZE;

  typedef PropInfo_PropType PropType;
  static const PropType Unknow = PropInfo_PropType_Unknow;
  static const PropType ManualProp = PropInfo_PropType_ManualProp;
  static const PropType BufferProp = PropInfo_PropType_BufferProp;
  static const PropType EffectProp = PropInfo_PropType_EffectProp;
  static const PropType HeadProp = PropInfo_PropType_HeadProp;
  static inline bool PropType_IsValid(int value) {
    return PropInfo_PropType_IsValid(value);
  }
  static const PropType PropType_MIN =
    PropInfo_PropType_PropType_MIN;
  static const PropType PropType_MAX =
    PropInfo_PropType_PropType_MAX;
  static const int PropType_ARRAYSIZE =
    PropInfo_PropType_PropType_ARRAYSIZE;

  typedef PropInfo_ManualPropType ManualPropType;
  static const ManualPropType MANUAL_PROPS_Unknow = PropInfo_ManualPropType_MANUAL_PROPS_Unknow;
  static const ManualPropType MANUAL_PROPS_LaserGun = PropInfo_ManualPropType_MANUAL_PROPS_LaserGun;
  static inline bool ManualPropType_IsValid(int value) {
    return PropInfo_ManualPropType_IsValid(value);
  }
  static const ManualPropType ManualPropType_MIN =
    PropInfo_ManualPropType_ManualPropType_MIN;
  static const ManualPropType ManualPropType_MAX =
    PropInfo_ManualPropType_ManualPropType_MAX;
  static const int ManualPropType_ARRAYSIZE =
    PropInfo_ManualPropType_ManualPropType_ARRAYSIZE;

  typedef PropInfo_BufferPropType BufferPropType;
  static const BufferPropType BUFFER_PROPS_Unkonw = PropInfo_BufferPropType_BUFFER_PROPS_Unkonw;
  static const BufferPropType BUFFER_PROPS_Chameleon = PropInfo_BufferPropType_BUFFER_PROPS_Chameleon;
  static const BufferPropType BUFFER_PROPS_Meidusha = PropInfo_BufferPropType_BUFFER_PROPS_Meidusha;
  static const BufferPropType BUFFER_PROPS_EnergyShield = PropInfo_BufferPropType_BUFFER_PROPS_EnergyShield;
  static inline bool BufferPropType_IsValid(int value) {
    return PropInfo_BufferPropType_IsValid(value);
  }
  static const BufferPropType BufferPropType_MIN =
    PropInfo_BufferPropType_BufferPropType_MIN;
  static const BufferPropType BufferPropType_MAX =
    PropInfo_BufferPropType_BufferPropType_MAX;
  static const int BufferPropType_ARRAYSIZE =
    PropInfo_BufferPropType_BufferPropType_ARRAYSIZE;

  typedef PropInfo_EffectPropType EffectPropType;
  static const EffectPropType Effect_Unkonw = PropInfo_EffectPropType_Effect_Unkonw;
  static const EffectPropType Effect_ColorfulCandy = PropInfo_EffectPropType_Effect_ColorfulCandy;
  static const EffectPropType Effect_SickMucus = PropInfo_EffectPropType_Effect_SickMucus;
  static const EffectPropType Effect_BlackInk = PropInfo_EffectPropType_Effect_BlackInk;
  static inline bool EffectPropType_IsValid(int value) {
    return PropInfo_EffectPropType_IsValid(value);
  }
  static const EffectPropType EffectPropType_MIN =
    PropInfo_EffectPropType_EffectPropType_MIN;
  static const EffectPropType EffectPropType_MAX =
    PropInfo_EffectPropType_EffectPropType_MAX;
  static const int EffectPropType_ARRAYSIZE =
    PropInfo_EffectPropType_EffectPropType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string localname = 3;
  inline bool has_localname() const;
  inline void clear_localname();
  static const int kLocalnameFieldNumber = 3;
  inline const ::std::string& localname() const;
  inline void set_localname(const ::std::string& value);
  inline void set_localname(const char* value);
  inline void set_localname(const char* value, size_t size);
  inline ::std::string* mutable_localname();
  inline ::std::string* release_localname();
  inline void set_allocated_localname(::std::string* localname);

  // optional string describ = 4;
  inline bool has_describ() const;
  inline void clear_describ();
  static const int kDescribFieldNumber = 4;
  inline const ::std::string& describ() const;
  inline void set_describ(const ::std::string& value);
  inline void set_describ(const char* value);
  inline void set_describ(const char* value, size_t size);
  inline ::std::string* mutable_describ();
  inline ::std::string* release_describ();
  inline void set_allocated_describ(::std::string* describ);

  // optional .message.PropInfo.PropType propType = 5 [default = Unknow];
  inline bool has_proptype() const;
  inline void clear_proptype();
  static const int kPropTypeFieldNumber = 5;
  inline ::message::PropInfo_PropType proptype() const;
  inline void set_proptype(::message::PropInfo_PropType value);

  // optional .message.PropInfo.ManualPropType manualPropType = 6 [default = MANUAL_PROPS_Unknow];
  inline bool has_manualproptype() const;
  inline void clear_manualproptype();
  static const int kManualPropTypeFieldNumber = 6;
  inline ::message::PropInfo_ManualPropType manualproptype() const;
  inline void set_manualproptype(::message::PropInfo_ManualPropType value);

  // optional .message.PropInfo.BufferPropType bufferPropType = 7 [default = BUFFER_PROPS_Unkonw];
  inline bool has_bufferproptype() const;
  inline void clear_bufferproptype();
  static const int kBufferPropTypeFieldNumber = 7;
  inline ::message::PropInfo_BufferPropType bufferproptype() const;
  inline void set_bufferproptype(::message::PropInfo_BufferPropType value);

  // optional uint32 level = 8 [default = 1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 unlockLevel = 9 [default = 1];
  inline bool has_unlocklevel() const;
  inline void clear_unlocklevel();
  static const int kUnlockLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 unlocklevel() const;
  inline void set_unlocklevel(::google::protobuf::uint32 value);

  // optional uint32 useNumber = 10 [default = 0];
  inline bool has_usenumber() const;
  inline void clear_usenumber();
  static const int kUseNumberFieldNumber = 10;
  inline ::google::protobuf::uint32 usenumber() const;
  inline void set_usenumber(::google::protobuf::uint32 value);

  // optional .message.PropInfo.ActionObjectType actionType = 11 [default = ACTION_UNKONW];
  inline bool has_actiontype() const;
  inline void clear_actiontype();
  static const int kActionTypeFieldNumber = 11;
  inline ::message::PropInfo_ActionObjectType actiontype() const;
  inline void set_actiontype(::message::PropInfo_ActionObjectType value);

  // optional int32 gold = 12;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 12;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 unlockGold = 13;
  inline bool has_unlockgold() const;
  inline void clear_unlockgold();
  static const int kUnlockGoldFieldNumber = 13;
  inline ::google::protobuf::int32 unlockgold() const;
  inline void set_unlockgold(::google::protobuf::int32 value);

  // optional float ctTime = 14;
  inline bool has_cttime() const;
  inline void clear_cttime();
  static const int kCtTimeFieldNumber = 14;
  inline float cttime() const;
  inline void set_cttime(float value);

  // optional float duration = 15;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 15;
  inline float duration() const;
  inline void set_duration(float value);

  // optional .message.PropInfo.EffectPropType effectPropType = 16 [default = Effect_Unkonw];
  inline bool has_effectproptype() const;
  inline void clear_effectproptype();
  static const int kEffectPropTypeFieldNumber = 16;
  inline ::message::PropInfo_EffectPropType effectproptype() const;
  inline void set_effectproptype(::message::PropInfo_EffectPropType value);

  // @@protoc_insertion_point(class_scope:message.PropInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_localname();
  inline void clear_has_localname();
  inline void set_has_describ();
  inline void clear_has_describ();
  inline void set_has_proptype();
  inline void clear_has_proptype();
  inline void set_has_manualproptype();
  inline void clear_has_manualproptype();
  inline void set_has_bufferproptype();
  inline void clear_has_bufferproptype();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_unlocklevel();
  inline void clear_has_unlocklevel();
  inline void set_has_usenumber();
  inline void clear_has_usenumber();
  inline void set_has_actiontype();
  inline void clear_has_actiontype();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_unlockgold();
  inline void clear_has_unlockgold();
  inline void set_has_cttime();
  inline void clear_has_cttime();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_effectproptype();
  inline void clear_has_effectproptype();

  ::std::string* name_;
  ::std::string* localname_;
  ::google::protobuf::uint32 id_;
  int proptype_;
  ::std::string* describ_;
  int manualproptype_;
  int bufferproptype_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 unlocklevel_;
  ::google::protobuf::uint32 usenumber_;
  int actiontype_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 unlockgold_;
  float cttime_;
  float duration_;
  int effectproptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PropInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PropInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_PropInfo_2eproto();
  friend void protobuf_ShutdownFile_PropInfo_2eproto();

  void InitAsDefaultInstance();
  static PropInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PropInfo

// optional uint32 id = 1;
inline bool PropInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PropInfo::id() const {
  return id_;
}
inline void PropInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PropInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PropInfo::name() const {
  return *name_;
}
inline void PropInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PropInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PropInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PropInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PropInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string localname = 3;
inline bool PropInfo::has_localname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropInfo::set_has_localname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropInfo::clear_has_localname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropInfo::clear_localname() {
  if (localname_ != &::google::protobuf::internal::kEmptyString) {
    localname_->clear();
  }
  clear_has_localname();
}
inline const ::std::string& PropInfo::localname() const {
  return *localname_;
}
inline void PropInfo::set_localname(const ::std::string& value) {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  localname_->assign(value);
}
inline void PropInfo::set_localname(const char* value) {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  localname_->assign(value);
}
inline void PropInfo::set_localname(const char* value, size_t size) {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  localname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropInfo::mutable_localname() {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  return localname_;
}
inline ::std::string* PropInfo::release_localname() {
  clear_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = localname_;
    localname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PropInfo::set_allocated_localname(::std::string* localname) {
  if (localname_ != &::google::protobuf::internal::kEmptyString) {
    delete localname_;
  }
  if (localname) {
    set_has_localname();
    localname_ = localname;
  } else {
    clear_has_localname();
    localname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string describ = 4;
inline bool PropInfo::has_describ() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropInfo::set_has_describ() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropInfo::clear_has_describ() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropInfo::clear_describ() {
  if (describ_ != &::google::protobuf::internal::kEmptyString) {
    describ_->clear();
  }
  clear_has_describ();
}
inline const ::std::string& PropInfo::describ() const {
  return *describ_;
}
inline void PropInfo::set_describ(const ::std::string& value) {
  set_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    describ_ = new ::std::string;
  }
  describ_->assign(value);
}
inline void PropInfo::set_describ(const char* value) {
  set_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    describ_ = new ::std::string;
  }
  describ_->assign(value);
}
inline void PropInfo::set_describ(const char* value, size_t size) {
  set_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    describ_ = new ::std::string;
  }
  describ_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropInfo::mutable_describ() {
  set_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    describ_ = new ::std::string;
  }
  return describ_;
}
inline ::std::string* PropInfo::release_describ() {
  clear_has_describ();
  if (describ_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describ_;
    describ_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PropInfo::set_allocated_describ(::std::string* describ) {
  if (describ_ != &::google::protobuf::internal::kEmptyString) {
    delete describ_;
  }
  if (describ) {
    set_has_describ();
    describ_ = describ;
  } else {
    clear_has_describ();
    describ_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .message.PropInfo.PropType propType = 5 [default = Unknow];
inline bool PropInfo::has_proptype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PropInfo::set_has_proptype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PropInfo::clear_has_proptype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PropInfo::clear_proptype() {
  proptype_ = 0;
  clear_has_proptype();
}
inline ::message::PropInfo_PropType PropInfo::proptype() const {
  return static_cast< ::message::PropInfo_PropType >(proptype_);
}
inline void PropInfo::set_proptype(::message::PropInfo_PropType value) {
  assert(::message::PropInfo_PropType_IsValid(value));
  set_has_proptype();
  proptype_ = value;
}

// optional .message.PropInfo.ManualPropType manualPropType = 6 [default = MANUAL_PROPS_Unknow];
inline bool PropInfo::has_manualproptype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PropInfo::set_has_manualproptype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PropInfo::clear_has_manualproptype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PropInfo::clear_manualproptype() {
  manualproptype_ = 0;
  clear_has_manualproptype();
}
inline ::message::PropInfo_ManualPropType PropInfo::manualproptype() const {
  return static_cast< ::message::PropInfo_ManualPropType >(manualproptype_);
}
inline void PropInfo::set_manualproptype(::message::PropInfo_ManualPropType value) {
  assert(::message::PropInfo_ManualPropType_IsValid(value));
  set_has_manualproptype();
  manualproptype_ = value;
}

// optional .message.PropInfo.BufferPropType bufferPropType = 7 [default = BUFFER_PROPS_Unkonw];
inline bool PropInfo::has_bufferproptype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PropInfo::set_has_bufferproptype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PropInfo::clear_has_bufferproptype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PropInfo::clear_bufferproptype() {
  bufferproptype_ = 0;
  clear_has_bufferproptype();
}
inline ::message::PropInfo_BufferPropType PropInfo::bufferproptype() const {
  return static_cast< ::message::PropInfo_BufferPropType >(bufferproptype_);
}
inline void PropInfo::set_bufferproptype(::message::PropInfo_BufferPropType value) {
  assert(::message::PropInfo_BufferPropType_IsValid(value));
  set_has_bufferproptype();
  bufferproptype_ = value;
}

// optional uint32 level = 8 [default = 1];
inline bool PropInfo::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PropInfo::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PropInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PropInfo::clear_level() {
  level_ = 1u;
  clear_has_level();
}
inline ::google::protobuf::uint32 PropInfo::level() const {
  return level_;
}
inline void PropInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 unlockLevel = 9 [default = 1];
inline bool PropInfo::has_unlocklevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PropInfo::set_has_unlocklevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PropInfo::clear_has_unlocklevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PropInfo::clear_unlocklevel() {
  unlocklevel_ = 1u;
  clear_has_unlocklevel();
}
inline ::google::protobuf::uint32 PropInfo::unlocklevel() const {
  return unlocklevel_;
}
inline void PropInfo::set_unlocklevel(::google::protobuf::uint32 value) {
  set_has_unlocklevel();
  unlocklevel_ = value;
}

// optional uint32 useNumber = 10 [default = 0];
inline bool PropInfo::has_usenumber() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PropInfo::set_has_usenumber() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PropInfo::clear_has_usenumber() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PropInfo::clear_usenumber() {
  usenumber_ = 0u;
  clear_has_usenumber();
}
inline ::google::protobuf::uint32 PropInfo::usenumber() const {
  return usenumber_;
}
inline void PropInfo::set_usenumber(::google::protobuf::uint32 value) {
  set_has_usenumber();
  usenumber_ = value;
}

// optional .message.PropInfo.ActionObjectType actionType = 11 [default = ACTION_UNKONW];
inline bool PropInfo::has_actiontype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PropInfo::set_has_actiontype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PropInfo::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PropInfo::clear_actiontype() {
  actiontype_ = 0;
  clear_has_actiontype();
}
inline ::message::PropInfo_ActionObjectType PropInfo::actiontype() const {
  return static_cast< ::message::PropInfo_ActionObjectType >(actiontype_);
}
inline void PropInfo::set_actiontype(::message::PropInfo_ActionObjectType value) {
  assert(::message::PropInfo_ActionObjectType_IsValid(value));
  set_has_actiontype();
  actiontype_ = value;
}

// optional int32 gold = 12;
inline bool PropInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PropInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PropInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PropInfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 PropInfo::gold() const {
  return gold_;
}
inline void PropInfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 unlockGold = 13;
inline bool PropInfo::has_unlockgold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PropInfo::set_has_unlockgold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PropInfo::clear_has_unlockgold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PropInfo::clear_unlockgold() {
  unlockgold_ = 0;
  clear_has_unlockgold();
}
inline ::google::protobuf::int32 PropInfo::unlockgold() const {
  return unlockgold_;
}
inline void PropInfo::set_unlockgold(::google::protobuf::int32 value) {
  set_has_unlockgold();
  unlockgold_ = value;
}

// optional float ctTime = 14;
inline bool PropInfo::has_cttime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PropInfo::set_has_cttime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PropInfo::clear_has_cttime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PropInfo::clear_cttime() {
  cttime_ = 0;
  clear_has_cttime();
}
inline float PropInfo::cttime() const {
  return cttime_;
}
inline void PropInfo::set_cttime(float value) {
  set_has_cttime();
  cttime_ = value;
}

// optional float duration = 15;
inline bool PropInfo::has_duration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PropInfo::set_has_duration() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PropInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PropInfo::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float PropInfo::duration() const {
  return duration_;
}
inline void PropInfo::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// optional .message.PropInfo.EffectPropType effectPropType = 16 [default = Effect_Unkonw];
inline bool PropInfo::has_effectproptype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PropInfo::set_has_effectproptype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PropInfo::clear_has_effectproptype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PropInfo::clear_effectproptype() {
  effectproptype_ = 0;
  clear_has_effectproptype();
}
inline ::message::PropInfo_EffectPropType PropInfo::effectproptype() const {
  return static_cast< ::message::PropInfo_EffectPropType >(effectproptype_);
}
inline void PropInfo::set_effectproptype(::message::PropInfo_EffectPropType value) {
  assert(::message::PropInfo_EffectPropType_IsValid(value));
  set_has_effectproptype();
  effectproptype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PropInfo_2eproto__INCLUDED
