// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LanBattleReady.proto

#ifndef PROTOBUF_LanBattleReady_2eproto__INCLUDED
#define PROTOBUF_LanBattleReady_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LanBattleReady_2eproto();
void protobuf_AssignDesc_LanBattleReady_2eproto();
void protobuf_ShutdownFile_LanBattleReady_2eproto();

class LanBattleReadyNotice;

enum LanBattleReadyNotice_TYPE_ACTION {
  LanBattleReadyNotice_TYPE_ACTION_ACTION_UNKONW = 1,
  LanBattleReadyNotice_TYPE_ACTION_ACTION_READY = 2,
  LanBattleReadyNotice_TYPE_ACTION_ACTION_CANCLE = 3
};
bool LanBattleReadyNotice_TYPE_ACTION_IsValid(int value);
const LanBattleReadyNotice_TYPE_ACTION LanBattleReadyNotice_TYPE_ACTION_TYPE_ACTION_MIN = LanBattleReadyNotice_TYPE_ACTION_ACTION_UNKONW;
const LanBattleReadyNotice_TYPE_ACTION LanBattleReadyNotice_TYPE_ACTION_TYPE_ACTION_MAX = LanBattleReadyNotice_TYPE_ACTION_ACTION_CANCLE;
const int LanBattleReadyNotice_TYPE_ACTION_TYPE_ACTION_ARRAYSIZE = LanBattleReadyNotice_TYPE_ACTION_TYPE_ACTION_MAX + 1;

// ===================================================================

class LanBattleReadyNotice : public ::google::protobuf::MessageLite {
 public:
  LanBattleReadyNotice();
  virtual ~LanBattleReadyNotice();

  LanBattleReadyNotice(const LanBattleReadyNotice& from);

  inline LanBattleReadyNotice& operator=(const LanBattleReadyNotice& from) {
    CopyFrom(from);
    return *this;
  }

  static const LanBattleReadyNotice& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LanBattleReadyNotice* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LanBattleReadyNotice* other);

  // implements Message ----------------------------------------------

  LanBattleReadyNotice* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LanBattleReadyNotice& from);
  void MergeFrom(const LanBattleReadyNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef LanBattleReadyNotice_TYPE_ACTION TYPE_ACTION;
  static const TYPE_ACTION ACTION_UNKONW = LanBattleReadyNotice_TYPE_ACTION_ACTION_UNKONW;
  static const TYPE_ACTION ACTION_READY = LanBattleReadyNotice_TYPE_ACTION_ACTION_READY;
  static const TYPE_ACTION ACTION_CANCLE = LanBattleReadyNotice_TYPE_ACTION_ACTION_CANCLE;
  static inline bool TYPE_ACTION_IsValid(int value) {
    return LanBattleReadyNotice_TYPE_ACTION_IsValid(value);
  }
  static const TYPE_ACTION TYPE_ACTION_MIN =
    LanBattleReadyNotice_TYPE_ACTION_TYPE_ACTION_MIN;
  static const TYPE_ACTION TYPE_ACTION_MAX =
    LanBattleReadyNotice_TYPE_ACTION_TYPE_ACTION_MAX;
  static const int TYPE_ACTION_ARRAYSIZE =
    LanBattleReadyNotice_TYPE_ACTION_TYPE_ACTION_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required .message.LanBattleReadyNotice.TYPE_ACTION type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::message::LanBattleReadyNotice_TYPE_ACTION type() const;
  inline void set_type(::message::LanBattleReadyNotice_TYPE_ACTION value);

  // @@protoc_insertion_point(class_scope:message.LanBattleReadyNotice)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_type();
  inline void clear_has_type();

  ::std::string* uuid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LanBattleReady_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LanBattleReady_2eproto();
  #endif
  friend void protobuf_AssignDesc_LanBattleReady_2eproto();
  friend void protobuf_ShutdownFile_LanBattleReady_2eproto();

  void InitAsDefaultInstance();
  static LanBattleReadyNotice* default_instance_;
};
// ===================================================================


// ===================================================================

// LanBattleReadyNotice

// required string uuid = 1;
inline bool LanBattleReadyNotice::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanBattleReadyNotice::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanBattleReadyNotice::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanBattleReadyNotice::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& LanBattleReadyNotice::uuid() const {
  return *uuid_;
}
inline void LanBattleReadyNotice::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LanBattleReadyNotice::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LanBattleReadyNotice::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanBattleReadyNotice::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* LanBattleReadyNotice::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LanBattleReadyNotice::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .message.LanBattleReadyNotice.TYPE_ACTION type = 2;
inline bool LanBattleReadyNotice::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanBattleReadyNotice::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanBattleReadyNotice::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanBattleReadyNotice::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::message::LanBattleReadyNotice_TYPE_ACTION LanBattleReadyNotice::type() const {
  return static_cast< ::message::LanBattleReadyNotice_TYPE_ACTION >(type_);
}
inline void LanBattleReadyNotice::set_type(::message::LanBattleReadyNotice_TYPE_ACTION value) {
  assert(::message::LanBattleReadyNotice_TYPE_ACTION_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LanBattleReady_2eproto__INCLUDED
