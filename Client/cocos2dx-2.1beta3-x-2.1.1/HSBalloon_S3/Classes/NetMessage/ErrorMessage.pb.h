// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErrorMessage.proto

#ifndef PROTOBUF_ErrorMessage_2eproto__INCLUDED
#define PROTOBUF_ErrorMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ErrorMessage_2eproto();
void protobuf_AssignDesc_ErrorMessage_2eproto();
void protobuf_ShutdownFile_ErrorMessage_2eproto();

class ErrorMessageInfo;

enum ErrorMessageInfo_ErrorLevel {
  ErrorMessageInfo_ErrorLevel_LEVEL_VIEW = 1,
  ErrorMessageInfo_ErrorLevel_LEVEL_NONE = 2
};
bool ErrorMessageInfo_ErrorLevel_IsValid(int value);
const ErrorMessageInfo_ErrorLevel ErrorMessageInfo_ErrorLevel_ErrorLevel_MIN = ErrorMessageInfo_ErrorLevel_LEVEL_VIEW;
const ErrorMessageInfo_ErrorLevel ErrorMessageInfo_ErrorLevel_ErrorLevel_MAX = ErrorMessageInfo_ErrorLevel_LEVEL_NONE;
const int ErrorMessageInfo_ErrorLevel_ErrorLevel_ARRAYSIZE = ErrorMessageInfo_ErrorLevel_ErrorLevel_MAX + 1;

// ===================================================================

class ErrorMessageInfo : public ::google::protobuf::MessageLite {
 public:
  ErrorMessageInfo();
  virtual ~ErrorMessageInfo();

  ErrorMessageInfo(const ErrorMessageInfo& from);

  inline ErrorMessageInfo& operator=(const ErrorMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ErrorMessageInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ErrorMessageInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ErrorMessageInfo* other);

  // implements Message ----------------------------------------------

  ErrorMessageInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ErrorMessageInfo& from);
  void MergeFrom(const ErrorMessageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ErrorMessageInfo_ErrorLevel ErrorLevel;
  static const ErrorLevel LEVEL_VIEW = ErrorMessageInfo_ErrorLevel_LEVEL_VIEW;
  static const ErrorLevel LEVEL_NONE = ErrorMessageInfo_ErrorLevel_LEVEL_NONE;
  static inline bool ErrorLevel_IsValid(int value) {
    return ErrorMessageInfo_ErrorLevel_IsValid(value);
  }
  static const ErrorLevel ErrorLevel_MIN =
    ErrorMessageInfo_ErrorLevel_ErrorLevel_MIN;
  static const ErrorLevel ErrorLevel_MAX =
    ErrorMessageInfo_ErrorLevel_ErrorLevel_MAX;
  static const int ErrorLevel_ARRAYSIZE =
    ErrorMessageInfo_ErrorLevel_ErrorLevel_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .message.ErrorMessageInfo.ErrorLevel level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::message::ErrorMessageInfo_ErrorLevel level() const;
  inline void set_level(::message::ErrorMessageInfo_ErrorLevel value);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:message.ErrorMessageInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::uint32 id_;
  int level_;
  ::std::string* description_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ErrorMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ErrorMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_ErrorMessage_2eproto();
  friend void protobuf_ShutdownFile_ErrorMessage_2eproto();

  void InitAsDefaultInstance();
  static ErrorMessageInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ErrorMessageInfo

// required uint32 id = 1;
inline bool ErrorMessageInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorMessageInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorMessageInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorMessageInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ErrorMessageInfo::id() const {
  return id_;
}
inline void ErrorMessageInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .message.ErrorMessageInfo.ErrorLevel level = 2;
inline bool ErrorMessageInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorMessageInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorMessageInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorMessageInfo::clear_level() {
  level_ = 1;
  clear_has_level();
}
inline ::message::ErrorMessageInfo_ErrorLevel ErrorMessageInfo::level() const {
  return static_cast< ::message::ErrorMessageInfo_ErrorLevel >(level_);
}
inline void ErrorMessageInfo::set_level(::message::ErrorMessageInfo_ErrorLevel value) {
  assert(::message::ErrorMessageInfo_ErrorLevel_IsValid(value));
  set_has_level();
  level_ = value;
}

// optional string description = 3;
inline bool ErrorMessageInfo::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ErrorMessageInfo::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ErrorMessageInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ErrorMessageInfo::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ErrorMessageInfo::description() const {
  return *description_;
}
inline void ErrorMessageInfo::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void ErrorMessageInfo::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void ErrorMessageInfo::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ErrorMessageInfo::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* ErrorMessageInfo::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ErrorMessageInfo::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ErrorMessage_2eproto__INCLUDED
