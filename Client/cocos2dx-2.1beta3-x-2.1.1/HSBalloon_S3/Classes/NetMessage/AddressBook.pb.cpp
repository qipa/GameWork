// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AddressBook.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AddressBook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_AddressBook_2eproto() {
  delete AddressBookRequest::default_instance_;
  delete AddressBookResponse::default_instance_;
  delete AddressBookResponse_Name::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_AddressBook_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_AddressBook_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AddressBookRequest::default_instance_ = new AddressBookRequest();
  AddressBookResponse::default_instance_ = new AddressBookResponse();
  AddressBookResponse_Name::default_instance_ = new AddressBookResponse_Name();
  AddressBookRequest::default_instance_->InitAsDefaultInstance();
  AddressBookResponse::default_instance_->InitAsDefaultInstance();
  AddressBookResponse_Name::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AddressBook_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_AddressBook_2eproto_once_);
void protobuf_AddDesc_AddressBook_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_AddressBook_2eproto_once_,
                 &protobuf_AddDesc_AddressBook_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AddressBook_2eproto {
  StaticDescriptorInitializer_AddressBook_2eproto() {
    protobuf_AddDesc_AddressBook_2eproto();
  }
} static_descriptor_initializer_AddressBook_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int AddressBookRequest::kWbTypeFieldNumber;
#endif  // !_MSC_VER

AddressBookRequest::AddressBookRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AddressBookRequest::InitAsDefaultInstance() {
}

AddressBookRequest::AddressBookRequest(const AddressBookRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AddressBookRequest::SharedCtor() {
  _cached_size_ = 0;
  wb_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressBookRequest::~AddressBookRequest() {
  SharedDtor();
}

void AddressBookRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AddressBookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddressBookRequest& AddressBookRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AddressBook_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AddressBook_2eproto();
#endif
  return *default_instance_;
}

AddressBookRequest* AddressBookRequest::default_instance_ = NULL;

AddressBookRequest* AddressBookRequest::New() const {
  return new AddressBookRequest;
}

void AddressBookRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wb_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AddressBookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wb_Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_type_)));
          set_has_wb_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddressBookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wb_Type = 1;
  if (has_wb_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wb_type(), output);
  }

}

int AddressBookRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wb_Type = 1;
    if (has_wb_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wb_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressBookRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddressBookRequest*>(&from));
}

void AddressBookRequest::MergeFrom(const AddressBookRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wb_type()) {
      set_wb_type(from.wb_type());
    }
  }
}

void AddressBookRequest::CopyFrom(const AddressBookRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBookRequest::IsInitialized() const {

  return true;
}

void AddressBookRequest::Swap(AddressBookRequest* other) {
  if (other != this) {
    std::swap(wb_type_, other->wb_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AddressBookRequest::GetTypeName() const {
  return "message.AddressBookRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int AddressBookResponse_Name::kWbNameFieldNumber;
const int AddressBookResponse_Name::kNickNameFieldNumber;
#endif  // !_MSC_VER

AddressBookResponse_Name::AddressBookResponse_Name()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AddressBookResponse_Name::InitAsDefaultInstance() {
}

AddressBookResponse_Name::AddressBookResponse_Name(const AddressBookResponse_Name& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AddressBookResponse_Name::SharedCtor() {
  _cached_size_ = 0;
  wb_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressBookResponse_Name::~AddressBookResponse_Name() {
  SharedDtor();
}

void AddressBookResponse_Name::SharedDtor() {
  if (wb_name_ != &::google::protobuf::internal::kEmptyString) {
    delete wb_name_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AddressBookResponse_Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddressBookResponse_Name& AddressBookResponse_Name::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AddressBook_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AddressBook_2eproto();
#endif
  return *default_instance_;
}

AddressBookResponse_Name* AddressBookResponse_Name::default_instance_ = NULL;

AddressBookResponse_Name* AddressBookResponse_Name::New() const {
  return new AddressBookResponse_Name;
}

void AddressBookResponse_Name::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wb_name()) {
      if (wb_name_ != &::google::protobuf::internal::kEmptyString) {
        wb_name_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AddressBookResponse_Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string wb_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wb_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // required string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddressBookResponse_Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string wb_name = 1;
  if (has_wb_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->wb_name(), output);
  }

  // required string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

}

int AddressBookResponse_Name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string wb_name = 1;
    if (has_wb_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wb_name());
    }

    // required string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressBookResponse_Name::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddressBookResponse_Name*>(&from));
}

void AddressBookResponse_Name::MergeFrom(const AddressBookResponse_Name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wb_name()) {
      set_wb_name(from.wb_name());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
}

void AddressBookResponse_Name::CopyFrom(const AddressBookResponse_Name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBookResponse_Name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddressBookResponse_Name::Swap(AddressBookResponse_Name* other) {
  if (other != this) {
    std::swap(wb_name_, other->wb_name_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AddressBookResponse_Name::GetTypeName() const {
  return "message.AddressBookResponse.Name";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AddressBookResponse::kNameListFieldNumber;
#endif  // !_MSC_VER

AddressBookResponse::AddressBookResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AddressBookResponse::InitAsDefaultInstance() {
}

AddressBookResponse::AddressBookResponse(const AddressBookResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AddressBookResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressBookResponse::~AddressBookResponse() {
  SharedDtor();
}

void AddressBookResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AddressBookResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddressBookResponse& AddressBookResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AddressBook_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AddressBook_2eproto();
#endif
  return *default_instance_;
}

AddressBookResponse* AddressBookResponse::default_instance_ = NULL;

AddressBookResponse* AddressBookResponse::New() const {
  return new AddressBookResponse;
}

void AddressBookResponse::Clear() {
  namelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AddressBookResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.AddressBookResponse.Name nameList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_namelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nameList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddressBookResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.AddressBookResponse.Name nameList = 1;
  for (int i = 0; i < this->namelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->namelist(i), output);
  }

}

int AddressBookResponse::ByteSize() const {
  int total_size = 0;

  // repeated .message.AddressBookResponse.Name nameList = 1;
  total_size += 1 * this->namelist_size();
  for (int i = 0; i < this->namelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namelist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressBookResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddressBookResponse*>(&from));
}

void AddressBookResponse::MergeFrom(const AddressBookResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  namelist_.MergeFrom(from.namelist_);
}

void AddressBookResponse::CopyFrom(const AddressBookResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBookResponse::IsInitialized() const {

  for (int i = 0; i < namelist_size(); i++) {
    if (!this->namelist(i).IsInitialized()) return false;
  }
  return true;
}

void AddressBookResponse::Swap(AddressBookResponse* other) {
  if (other != this) {
    namelist_.Swap(&other->namelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AddressBookResponse::GetTypeName() const {
  return "message.AddressBookResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
