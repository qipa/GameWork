// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Achievement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Achievement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_Achievement_2eproto() {
  delete AchievementRequest::default_instance_;
  delete AchievementResponse::default_instance_;
  delete AchievementResponse_AchievemenStateInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Achievement_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Achievement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AchievementRequest::default_instance_ = new AchievementRequest();
  AchievementResponse::default_instance_ = new AchievementResponse();
  AchievementResponse_AchievemenStateInfo::default_instance_ = new AchievementResponse_AchievemenStateInfo();
  AchievementRequest::default_instance_->InitAsDefaultInstance();
  AchievementResponse::default_instance_->InitAsDefaultInstance();
  AchievementResponse_AchievemenStateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Achievement_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Achievement_2eproto_once_);
void protobuf_AddDesc_Achievement_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Achievement_2eproto_once_,
                 &protobuf_AddDesc_Achievement_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Achievement_2eproto {
  StaticDescriptorInitializer_Achievement_2eproto() {
    protobuf_AddDesc_Achievement_2eproto();
  }
} static_descriptor_initializer_Achievement_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AchievementRequest::AchievementRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AchievementRequest::InitAsDefaultInstance() {
}

AchievementRequest::AchievementRequest(const AchievementRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementRequest::~AchievementRequest() {
  SharedDtor();
}

void AchievementRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AchievementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AchievementRequest& AchievementRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Achievement_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Achievement_2eproto();
#endif
  return *default_instance_;
}

AchievementRequest* AchievementRequest::default_instance_ = NULL;

AchievementRequest* AchievementRequest::New() const {
  return new AchievementRequest;
}

void AchievementRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AchievementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void AchievementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int AchievementRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AchievementRequest*>(&from));
}

void AchievementRequest::MergeFrom(const AchievementRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void AchievementRequest::CopyFrom(const AchievementRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementRequest::IsInitialized() const {

  return true;
}

void AchievementRequest::Swap(AchievementRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AchievementRequest::GetTypeName() const {
  return "message.AchievementRequest";
}


// ===================================================================

bool AchievementResponse_AchievemenStateInfo_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AchievementResponse_AchievemenStateInfo_State AchievementResponse_AchievemenStateInfo::State_Not_Receive;
const AchievementResponse_AchievemenStateInfo_State AchievementResponse_AchievemenStateInfo::State_Can_Receive;
const AchievementResponse_AchievemenStateInfo_State AchievementResponse_AchievemenStateInfo::State_Have_Receive;
const AchievementResponse_AchievemenStateInfo_State AchievementResponse_AchievemenStateInfo::State_MIN;
const AchievementResponse_AchievemenStateInfo_State AchievementResponse_AchievemenStateInfo::State_MAX;
const int AchievementResponse_AchievemenStateInfo::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AchievementResponse_AchievemenStateInfo::kAchievementIDFieldNumber;
const int AchievementResponse_AchievemenStateInfo::kNameFieldNumber;
const int AchievementResponse_AchievemenStateInfo::kDescFieldNumber;
const int AchievementResponse_AchievemenStateInfo::kStateFieldNumber;
#endif  // !_MSC_VER

AchievementResponse_AchievemenStateInfo::AchievementResponse_AchievemenStateInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AchievementResponse_AchievemenStateInfo::InitAsDefaultInstance() {
}

AchievementResponse_AchievemenStateInfo::AchievementResponse_AchievemenStateInfo(const AchievementResponse_AchievemenStateInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementResponse_AchievemenStateInfo::SharedCtor() {
  _cached_size_ = 0;
  achievementid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementResponse_AchievemenStateInfo::~AchievementResponse_AchievemenStateInfo() {
  SharedDtor();
}

void AchievementResponse_AchievemenStateInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AchievementResponse_AchievemenStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AchievementResponse_AchievemenStateInfo& AchievementResponse_AchievemenStateInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Achievement_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Achievement_2eproto();
#endif
  return *default_instance_;
}

AchievementResponse_AchievemenStateInfo* AchievementResponse_AchievemenStateInfo::default_instance_ = NULL;

AchievementResponse_AchievemenStateInfo* AchievementResponse_AchievemenStateInfo::New() const {
  return new AchievementResponse_AchievemenStateInfo;
}

void AchievementResponse_AchievemenStateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievementid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AchievementResponse_AchievemenStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 achievementID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementid_)));
          set_has_achievementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // required string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required .message.AchievementResponse.AchievemenStateInfo.State state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::AchievementResponse_AchievemenStateInfo_State_IsValid(value)) {
            set_state(static_cast< ::message::AchievementResponse_AchievemenStateInfo_State >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementResponse_AchievemenStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 achievementID = 1;
  if (has_achievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achievementid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // required .message.AchievementResponse.AchievemenStateInfo.State state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

}

int AchievementResponse_AchievemenStateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 achievementID = 1;
    if (has_achievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required .message.AchievementResponse.AchievemenStateInfo.State state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementResponse_AchievemenStateInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AchievementResponse_AchievemenStateInfo*>(&from));
}

void AchievementResponse_AchievemenStateInfo::MergeFrom(const AchievementResponse_AchievemenStateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievementid()) {
      set_achievementid(from.achievementid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
}

void AchievementResponse_AchievemenStateInfo::CopyFrom(const AchievementResponse_AchievemenStateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementResponse_AchievemenStateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AchievementResponse_AchievemenStateInfo::Swap(AchievementResponse_AchievemenStateInfo* other) {
  if (other != this) {
    std::swap(achievementid_, other->achievementid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AchievementResponse_AchievemenStateInfo::GetTypeName() const {
  return "message.AchievementResponse.AchievemenStateInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AchievementResponse::kAchievementListFieldNumber;
#endif  // !_MSC_VER

AchievementResponse::AchievementResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AchievementResponse::InitAsDefaultInstance() {
}

AchievementResponse::AchievementResponse(const AchievementResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementResponse::~AchievementResponse() {
  SharedDtor();
}

void AchievementResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AchievementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AchievementResponse& AchievementResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Achievement_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Achievement_2eproto();
#endif
  return *default_instance_;
}

AchievementResponse* AchievementResponse::default_instance_ = NULL;

AchievementResponse* AchievementResponse::New() const {
  return new AchievementResponse;
}

void AchievementResponse::Clear() {
  achievementlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AchievementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.AchievementResponse.AchievemenStateInfo AchievementList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AchievementList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievementlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AchievementList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.AchievementResponse.AchievemenStateInfo AchievementList = 1;
  for (int i = 0; i < this->achievementlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->achievementlist(i), output);
  }

}

int AchievementResponse::ByteSize() const {
  int total_size = 0;

  // repeated .message.AchievementResponse.AchievemenStateInfo AchievementList = 1;
  total_size += 1 * this->achievementlist_size();
  for (int i = 0; i < this->achievementlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievementlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AchievementResponse*>(&from));
}

void AchievementResponse::MergeFrom(const AchievementResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievementlist_.MergeFrom(from.achievementlist_);
}

void AchievementResponse::CopyFrom(const AchievementResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementResponse::IsInitialized() const {

  for (int i = 0; i < achievementlist_size(); i++) {
    if (!this->achievementlist(i).IsInitialized()) return false;
  }
  return true;
}

void AchievementResponse::Swap(AchievementResponse* other) {
  if (other != this) {
    achievementlist_.Swap(&other->achievementlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AchievementResponse::GetTypeName() const {
  return "message.AchievementResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
