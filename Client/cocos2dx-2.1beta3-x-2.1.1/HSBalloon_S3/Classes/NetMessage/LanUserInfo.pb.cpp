// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LanUserInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LanUserInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_LanUserInfo_2eproto() {
  delete LanUserInfoData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_LanUserInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_LanUserInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LanUserInfoData::default_instance_ = new LanUserInfoData();
  LanUserInfoData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LanUserInfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LanUserInfo_2eproto_once_);
void protobuf_AddDesc_LanUserInfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LanUserInfo_2eproto_once_,
                 &protobuf_AddDesc_LanUserInfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LanUserInfo_2eproto {
  StaticDescriptorInitializer_LanUserInfo_2eproto() {
    protobuf_AddDesc_LanUserInfo_2eproto();
  }
} static_descriptor_initializer_LanUserInfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LanUserInfoData::kUuidFieldNumber;
const int LanUserInfoData::kNameFieldNumber;
const int LanUserInfoData::kWinCountFieldNumber;
const int LanUserInfoData::kLoseCountFieldNumber;
const int LanUserInfoData::kWinRateFieldNumber;
const int LanUserInfoData::kTypeFieldNumber;
#endif  // !_MSC_VER

LanUserInfoData::LanUserInfoData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LanUserInfoData::InitAsDefaultInstance() {
}

LanUserInfoData::LanUserInfoData(const LanUserInfoData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LanUserInfoData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wincount_ = 0;
  losecount_ = 0;
  winrate_ = 0;
  type_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanUserInfoData::~LanUserInfoData() {
  SharedDtor();
}

void LanUserInfoData::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LanUserInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LanUserInfoData& LanUserInfoData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LanUserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LanUserInfo_2eproto();
#endif
  return *default_instance_;
}

LanUserInfoData* LanUserInfoData::default_instance_ = NULL;

LanUserInfoData* LanUserInfoData::New() const {
  return new LanUserInfoData;
}

void LanUserInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    wincount_ = 0;
    losecount_ = 0;
    winrate_ = 0;
    type_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LanUserInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winCount;
        break;
      }

      // optional int32 winCount = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loseCount;
        break;
      }

      // optional int32 loseCount = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losecount_)));
          set_has_losecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_winRate;
        break;
      }

      // optional float winRate = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_winRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winrate_)));
          set_has_winrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6 [default = 2];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanUserInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 winCount = 3 [default = 0];
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wincount(), output);
  }

  // optional int32 loseCount = 4 [default = 0];
  if (has_losecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->losecount(), output);
  }

  // optional float winRate = 5 [default = 0];
  if (has_winrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->winrate(), output);
  }

  // optional int32 type = 6 [default = 2];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

}

int LanUserInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 winCount = 3 [default = 0];
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincount());
    }

    // optional int32 loseCount = 4 [default = 0];
    if (has_losecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losecount());
    }

    // optional float winRate = 5 [default = 0];
    if (has_winrate()) {
      total_size += 1 + 4;
    }

    // optional int32 type = 6 [default = 2];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanUserInfoData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LanUserInfoData*>(&from));
}

void LanUserInfoData::MergeFrom(const LanUserInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_losecount()) {
      set_losecount(from.losecount());
    }
    if (from.has_winrate()) {
      set_winrate(from.winrate());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void LanUserInfoData::CopyFrom(const LanUserInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanUserInfoData::IsInitialized() const {

  return true;
}

void LanUserInfoData::Swap(LanUserInfoData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(name_, other->name_);
    std::swap(wincount_, other->wincount_);
    std::swap(losecount_, other->losecount_);
    std::swap(winrate_, other->winrate_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LanUserInfoData::GetTypeName() const {
  return "message.LanUserInfoData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
