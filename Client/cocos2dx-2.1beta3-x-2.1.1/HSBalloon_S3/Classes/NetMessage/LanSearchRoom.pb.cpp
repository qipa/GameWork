// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LanSearchRoom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LanSearchRoom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_LanSearchRoom_2eproto() {
  delete LanSearchRoomRequest::default_instance_;
  delete LanSearchRoomResponse::default_instance_;
  delete LanSearchRoomResponse_room::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_LanSearchRoom_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_LanSearchRoom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LanSearchRoomRequest::default_instance_ = new LanSearchRoomRequest();
  LanSearchRoomResponse::default_instance_ = new LanSearchRoomResponse();
  LanSearchRoomResponse_room::default_instance_ = new LanSearchRoomResponse_room();
  LanSearchRoomRequest::default_instance_->InitAsDefaultInstance();
  LanSearchRoomResponse::default_instance_->InitAsDefaultInstance();
  LanSearchRoomResponse_room::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LanSearchRoom_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LanSearchRoom_2eproto_once_);
void protobuf_AddDesc_LanSearchRoom_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LanSearchRoom_2eproto_once_,
                 &protobuf_AddDesc_LanSearchRoom_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LanSearchRoom_2eproto {
  StaticDescriptorInitializer_LanSearchRoom_2eproto() {
    protobuf_AddDesc_LanSearchRoom_2eproto();
  }
} static_descriptor_initializer_LanSearchRoom_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LanSearchRoomRequest::kJsonIDFieldNumber;
#endif  // !_MSC_VER

LanSearchRoomRequest::LanSearchRoomRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LanSearchRoomRequest::InitAsDefaultInstance() {
}

LanSearchRoomRequest::LanSearchRoomRequest(const LanSearchRoomRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LanSearchRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  jsonid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanSearchRoomRequest::~LanSearchRoomRequest() {
  SharedDtor();
}

void LanSearchRoomRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LanSearchRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LanSearchRoomRequest& LanSearchRoomRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LanSearchRoom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LanSearchRoom_2eproto();
#endif
  return *default_instance_;
}

LanSearchRoomRequest* LanSearchRoomRequest::default_instance_ = NULL;

LanSearchRoomRequest* LanSearchRoomRequest::New() const {
  return new LanSearchRoomRequest;
}

void LanSearchRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jsonid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LanSearchRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 jsonID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jsonid_)));
          set_has_jsonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanSearchRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 jsonID = 1;
  if (has_jsonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jsonid(), output);
  }

}

int LanSearchRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 jsonID = 1;
    if (has_jsonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jsonid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanSearchRoomRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LanSearchRoomRequest*>(&from));
}

void LanSearchRoomRequest::MergeFrom(const LanSearchRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jsonid()) {
      set_jsonid(from.jsonid());
    }
  }
}

void LanSearchRoomRequest::CopyFrom(const LanSearchRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanSearchRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LanSearchRoomRequest::Swap(LanSearchRoomRequest* other) {
  if (other != this) {
    std::swap(jsonid_, other->jsonid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LanSearchRoomRequest::GetTypeName() const {
  return "message.LanSearchRoomRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LanSearchRoomResponse_room::kJNIEGGROOMNAMEFieldNumber;
const int LanSearchRoomResponse_room::kJNIEGGROOMMAXNUMFieldNumber;
const int LanSearchRoomResponse_room::kJNIEGGROOMCURNUMFieldNumber;
const int LanSearchRoomResponse_room::kJNIEGGSSIDFieldNumber;
#endif  // !_MSC_VER

LanSearchRoomResponse_room::LanSearchRoomResponse_room()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LanSearchRoomResponse_room::InitAsDefaultInstance() {
}

LanSearchRoomResponse_room::LanSearchRoomResponse_room(const LanSearchRoomResponse_room& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LanSearchRoomResponse_room::SharedCtor() {
  _cached_size_ = 0;
  jni_egg_room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jni_egg_room_maxnum_ = 0;
  jni_egg_room_curnum_ = 0;
  jni_egg_ssid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanSearchRoomResponse_room::~LanSearchRoomResponse_room() {
  SharedDtor();
}

void LanSearchRoomResponse_room::SharedDtor() {
  if (jni_egg_room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete jni_egg_room_name_;
  }
  if (jni_egg_ssid_ != &::google::protobuf::internal::kEmptyString) {
    delete jni_egg_ssid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LanSearchRoomResponse_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LanSearchRoomResponse_room& LanSearchRoomResponse_room::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LanSearchRoom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LanSearchRoom_2eproto();
#endif
  return *default_instance_;
}

LanSearchRoomResponse_room* LanSearchRoomResponse_room::default_instance_ = NULL;

LanSearchRoomResponse_room* LanSearchRoomResponse_room::New() const {
  return new LanSearchRoomResponse_room;
}

void LanSearchRoomResponse_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jni_egg_room_name()) {
      if (jni_egg_room_name_ != &::google::protobuf::internal::kEmptyString) {
        jni_egg_room_name_->clear();
      }
    }
    jni_egg_room_maxnum_ = 0;
    jni_egg_room_curnum_ = 0;
    if (has_jni_egg_ssid()) {
      if (jni_egg_ssid_ != &::google::protobuf::internal::kEmptyString) {
        jni_egg_ssid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LanSearchRoomResponse_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string JNI_EGG_ROOM_NAME = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jni_egg_room_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_JNI_EGG_ROOM_MAXNUM;
        break;
      }

      // required int32 JNI_EGG_ROOM_MAXNUM = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JNI_EGG_ROOM_MAXNUM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jni_egg_room_maxnum_)));
          set_has_jni_egg_room_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_JNI_EGG_ROOM_CURNUM;
        break;
      }

      // required int32 JNI_EGG_ROOM_CURNUM = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JNI_EGG_ROOM_CURNUM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jni_egg_room_curnum_)));
          set_has_jni_egg_room_curnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_JNI_EGG_SSID;
        break;
      }

      // required string JNI_EGG_SSID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JNI_EGG_SSID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jni_egg_ssid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanSearchRoomResponse_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string JNI_EGG_ROOM_NAME = 1;
  if (has_jni_egg_room_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->jni_egg_room_name(), output);
  }

  // required int32 JNI_EGG_ROOM_MAXNUM = 2;
  if (has_jni_egg_room_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jni_egg_room_maxnum(), output);
  }

  // required int32 JNI_EGG_ROOM_CURNUM = 3;
  if (has_jni_egg_room_curnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jni_egg_room_curnum(), output);
  }

  // required string JNI_EGG_SSID = 4;
  if (has_jni_egg_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jni_egg_ssid(), output);
  }

}

int LanSearchRoomResponse_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string JNI_EGG_ROOM_NAME = 1;
    if (has_jni_egg_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jni_egg_room_name());
    }

    // required int32 JNI_EGG_ROOM_MAXNUM = 2;
    if (has_jni_egg_room_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jni_egg_room_maxnum());
    }

    // required int32 JNI_EGG_ROOM_CURNUM = 3;
    if (has_jni_egg_room_curnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jni_egg_room_curnum());
    }

    // required string JNI_EGG_SSID = 4;
    if (has_jni_egg_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jni_egg_ssid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanSearchRoomResponse_room::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LanSearchRoomResponse_room*>(&from));
}

void LanSearchRoomResponse_room::MergeFrom(const LanSearchRoomResponse_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jni_egg_room_name()) {
      set_jni_egg_room_name(from.jni_egg_room_name());
    }
    if (from.has_jni_egg_room_maxnum()) {
      set_jni_egg_room_maxnum(from.jni_egg_room_maxnum());
    }
    if (from.has_jni_egg_room_curnum()) {
      set_jni_egg_room_curnum(from.jni_egg_room_curnum());
    }
    if (from.has_jni_egg_ssid()) {
      set_jni_egg_ssid(from.jni_egg_ssid());
    }
  }
}

void LanSearchRoomResponse_room::CopyFrom(const LanSearchRoomResponse_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanSearchRoomResponse_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LanSearchRoomResponse_room::Swap(LanSearchRoomResponse_room* other) {
  if (other != this) {
    std::swap(jni_egg_room_name_, other->jni_egg_room_name_);
    std::swap(jni_egg_room_maxnum_, other->jni_egg_room_maxnum_);
    std::swap(jni_egg_room_curnum_, other->jni_egg_room_curnum_);
    std::swap(jni_egg_ssid_, other->jni_egg_ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LanSearchRoomResponse_room::GetTypeName() const {
  return "message.LanSearchRoomResponse.room";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LanSearchRoomResponse::kJsonIDFieldNumber;
const int LanSearchRoomResponse::kRoomListFieldNumber;
#endif  // !_MSC_VER

LanSearchRoomResponse::LanSearchRoomResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LanSearchRoomResponse::InitAsDefaultInstance() {
}

LanSearchRoomResponse::LanSearchRoomResponse(const LanSearchRoomResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LanSearchRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  jsonid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanSearchRoomResponse::~LanSearchRoomResponse() {
  SharedDtor();
}

void LanSearchRoomResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LanSearchRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LanSearchRoomResponse& LanSearchRoomResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LanSearchRoom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LanSearchRoom_2eproto();
#endif
  return *default_instance_;
}

LanSearchRoomResponse* LanSearchRoomResponse::default_instance_ = NULL;

LanSearchRoomResponse* LanSearchRoomResponse::New() const {
  return new LanSearchRoomResponse;
}

void LanSearchRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jsonid_ = 0;
  }
  roomlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LanSearchRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 jsonID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jsonid_)));
          set_has_jsonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomList;
        break;
      }

      // repeated .message.LanSearchRoomResponse.room roomList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanSearchRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 jsonID = 1;
  if (has_jsonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jsonid(), output);
  }

  // repeated .message.LanSearchRoomResponse.room roomList = 2;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->roomlist(i), output);
  }

}

int LanSearchRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 jsonID = 1;
    if (has_jsonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jsonid());
    }

  }
  // repeated .message.LanSearchRoomResponse.room roomList = 2;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanSearchRoomResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LanSearchRoomResponse*>(&from));
}

void LanSearchRoomResponse::MergeFrom(const LanSearchRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jsonid()) {
      set_jsonid(from.jsonid());
    }
  }
}

void LanSearchRoomResponse::CopyFrom(const LanSearchRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanSearchRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < roomlist_size(); i++) {
    if (!this->roomlist(i).IsInitialized()) return false;
  }
  return true;
}

void LanSearchRoomResponse::Swap(LanSearchRoomResponse* other) {
  if (other != this) {
    std::swap(jsonid_, other->jsonid_);
    roomlist_.Swap(&other->roomlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LanSearchRoomResponse::GetTypeName() const {
  return "message.LanSearchRoomResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
