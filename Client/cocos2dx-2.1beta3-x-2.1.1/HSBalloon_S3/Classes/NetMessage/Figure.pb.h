// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Figure.proto

#ifndef PROTOBUF_Figure_2eproto__INCLUDED
#define PROTOBUF_Figure_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Figure_2eproto();
void protobuf_AssignDesc_Figure_2eproto();
void protobuf_ShutdownFile_Figure_2eproto();

class FigureData;
class FigureData_FigureBase;
class FigureData_FigureLevelTable;
class FigureData_FigureProperty;

// ===================================================================

class FigureData_FigureBase : public ::google::protobuf::MessageLite {
 public:
  FigureData_FigureBase();
  virtual ~FigureData_FigureBase();

  FigureData_FigureBase(const FigureData_FigureBase& from);

  inline FigureData_FigureBase& operator=(const FigureData_FigureBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const FigureData_FigureBase& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FigureData_FigureBase* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FigureData_FigureBase* other);

  // implements Message ----------------------------------------------

  FigureData_FigureBase* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FigureData_FigureBase& from);
  void MergeFrom(const FigureData_FigureBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 2 [default = 1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string describe = 4;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 4;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional string buyDescribe = 5;
  inline bool has_buydescribe() const;
  inline void clear_buydescribe();
  static const int kBuyDescribeFieldNumber = 5;
  inline const ::std::string& buydescribe() const;
  inline void set_buydescribe(const ::std::string& value);
  inline void set_buydescribe(const char* value);
  inline void set_buydescribe(const char* value, size_t size);
  inline ::std::string* mutable_buydescribe();
  inline ::std::string* release_buydescribe();
  inline void set_allocated_buydescribe(::std::string* buydescribe);

  // required int32 price = 6;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 6;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // repeated .message.FigureData.FigureLevelTable levelTableList = 7;
  inline int leveltablelist_size() const;
  inline void clear_leveltablelist();
  static const int kLevelTableListFieldNumber = 7;
  inline const ::message::FigureData_FigureLevelTable& leveltablelist(int index) const;
  inline ::message::FigureData_FigureLevelTable* mutable_leveltablelist(int index);
  inline ::message::FigureData_FigureLevelTable* add_leveltablelist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureLevelTable >&
      leveltablelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureLevelTable >*
      mutable_leveltablelist();

  // optional .message.FigureData.FigureProperty property = 8;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 8;
  inline const ::message::FigureData_FigureProperty& property() const;
  inline ::message::FigureData_FigureProperty* mutable_property();
  inline ::message::FigureData_FigureProperty* release_property();
  inline void set_allocated_property(::message::FigureData_FigureProperty* property);

  // @@protoc_insertion_point(class_scope:message.FigureData.FigureBase)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_buydescribe();
  inline void clear_has_buydescribe();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_property();
  inline void clear_has_property();

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::std::string* describe_;
  ::std::string* buydescribe_;
  ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureLevelTable > leveltablelist_;
  ::message::FigureData_FigureProperty* property_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Figure_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Figure_2eproto();
  #endif
  friend void protobuf_AssignDesc_Figure_2eproto();
  friend void protobuf_ShutdownFile_Figure_2eproto();

  void InitAsDefaultInstance();
  static FigureData_FigureBase* default_instance_;
};
// -------------------------------------------------------------------

class FigureData_FigureLevelTable : public ::google::protobuf::MessageLite {
 public:
  FigureData_FigureLevelTable();
  virtual ~FigureData_FigureLevelTable();

  FigureData_FigureLevelTable(const FigureData_FigureLevelTable& from);

  inline FigureData_FigureLevelTable& operator=(const FigureData_FigureLevelTable& from) {
    CopyFrom(from);
    return *this;
  }

  static const FigureData_FigureLevelTable& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FigureData_FigureLevelTable* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FigureData_FigureLevelTable* other);

  // implements Message ----------------------------------------------

  FigureData_FigureLevelTable* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FigureData_FigureLevelTable& from);
  void MergeFrom(const FigureData_FigureLevelTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 nextLevelGold = 2;
  inline bool has_nextlevelgold() const;
  inline void clear_nextlevelgold();
  static const int kNextLevelGoldFieldNumber = 2;
  inline ::google::protobuf::int32 nextlevelgold() const;
  inline void set_nextlevelgold(::google::protobuf::int32 value);

  // required int32 property_0 = 3;
  inline bool has_property_0() const;
  inline void clear_property_0();
  static const int kProperty0FieldNumber = 3;
  inline ::google::protobuf::int32 property_0() const;
  inline void set_property_0(::google::protobuf::int32 value);

  // required int32 property_1 = 4;
  inline bool has_property_1() const;
  inline void clear_property_1();
  static const int kProperty1FieldNumber = 4;
  inline ::google::protobuf::int32 property_1() const;
  inline void set_property_1(::google::protobuf::int32 value);

  // required int32 property_2 = 5;
  inline bool has_property_2() const;
  inline void clear_property_2();
  static const int kProperty2FieldNumber = 5;
  inline ::google::protobuf::int32 property_2() const;
  inline void set_property_2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.FigureData.FigureLevelTable)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_nextlevelgold();
  inline void clear_has_nextlevelgold();
  inline void set_has_property_0();
  inline void clear_has_property_0();
  inline void set_has_property_1();
  inline void clear_has_property_1();
  inline void set_has_property_2();
  inline void clear_has_property_2();

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 nextlevelgold_;
  ::google::protobuf::int32 property_0_;
  ::google::protobuf::int32 property_1_;
  ::google::protobuf::int32 property_2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Figure_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Figure_2eproto();
  #endif
  friend void protobuf_AssignDesc_Figure_2eproto();
  friend void protobuf_ShutdownFile_Figure_2eproto();

  void InitAsDefaultInstance();
  static FigureData_FigureLevelTable* default_instance_;
};
// -------------------------------------------------------------------

class FigureData_FigureProperty : public ::google::protobuf::MessageLite {
 public:
  FigureData_FigureProperty();
  virtual ~FigureData_FigureProperty();

  FigureData_FigureProperty(const FigureData_FigureProperty& from);

  inline FigureData_FigureProperty& operator=(const FigureData_FigureProperty& from) {
    CopyFrom(from);
    return *this;
  }

  static const FigureData_FigureProperty& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FigureData_FigureProperty* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FigureData_FigureProperty* other);

  // implements Message ----------------------------------------------

  FigureData_FigureProperty* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FigureData_FigureProperty& from);
  void MergeFrom(const FigureData_FigureProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float X_Lian_Xian_Ju_Li = 1 [default = 0];
  inline bool has_x_lian_xian_ju_li() const;
  inline void clear_x_lian_xian_ju_li();
  static const int kXLianXianJuLiFieldNumber = 1;
  inline float x_lian_xian_ju_li() const;
  inline void set_x_lian_xian_ju_li(float value);

  // optional float Y_Lian_Xian_Ju_Li = 2 [default = 0];
  inline bool has_y_lian_xian_ju_li() const;
  inline void clear_y_lian_xian_ju_li();
  static const int kYLianXianJuLiFieldNumber = 2;
  inline float y_lian_xian_ju_li() const;
  inline void set_y_lian_xian_ju_li(float value);

  // optional float X_Diao_Luo_Shi_Jian_Jian_Ge = 3 [default = 0];
  inline bool has_x_diao_luo_shi_jian_jian_ge() const;
  inline void clear_x_diao_luo_shi_jian_jian_ge();
  static const int kXDiaoLuoShiJianJianGeFieldNumber = 3;
  inline float x_diao_luo_shi_jian_jian_ge() const;
  inline void set_x_diao_luo_shi_jian_jian_ge(float value);

  // optional float Y_Diao_Luo_Shi_Jian_Jian_Ge = 4 [default = 0];
  inline bool has_y_diao_luo_shi_jian_jian_ge() const;
  inline void clear_y_diao_luo_shi_jian_jian_ge();
  static const int kYDiaoLuoShiJianJianGeFieldNumber = 4;
  inline float y_diao_luo_shi_jian_jian_ge() const;
  inline void set_y_diao_luo_shi_jian_jian_ge(float value);

  // optional float X_Shi_Hua_Shi_Jian = 5 [default = 0];
  inline bool has_x_shi_hua_shi_jian() const;
  inline void clear_x_shi_hua_shi_jian();
  static const int kXShiHuaShiJianFieldNumber = 5;
  inline float x_shi_hua_shi_jian() const;
  inline void set_x_shi_hua_shi_jian(float value);

  // optional float Y_Shi_Hua_Shi_Jian = 6 [default = 0];
  inline bool has_y_shi_hua_shi_jian() const;
  inline void clear_y_shi_hua_shi_jian();
  static const int kYShiHuaShiJianFieldNumber = 6;
  inline float y_shi_hua_shi_jian() const;
  inline void set_y_shi_hua_shi_jian(float value);

  // optional float X_Tan_Xing = 7 [default = 0];
  inline bool has_x_tan_xing() const;
  inline void clear_x_tan_xing();
  static const int kXTanXingFieldNumber = 7;
  inline float x_tan_xing() const;
  inline void set_x_tan_xing(float value);

  // optional float Y_Tan_Xing = 8 [default = 0];
  inline bool has_y_tan_xing() const;
  inline void clear_y_tan_xing();
  static const int kYTanXingFieldNumber = 8;
  inline float y_tan_xing() const;
  inline void set_y_tan_xing(float value);

  // optional float X_Diao_Luo_Shu_Liang = 9 [default = 0];
  inline bool has_x_diao_luo_shu_liang() const;
  inline void clear_x_diao_luo_shu_liang();
  static const int kXDiaoLuoShuLiangFieldNumber = 9;
  inline float x_diao_luo_shu_liang() const;
  inline void set_x_diao_luo_shu_liang(float value);

  // optional float Y_Diao_Luo_Shu_Liang = 10 [default = 0];
  inline bool has_y_diao_luo_shu_liang() const;
  inline void clear_y_diao_luo_shu_liang();
  static const int kYDiaoLuoShuLiangFieldNumber = 10;
  inline float y_diao_luo_shu_liang() const;
  inline void set_y_diao_luo_shu_liang(float value);

  // optional float X_Shi_Hua_Qiu_Shu_Liang = 11 [default = 0];
  inline bool has_x_shi_hua_qiu_shu_liang() const;
  inline void clear_x_shi_hua_qiu_shu_liang();
  static const int kXShiHuaQiuShuLiangFieldNumber = 11;
  inline float x_shi_hua_qiu_shu_liang() const;
  inline void set_x_shi_hua_qiu_shu_liang(float value);

  // optional float Y_Shi_Hua_Qiu_Shu_Liang = 12 [default = 0];
  inline bool has_y_shi_hua_qiu_shu_liang() const;
  inline void clear_y_shi_hua_qiu_shu_liang();
  static const int kYShiHuaQiuShuLiangFieldNumber = 12;
  inline float y_shi_hua_qiu_shu_liang() const;
  inline void set_y_shi_hua_qiu_shu_liang(float value);

  // @@protoc_insertion_point(class_scope:message.FigureData.FigureProperty)
 private:
  inline void set_has_x_lian_xian_ju_li();
  inline void clear_has_x_lian_xian_ju_li();
  inline void set_has_y_lian_xian_ju_li();
  inline void clear_has_y_lian_xian_ju_li();
  inline void set_has_x_diao_luo_shi_jian_jian_ge();
  inline void clear_has_x_diao_luo_shi_jian_jian_ge();
  inline void set_has_y_diao_luo_shi_jian_jian_ge();
  inline void clear_has_y_diao_luo_shi_jian_jian_ge();
  inline void set_has_x_shi_hua_shi_jian();
  inline void clear_has_x_shi_hua_shi_jian();
  inline void set_has_y_shi_hua_shi_jian();
  inline void clear_has_y_shi_hua_shi_jian();
  inline void set_has_x_tan_xing();
  inline void clear_has_x_tan_xing();
  inline void set_has_y_tan_xing();
  inline void clear_has_y_tan_xing();
  inline void set_has_x_diao_luo_shu_liang();
  inline void clear_has_x_diao_luo_shu_liang();
  inline void set_has_y_diao_luo_shu_liang();
  inline void clear_has_y_diao_luo_shu_liang();
  inline void set_has_x_shi_hua_qiu_shu_liang();
  inline void clear_has_x_shi_hua_qiu_shu_liang();
  inline void set_has_y_shi_hua_qiu_shu_liang();
  inline void clear_has_y_shi_hua_qiu_shu_liang();

  float x_lian_xian_ju_li_;
  float y_lian_xian_ju_li_;
  float x_diao_luo_shi_jian_jian_ge_;
  float y_diao_luo_shi_jian_jian_ge_;
  float x_shi_hua_shi_jian_;
  float y_shi_hua_shi_jian_;
  float x_tan_xing_;
  float y_tan_xing_;
  float x_diao_luo_shu_liang_;
  float y_diao_luo_shu_liang_;
  float x_shi_hua_qiu_shu_liang_;
  float y_shi_hua_qiu_shu_liang_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Figure_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Figure_2eproto();
  #endif
  friend void protobuf_AssignDesc_Figure_2eproto();
  friend void protobuf_ShutdownFile_Figure_2eproto();

  void InitAsDefaultInstance();
  static FigureData_FigureProperty* default_instance_;
};
// -------------------------------------------------------------------

class FigureData : public ::google::protobuf::MessageLite {
 public:
  FigureData();
  virtual ~FigureData();

  FigureData(const FigureData& from);

  inline FigureData& operator=(const FigureData& from) {
    CopyFrom(from);
    return *this;
  }

  static const FigureData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FigureData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FigureData* other);

  // implements Message ----------------------------------------------

  FigureData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FigureData& from);
  void MergeFrom(const FigureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef FigureData_FigureBase FigureBase;
  typedef FigureData_FigureLevelTable FigureLevelTable;
  typedef FigureData_FigureProperty FigureProperty;

  // accessors -------------------------------------------------------

  // repeated .message.FigureData.FigureBase FigureList = 1;
  inline int figurelist_size() const;
  inline void clear_figurelist();
  static const int kFigureListFieldNumber = 1;
  inline const ::message::FigureData_FigureBase& figurelist(int index) const;
  inline ::message::FigureData_FigureBase* mutable_figurelist(int index);
  inline ::message::FigureData_FigureBase* add_figurelist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureBase >&
      figurelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureBase >*
      mutable_figurelist();

  // @@protoc_insertion_point(class_scope:message.FigureData)
 private:

  ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureBase > figurelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Figure_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Figure_2eproto();
  #endif
  friend void protobuf_AssignDesc_Figure_2eproto();
  friend void protobuf_ShutdownFile_Figure_2eproto();

  void InitAsDefaultInstance();
  static FigureData* default_instance_;
};
// ===================================================================


// ===================================================================

// FigureData_FigureBase

// required int32 id = 1;
inline bool FigureData_FigureBase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FigureData_FigureBase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FigureData_FigureBase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FigureData_FigureBase::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FigureData_FigureBase::id() const {
  return id_;
}
inline void FigureData_FigureBase::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2 [default = 1];
inline bool FigureData_FigureBase::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FigureData_FigureBase::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FigureData_FigureBase::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FigureData_FigureBase::clear_level() {
  level_ = 1;
  clear_has_level();
}
inline ::google::protobuf::int32 FigureData_FigureBase::level() const {
  return level_;
}
inline void FigureData_FigureBase::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string name = 3;
inline bool FigureData_FigureBase::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FigureData_FigureBase::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FigureData_FigureBase::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FigureData_FigureBase::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FigureData_FigureBase::name() const {
  return *name_;
}
inline void FigureData_FigureBase::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FigureData_FigureBase::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FigureData_FigureBase::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FigureData_FigureBase::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FigureData_FigureBase::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FigureData_FigureBase::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string describe = 4;
inline bool FigureData_FigureBase::has_describe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FigureData_FigureBase::set_has_describe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FigureData_FigureBase::clear_has_describe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FigureData_FigureBase::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& FigureData_FigureBase::describe() const {
  return *describe_;
}
inline void FigureData_FigureBase::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void FigureData_FigureBase::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void FigureData_FigureBase::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FigureData_FigureBase::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* FigureData_FigureBase::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FigureData_FigureBase::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string buyDescribe = 5;
inline bool FigureData_FigureBase::has_buydescribe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FigureData_FigureBase::set_has_buydescribe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FigureData_FigureBase::clear_has_buydescribe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FigureData_FigureBase::clear_buydescribe() {
  if (buydescribe_ != &::google::protobuf::internal::kEmptyString) {
    buydescribe_->clear();
  }
  clear_has_buydescribe();
}
inline const ::std::string& FigureData_FigureBase::buydescribe() const {
  return *buydescribe_;
}
inline void FigureData_FigureBase::set_buydescribe(const ::std::string& value) {
  set_has_buydescribe();
  if (buydescribe_ == &::google::protobuf::internal::kEmptyString) {
    buydescribe_ = new ::std::string;
  }
  buydescribe_->assign(value);
}
inline void FigureData_FigureBase::set_buydescribe(const char* value) {
  set_has_buydescribe();
  if (buydescribe_ == &::google::protobuf::internal::kEmptyString) {
    buydescribe_ = new ::std::string;
  }
  buydescribe_->assign(value);
}
inline void FigureData_FigureBase::set_buydescribe(const char* value, size_t size) {
  set_has_buydescribe();
  if (buydescribe_ == &::google::protobuf::internal::kEmptyString) {
    buydescribe_ = new ::std::string;
  }
  buydescribe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FigureData_FigureBase::mutable_buydescribe() {
  set_has_buydescribe();
  if (buydescribe_ == &::google::protobuf::internal::kEmptyString) {
    buydescribe_ = new ::std::string;
  }
  return buydescribe_;
}
inline ::std::string* FigureData_FigureBase::release_buydescribe() {
  clear_has_buydescribe();
  if (buydescribe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buydescribe_;
    buydescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FigureData_FigureBase::set_allocated_buydescribe(::std::string* buydescribe) {
  if (buydescribe_ != &::google::protobuf::internal::kEmptyString) {
    delete buydescribe_;
  }
  if (buydescribe) {
    set_has_buydescribe();
    buydescribe_ = buydescribe;
  } else {
    clear_has_buydescribe();
    buydescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 price = 6;
inline bool FigureData_FigureBase::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FigureData_FigureBase::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FigureData_FigureBase::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FigureData_FigureBase::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 FigureData_FigureBase::price() const {
  return price_;
}
inline void FigureData_FigureBase::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// repeated .message.FigureData.FigureLevelTable levelTableList = 7;
inline int FigureData_FigureBase::leveltablelist_size() const {
  return leveltablelist_.size();
}
inline void FigureData_FigureBase::clear_leveltablelist() {
  leveltablelist_.Clear();
}
inline const ::message::FigureData_FigureLevelTable& FigureData_FigureBase::leveltablelist(int index) const {
  return leveltablelist_.Get(index);
}
inline ::message::FigureData_FigureLevelTable* FigureData_FigureBase::mutable_leveltablelist(int index) {
  return leveltablelist_.Mutable(index);
}
inline ::message::FigureData_FigureLevelTable* FigureData_FigureBase::add_leveltablelist() {
  return leveltablelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureLevelTable >&
FigureData_FigureBase::leveltablelist() const {
  return leveltablelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureLevelTable >*
FigureData_FigureBase::mutable_leveltablelist() {
  return &leveltablelist_;
}

// optional .message.FigureData.FigureProperty property = 8;
inline bool FigureData_FigureBase::has_property() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FigureData_FigureBase::set_has_property() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FigureData_FigureBase::clear_has_property() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FigureData_FigureBase::clear_property() {
  if (property_ != NULL) property_->::message::FigureData_FigureProperty::Clear();
  clear_has_property();
}
inline const ::message::FigureData_FigureProperty& FigureData_FigureBase::property() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return property_ != NULL ? *property_ : *default_instance().property_;
#else
  return property_ != NULL ? *property_ : *default_instance_->property_;
#endif
}
inline ::message::FigureData_FigureProperty* FigureData_FigureBase::mutable_property() {
  set_has_property();
  if (property_ == NULL) property_ = new ::message::FigureData_FigureProperty;
  return property_;
}
inline ::message::FigureData_FigureProperty* FigureData_FigureBase::release_property() {
  clear_has_property();
  ::message::FigureData_FigureProperty* temp = property_;
  property_ = NULL;
  return temp;
}
inline void FigureData_FigureBase::set_allocated_property(::message::FigureData_FigureProperty* property) {
  delete property_;
  property_ = property;
  if (property) {
    set_has_property();
  } else {
    clear_has_property();
  }
}

// -------------------------------------------------------------------

// FigureData_FigureLevelTable

// required int32 level = 1;
inline bool FigureData_FigureLevelTable::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FigureData_FigureLevelTable::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FigureData_FigureLevelTable::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FigureData_FigureLevelTable::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FigureData_FigureLevelTable::level() const {
  return level_;
}
inline void FigureData_FigureLevelTable::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 nextLevelGold = 2;
inline bool FigureData_FigureLevelTable::has_nextlevelgold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FigureData_FigureLevelTable::set_has_nextlevelgold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FigureData_FigureLevelTable::clear_has_nextlevelgold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FigureData_FigureLevelTable::clear_nextlevelgold() {
  nextlevelgold_ = 0;
  clear_has_nextlevelgold();
}
inline ::google::protobuf::int32 FigureData_FigureLevelTable::nextlevelgold() const {
  return nextlevelgold_;
}
inline void FigureData_FigureLevelTable::set_nextlevelgold(::google::protobuf::int32 value) {
  set_has_nextlevelgold();
  nextlevelgold_ = value;
}

// required int32 property_0 = 3;
inline bool FigureData_FigureLevelTable::has_property_0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FigureData_FigureLevelTable::set_has_property_0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FigureData_FigureLevelTable::clear_has_property_0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FigureData_FigureLevelTable::clear_property_0() {
  property_0_ = 0;
  clear_has_property_0();
}
inline ::google::protobuf::int32 FigureData_FigureLevelTable::property_0() const {
  return property_0_;
}
inline void FigureData_FigureLevelTable::set_property_0(::google::protobuf::int32 value) {
  set_has_property_0();
  property_0_ = value;
}

// required int32 property_1 = 4;
inline bool FigureData_FigureLevelTable::has_property_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FigureData_FigureLevelTable::set_has_property_1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FigureData_FigureLevelTable::clear_has_property_1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FigureData_FigureLevelTable::clear_property_1() {
  property_1_ = 0;
  clear_has_property_1();
}
inline ::google::protobuf::int32 FigureData_FigureLevelTable::property_1() const {
  return property_1_;
}
inline void FigureData_FigureLevelTable::set_property_1(::google::protobuf::int32 value) {
  set_has_property_1();
  property_1_ = value;
}

// required int32 property_2 = 5;
inline bool FigureData_FigureLevelTable::has_property_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FigureData_FigureLevelTable::set_has_property_2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FigureData_FigureLevelTable::clear_has_property_2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FigureData_FigureLevelTable::clear_property_2() {
  property_2_ = 0;
  clear_has_property_2();
}
inline ::google::protobuf::int32 FigureData_FigureLevelTable::property_2() const {
  return property_2_;
}
inline void FigureData_FigureLevelTable::set_property_2(::google::protobuf::int32 value) {
  set_has_property_2();
  property_2_ = value;
}

// -------------------------------------------------------------------

// FigureData_FigureProperty

// optional float X_Lian_Xian_Ju_Li = 1 [default = 0];
inline bool FigureData_FigureProperty::has_x_lian_xian_ju_li() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FigureData_FigureProperty::set_has_x_lian_xian_ju_li() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FigureData_FigureProperty::clear_has_x_lian_xian_ju_li() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FigureData_FigureProperty::clear_x_lian_xian_ju_li() {
  x_lian_xian_ju_li_ = 0;
  clear_has_x_lian_xian_ju_li();
}
inline float FigureData_FigureProperty::x_lian_xian_ju_li() const {
  return x_lian_xian_ju_li_;
}
inline void FigureData_FigureProperty::set_x_lian_xian_ju_li(float value) {
  set_has_x_lian_xian_ju_li();
  x_lian_xian_ju_li_ = value;
}

// optional float Y_Lian_Xian_Ju_Li = 2 [default = 0];
inline bool FigureData_FigureProperty::has_y_lian_xian_ju_li() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FigureData_FigureProperty::set_has_y_lian_xian_ju_li() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FigureData_FigureProperty::clear_has_y_lian_xian_ju_li() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FigureData_FigureProperty::clear_y_lian_xian_ju_li() {
  y_lian_xian_ju_li_ = 0;
  clear_has_y_lian_xian_ju_li();
}
inline float FigureData_FigureProperty::y_lian_xian_ju_li() const {
  return y_lian_xian_ju_li_;
}
inline void FigureData_FigureProperty::set_y_lian_xian_ju_li(float value) {
  set_has_y_lian_xian_ju_li();
  y_lian_xian_ju_li_ = value;
}

// optional float X_Diao_Luo_Shi_Jian_Jian_Ge = 3 [default = 0];
inline bool FigureData_FigureProperty::has_x_diao_luo_shi_jian_jian_ge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FigureData_FigureProperty::set_has_x_diao_luo_shi_jian_jian_ge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FigureData_FigureProperty::clear_has_x_diao_luo_shi_jian_jian_ge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FigureData_FigureProperty::clear_x_diao_luo_shi_jian_jian_ge() {
  x_diao_luo_shi_jian_jian_ge_ = 0;
  clear_has_x_diao_luo_shi_jian_jian_ge();
}
inline float FigureData_FigureProperty::x_diao_luo_shi_jian_jian_ge() const {
  return x_diao_luo_shi_jian_jian_ge_;
}
inline void FigureData_FigureProperty::set_x_diao_luo_shi_jian_jian_ge(float value) {
  set_has_x_diao_luo_shi_jian_jian_ge();
  x_diao_luo_shi_jian_jian_ge_ = value;
}

// optional float Y_Diao_Luo_Shi_Jian_Jian_Ge = 4 [default = 0];
inline bool FigureData_FigureProperty::has_y_diao_luo_shi_jian_jian_ge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FigureData_FigureProperty::set_has_y_diao_luo_shi_jian_jian_ge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FigureData_FigureProperty::clear_has_y_diao_luo_shi_jian_jian_ge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FigureData_FigureProperty::clear_y_diao_luo_shi_jian_jian_ge() {
  y_diao_luo_shi_jian_jian_ge_ = 0;
  clear_has_y_diao_luo_shi_jian_jian_ge();
}
inline float FigureData_FigureProperty::y_diao_luo_shi_jian_jian_ge() const {
  return y_diao_luo_shi_jian_jian_ge_;
}
inline void FigureData_FigureProperty::set_y_diao_luo_shi_jian_jian_ge(float value) {
  set_has_y_diao_luo_shi_jian_jian_ge();
  y_diao_luo_shi_jian_jian_ge_ = value;
}

// optional float X_Shi_Hua_Shi_Jian = 5 [default = 0];
inline bool FigureData_FigureProperty::has_x_shi_hua_shi_jian() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FigureData_FigureProperty::set_has_x_shi_hua_shi_jian() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FigureData_FigureProperty::clear_has_x_shi_hua_shi_jian() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FigureData_FigureProperty::clear_x_shi_hua_shi_jian() {
  x_shi_hua_shi_jian_ = 0;
  clear_has_x_shi_hua_shi_jian();
}
inline float FigureData_FigureProperty::x_shi_hua_shi_jian() const {
  return x_shi_hua_shi_jian_;
}
inline void FigureData_FigureProperty::set_x_shi_hua_shi_jian(float value) {
  set_has_x_shi_hua_shi_jian();
  x_shi_hua_shi_jian_ = value;
}

// optional float Y_Shi_Hua_Shi_Jian = 6 [default = 0];
inline bool FigureData_FigureProperty::has_y_shi_hua_shi_jian() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FigureData_FigureProperty::set_has_y_shi_hua_shi_jian() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FigureData_FigureProperty::clear_has_y_shi_hua_shi_jian() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FigureData_FigureProperty::clear_y_shi_hua_shi_jian() {
  y_shi_hua_shi_jian_ = 0;
  clear_has_y_shi_hua_shi_jian();
}
inline float FigureData_FigureProperty::y_shi_hua_shi_jian() const {
  return y_shi_hua_shi_jian_;
}
inline void FigureData_FigureProperty::set_y_shi_hua_shi_jian(float value) {
  set_has_y_shi_hua_shi_jian();
  y_shi_hua_shi_jian_ = value;
}

// optional float X_Tan_Xing = 7 [default = 0];
inline bool FigureData_FigureProperty::has_x_tan_xing() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FigureData_FigureProperty::set_has_x_tan_xing() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FigureData_FigureProperty::clear_has_x_tan_xing() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FigureData_FigureProperty::clear_x_tan_xing() {
  x_tan_xing_ = 0;
  clear_has_x_tan_xing();
}
inline float FigureData_FigureProperty::x_tan_xing() const {
  return x_tan_xing_;
}
inline void FigureData_FigureProperty::set_x_tan_xing(float value) {
  set_has_x_tan_xing();
  x_tan_xing_ = value;
}

// optional float Y_Tan_Xing = 8 [default = 0];
inline bool FigureData_FigureProperty::has_y_tan_xing() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FigureData_FigureProperty::set_has_y_tan_xing() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FigureData_FigureProperty::clear_has_y_tan_xing() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FigureData_FigureProperty::clear_y_tan_xing() {
  y_tan_xing_ = 0;
  clear_has_y_tan_xing();
}
inline float FigureData_FigureProperty::y_tan_xing() const {
  return y_tan_xing_;
}
inline void FigureData_FigureProperty::set_y_tan_xing(float value) {
  set_has_y_tan_xing();
  y_tan_xing_ = value;
}

// optional float X_Diao_Luo_Shu_Liang = 9 [default = 0];
inline bool FigureData_FigureProperty::has_x_diao_luo_shu_liang() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FigureData_FigureProperty::set_has_x_diao_luo_shu_liang() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FigureData_FigureProperty::clear_has_x_diao_luo_shu_liang() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FigureData_FigureProperty::clear_x_diao_luo_shu_liang() {
  x_diao_luo_shu_liang_ = 0;
  clear_has_x_diao_luo_shu_liang();
}
inline float FigureData_FigureProperty::x_diao_luo_shu_liang() const {
  return x_diao_luo_shu_liang_;
}
inline void FigureData_FigureProperty::set_x_diao_luo_shu_liang(float value) {
  set_has_x_diao_luo_shu_liang();
  x_diao_luo_shu_liang_ = value;
}

// optional float Y_Diao_Luo_Shu_Liang = 10 [default = 0];
inline bool FigureData_FigureProperty::has_y_diao_luo_shu_liang() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FigureData_FigureProperty::set_has_y_diao_luo_shu_liang() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FigureData_FigureProperty::clear_has_y_diao_luo_shu_liang() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FigureData_FigureProperty::clear_y_diao_luo_shu_liang() {
  y_diao_luo_shu_liang_ = 0;
  clear_has_y_diao_luo_shu_liang();
}
inline float FigureData_FigureProperty::y_diao_luo_shu_liang() const {
  return y_diao_luo_shu_liang_;
}
inline void FigureData_FigureProperty::set_y_diao_luo_shu_liang(float value) {
  set_has_y_diao_luo_shu_liang();
  y_diao_luo_shu_liang_ = value;
}

// optional float X_Shi_Hua_Qiu_Shu_Liang = 11 [default = 0];
inline bool FigureData_FigureProperty::has_x_shi_hua_qiu_shu_liang() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FigureData_FigureProperty::set_has_x_shi_hua_qiu_shu_liang() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FigureData_FigureProperty::clear_has_x_shi_hua_qiu_shu_liang() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FigureData_FigureProperty::clear_x_shi_hua_qiu_shu_liang() {
  x_shi_hua_qiu_shu_liang_ = 0;
  clear_has_x_shi_hua_qiu_shu_liang();
}
inline float FigureData_FigureProperty::x_shi_hua_qiu_shu_liang() const {
  return x_shi_hua_qiu_shu_liang_;
}
inline void FigureData_FigureProperty::set_x_shi_hua_qiu_shu_liang(float value) {
  set_has_x_shi_hua_qiu_shu_liang();
  x_shi_hua_qiu_shu_liang_ = value;
}

// optional float Y_Shi_Hua_Qiu_Shu_Liang = 12 [default = 0];
inline bool FigureData_FigureProperty::has_y_shi_hua_qiu_shu_liang() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FigureData_FigureProperty::set_has_y_shi_hua_qiu_shu_liang() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FigureData_FigureProperty::clear_has_y_shi_hua_qiu_shu_liang() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FigureData_FigureProperty::clear_y_shi_hua_qiu_shu_liang() {
  y_shi_hua_qiu_shu_liang_ = 0;
  clear_has_y_shi_hua_qiu_shu_liang();
}
inline float FigureData_FigureProperty::y_shi_hua_qiu_shu_liang() const {
  return y_shi_hua_qiu_shu_liang_;
}
inline void FigureData_FigureProperty::set_y_shi_hua_qiu_shu_liang(float value) {
  set_has_y_shi_hua_qiu_shu_liang();
  y_shi_hua_qiu_shu_liang_ = value;
}

// -------------------------------------------------------------------

// FigureData

// repeated .message.FigureData.FigureBase FigureList = 1;
inline int FigureData::figurelist_size() const {
  return figurelist_.size();
}
inline void FigureData::clear_figurelist() {
  figurelist_.Clear();
}
inline const ::message::FigureData_FigureBase& FigureData::figurelist(int index) const {
  return figurelist_.Get(index);
}
inline ::message::FigureData_FigureBase* FigureData::mutable_figurelist(int index) {
  return figurelist_.Mutable(index);
}
inline ::message::FigureData_FigureBase* FigureData::add_figurelist() {
  return figurelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureBase >&
FigureData::figurelist() const {
  return figurelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::FigureData_FigureBase >*
FigureData::mutable_figurelist() {
  return &figurelist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Figure_2eproto__INCLUDED
