// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Figure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Figure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_Figure_2eproto() {
  delete FigureData::default_instance_;
  delete FigureData_FigureBase::default_instance_;
  delete FigureData_FigureLevelTable::default_instance_;
  delete FigureData_FigureProperty::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Figure_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Figure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FigureData::default_instance_ = new FigureData();
  FigureData_FigureBase::default_instance_ = new FigureData_FigureBase();
  FigureData_FigureLevelTable::default_instance_ = new FigureData_FigureLevelTable();
  FigureData_FigureProperty::default_instance_ = new FigureData_FigureProperty();
  FigureData::default_instance_->InitAsDefaultInstance();
  FigureData_FigureBase::default_instance_->InitAsDefaultInstance();
  FigureData_FigureLevelTable::default_instance_->InitAsDefaultInstance();
  FigureData_FigureProperty::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Figure_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Figure_2eproto_once_);
void protobuf_AddDesc_Figure_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Figure_2eproto_once_,
                 &protobuf_AddDesc_Figure_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Figure_2eproto {
  StaticDescriptorInitializer_Figure_2eproto() {
    protobuf_AddDesc_Figure_2eproto();
  }
} static_descriptor_initializer_Figure_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FigureData_FigureBase::kIdFieldNumber;
const int FigureData_FigureBase::kLevelFieldNumber;
const int FigureData_FigureBase::kNameFieldNumber;
const int FigureData_FigureBase::kDescribeFieldNumber;
const int FigureData_FigureBase::kBuyDescribeFieldNumber;
const int FigureData_FigureBase::kPriceFieldNumber;
const int FigureData_FigureBase::kLevelTableListFieldNumber;
const int FigureData_FigureBase::kPropertyFieldNumber;
#endif  // !_MSC_VER

FigureData_FigureBase::FigureData_FigureBase()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FigureData_FigureBase::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  property_ = const_cast< ::message::FigureData_FigureProperty*>(
      ::message::FigureData_FigureProperty::internal_default_instance());
#else
  property_ = const_cast< ::message::FigureData_FigureProperty*>(&::message::FigureData_FigureProperty::default_instance());
#endif
}

FigureData_FigureBase::FigureData_FigureBase(const FigureData_FigureBase& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FigureData_FigureBase::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buydescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0;
  property_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FigureData_FigureBase::~FigureData_FigureBase() {
  SharedDtor();
}

void FigureData_FigureBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (buydescribe_ != &::google::protobuf::internal::kEmptyString) {
    delete buydescribe_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete property_;
  }
}

void FigureData_FigureBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FigureData_FigureBase& FigureData_FigureBase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Figure_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Figure_2eproto();
#endif
  return *default_instance_;
}

FigureData_FigureBase* FigureData_FigureBase::default_instance_ = NULL;

FigureData_FigureBase* FigureData_FigureBase::New() const {
  return new FigureData_FigureBase;
}

void FigureData_FigureBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    if (has_buydescribe()) {
      if (buydescribe_ != &::google::protobuf::internal::kEmptyString) {
        buydescribe_->clear();
      }
    }
    price_ = 0;
    if (has_property()) {
      if (property_ != NULL) property_->::message::FigureData_FigureProperty::Clear();
    }
  }
  leveltablelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FigureData_FigureBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_describe;
        break;
      }

      // optional string describe = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buyDescribe;
        break;
      }

      // optional string buyDescribe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buydescribe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_price;
        break;
      }

      // required int32 price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_levelTableList;
        break;
      }

      // repeated .message.FigureData.FigureLevelTable levelTableList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levelTableList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leveltablelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_levelTableList;
        if (input->ExpectTag(66)) goto parse_property;
        break;
      }

      // optional .message.FigureData.FigureProperty property = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FigureData_FigureBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string describe = 4;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->describe(), output);
  }

  // optional string buyDescribe = 5;
  if (has_buydescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->buydescribe(), output);
  }

  // required int32 price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->price(), output);
  }

  // repeated .message.FigureData.FigureLevelTable levelTableList = 7;
  for (int i = 0; i < this->leveltablelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->leveltablelist(i), output);
  }

  // optional .message.FigureData.FigureProperty property = 8;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->property(), output);
  }

}

int FigureData_FigureBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string describe = 4;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

    // optional string buyDescribe = 5;
    if (has_buydescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buydescribe());
    }

    // required int32 price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional .message.FigureData.FigureProperty property = 8;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property());
    }

  }
  // repeated .message.FigureData.FigureLevelTable levelTableList = 7;
  total_size += 1 * this->leveltablelist_size();
  for (int i = 0; i < this->leveltablelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leveltablelist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FigureData_FigureBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FigureData_FigureBase*>(&from));
}

void FigureData_FigureBase::MergeFrom(const FigureData_FigureBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  leveltablelist_.MergeFrom(from.leveltablelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_buydescribe()) {
      set_buydescribe(from.buydescribe());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_property()) {
      mutable_property()->::message::FigureData_FigureProperty::MergeFrom(from.property());
    }
  }
}

void FigureData_FigureBase::CopyFrom(const FigureData_FigureBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureData_FigureBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;

  for (int i = 0; i < leveltablelist_size(); i++) {
    if (!this->leveltablelist(i).IsInitialized()) return false;
  }
  return true;
}

void FigureData_FigureBase::Swap(FigureData_FigureBase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(describe_, other->describe_);
    std::swap(buydescribe_, other->buydescribe_);
    std::swap(price_, other->price_);
    leveltablelist_.Swap(&other->leveltablelist_);
    std::swap(property_, other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FigureData_FigureBase::GetTypeName() const {
  return "message.FigureData.FigureBase";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FigureData_FigureLevelTable::kLevelFieldNumber;
const int FigureData_FigureLevelTable::kNextLevelGoldFieldNumber;
const int FigureData_FigureLevelTable::kProperty0FieldNumber;
const int FigureData_FigureLevelTable::kProperty1FieldNumber;
const int FigureData_FigureLevelTable::kProperty2FieldNumber;
#endif  // !_MSC_VER

FigureData_FigureLevelTable::FigureData_FigureLevelTable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FigureData_FigureLevelTable::InitAsDefaultInstance() {
}

FigureData_FigureLevelTable::FigureData_FigureLevelTable(const FigureData_FigureLevelTable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FigureData_FigureLevelTable::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  nextlevelgold_ = 0;
  property_0_ = 0;
  property_1_ = 0;
  property_2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FigureData_FigureLevelTable::~FigureData_FigureLevelTable() {
  SharedDtor();
}

void FigureData_FigureLevelTable::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FigureData_FigureLevelTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FigureData_FigureLevelTable& FigureData_FigureLevelTable::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Figure_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Figure_2eproto();
#endif
  return *default_instance_;
}

FigureData_FigureLevelTable* FigureData_FigureLevelTable::default_instance_ = NULL;

FigureData_FigureLevelTable* FigureData_FigureLevelTable::New() const {
  return new FigureData_FigureLevelTable;
}

void FigureData_FigureLevelTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    nextlevelgold_ = 0;
    property_0_ = 0;
    property_1_ = 0;
    property_2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FigureData_FigureLevelTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextLevelGold;
        break;
      }

      // required int32 nextLevelGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextLevelGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextlevelgold_)));
          set_has_nextlevelgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_property_0;
        break;
      }

      // required int32 property_0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_0_)));
          set_has_property_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_property_1;
        break;
      }

      // required int32 property_1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_1_)));
          set_has_property_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_property_2;
        break;
      }

      // required int32 property_2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_2_)));
          set_has_property_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FigureData_FigureLevelTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 nextLevelGold = 2;
  if (has_nextlevelgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextlevelgold(), output);
  }

  // required int32 property_0 = 3;
  if (has_property_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->property_0(), output);
  }

  // required int32 property_1 = 4;
  if (has_property_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->property_1(), output);
  }

  // required int32 property_2 = 5;
  if (has_property_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->property_2(), output);
  }

}

int FigureData_FigureLevelTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 nextLevelGold = 2;
    if (has_nextlevelgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextlevelgold());
    }

    // required int32 property_0 = 3;
    if (has_property_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property_0());
    }

    // required int32 property_1 = 4;
    if (has_property_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property_1());
    }

    // required int32 property_2 = 5;
    if (has_property_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property_2());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FigureData_FigureLevelTable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FigureData_FigureLevelTable*>(&from));
}

void FigureData_FigureLevelTable::MergeFrom(const FigureData_FigureLevelTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_nextlevelgold()) {
      set_nextlevelgold(from.nextlevelgold());
    }
    if (from.has_property_0()) {
      set_property_0(from.property_0());
    }
    if (from.has_property_1()) {
      set_property_1(from.property_1());
    }
    if (from.has_property_2()) {
      set_property_2(from.property_2());
    }
  }
}

void FigureData_FigureLevelTable::CopyFrom(const FigureData_FigureLevelTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureData_FigureLevelTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FigureData_FigureLevelTable::Swap(FigureData_FigureLevelTable* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(nextlevelgold_, other->nextlevelgold_);
    std::swap(property_0_, other->property_0_);
    std::swap(property_1_, other->property_1_);
    std::swap(property_2_, other->property_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FigureData_FigureLevelTable::GetTypeName() const {
  return "message.FigureData.FigureLevelTable";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FigureData_FigureProperty::kXLianXianJuLiFieldNumber;
const int FigureData_FigureProperty::kYLianXianJuLiFieldNumber;
const int FigureData_FigureProperty::kXDiaoLuoShiJianJianGeFieldNumber;
const int FigureData_FigureProperty::kYDiaoLuoShiJianJianGeFieldNumber;
const int FigureData_FigureProperty::kXShiHuaShiJianFieldNumber;
const int FigureData_FigureProperty::kYShiHuaShiJianFieldNumber;
const int FigureData_FigureProperty::kXTanXingFieldNumber;
const int FigureData_FigureProperty::kYTanXingFieldNumber;
const int FigureData_FigureProperty::kXDiaoLuoShuLiangFieldNumber;
const int FigureData_FigureProperty::kYDiaoLuoShuLiangFieldNumber;
const int FigureData_FigureProperty::kXShiHuaQiuShuLiangFieldNumber;
const int FigureData_FigureProperty::kYShiHuaQiuShuLiangFieldNumber;
#endif  // !_MSC_VER

FigureData_FigureProperty::FigureData_FigureProperty()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FigureData_FigureProperty::InitAsDefaultInstance() {
}

FigureData_FigureProperty::FigureData_FigureProperty(const FigureData_FigureProperty& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FigureData_FigureProperty::SharedCtor() {
  _cached_size_ = 0;
  x_lian_xian_ju_li_ = 0;
  y_lian_xian_ju_li_ = 0;
  x_diao_luo_shi_jian_jian_ge_ = 0;
  y_diao_luo_shi_jian_jian_ge_ = 0;
  x_shi_hua_shi_jian_ = 0;
  y_shi_hua_shi_jian_ = 0;
  x_tan_xing_ = 0;
  y_tan_xing_ = 0;
  x_diao_luo_shu_liang_ = 0;
  y_diao_luo_shu_liang_ = 0;
  x_shi_hua_qiu_shu_liang_ = 0;
  y_shi_hua_qiu_shu_liang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FigureData_FigureProperty::~FigureData_FigureProperty() {
  SharedDtor();
}

void FigureData_FigureProperty::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FigureData_FigureProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FigureData_FigureProperty& FigureData_FigureProperty::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Figure_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Figure_2eproto();
#endif
  return *default_instance_;
}

FigureData_FigureProperty* FigureData_FigureProperty::default_instance_ = NULL;

FigureData_FigureProperty* FigureData_FigureProperty::New() const {
  return new FigureData_FigureProperty;
}

void FigureData_FigureProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_lian_xian_ju_li_ = 0;
    y_lian_xian_ju_li_ = 0;
    x_diao_luo_shi_jian_jian_ge_ = 0;
    y_diao_luo_shi_jian_jian_ge_ = 0;
    x_shi_hua_shi_jian_ = 0;
    y_shi_hua_shi_jian_ = 0;
    x_tan_xing_ = 0;
    y_tan_xing_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    x_diao_luo_shu_liang_ = 0;
    y_diao_luo_shu_liang_ = 0;
    x_shi_hua_qiu_shu_liang_ = 0;
    y_shi_hua_qiu_shu_liang_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FigureData_FigureProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X_Lian_Xian_Ju_Li = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_lian_xian_ju_li_)));
          set_has_x_lian_xian_ju_li();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y_Lian_Xian_Ju_Li;
        break;
      }

      // optional float Y_Lian_Xian_Ju_Li = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y_Lian_Xian_Ju_Li:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_lian_xian_ju_li_)));
          set_has_y_lian_xian_ju_li();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_X_Diao_Luo_Shi_Jian_Jian_Ge;
        break;
      }

      // optional float X_Diao_Luo_Shi_Jian_Jian_Ge = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X_Diao_Luo_Shi_Jian_Jian_Ge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_diao_luo_shi_jian_jian_ge_)));
          set_has_x_diao_luo_shi_jian_jian_ge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Y_Diao_Luo_Shi_Jian_Jian_Ge;
        break;
      }

      // optional float Y_Diao_Luo_Shi_Jian_Jian_Ge = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y_Diao_Luo_Shi_Jian_Jian_Ge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_diao_luo_shi_jian_jian_ge_)));
          set_has_y_diao_luo_shi_jian_jian_ge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_X_Shi_Hua_Shi_Jian;
        break;
      }

      // optional float X_Shi_Hua_Shi_Jian = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X_Shi_Hua_Shi_Jian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_shi_hua_shi_jian_)));
          set_has_x_shi_hua_shi_jian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_Y_Shi_Hua_Shi_Jian;
        break;
      }

      // optional float Y_Shi_Hua_Shi_Jian = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y_Shi_Hua_Shi_Jian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_shi_hua_shi_jian_)));
          set_has_y_shi_hua_shi_jian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_X_Tan_Xing;
        break;
      }

      // optional float X_Tan_Xing = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X_Tan_Xing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_tan_xing_)));
          set_has_x_tan_xing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_Y_Tan_Xing;
        break;
      }

      // optional float Y_Tan_Xing = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y_Tan_Xing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_tan_xing_)));
          set_has_y_tan_xing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_X_Diao_Luo_Shu_Liang;
        break;
      }

      // optional float X_Diao_Luo_Shu_Liang = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X_Diao_Luo_Shu_Liang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_diao_luo_shu_liang_)));
          set_has_x_diao_luo_shu_liang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_Y_Diao_Luo_Shu_Liang;
        break;
      }

      // optional float Y_Diao_Luo_Shu_Liang = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y_Diao_Luo_Shu_Liang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_diao_luo_shu_liang_)));
          set_has_y_diao_luo_shu_liang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_X_Shi_Hua_Qiu_Shu_Liang;
        break;
      }

      // optional float X_Shi_Hua_Qiu_Shu_Liang = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X_Shi_Hua_Qiu_Shu_Liang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_shi_hua_qiu_shu_liang_)));
          set_has_x_shi_hua_qiu_shu_liang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_Y_Shi_Hua_Qiu_Shu_Liang;
        break;
      }

      // optional float Y_Shi_Hua_Qiu_Shu_Liang = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y_Shi_Hua_Qiu_Shu_Liang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_shi_hua_qiu_shu_liang_)));
          set_has_y_shi_hua_qiu_shu_liang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FigureData_FigureProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float X_Lian_Xian_Ju_Li = 1 [default = 0];
  if (has_x_lian_xian_ju_li()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_lian_xian_ju_li(), output);
  }

  // optional float Y_Lian_Xian_Ju_Li = 2 [default = 0];
  if (has_y_lian_xian_ju_li()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_lian_xian_ju_li(), output);
  }

  // optional float X_Diao_Luo_Shi_Jian_Jian_Ge = 3 [default = 0];
  if (has_x_diao_luo_shi_jian_jian_ge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x_diao_luo_shi_jian_jian_ge(), output);
  }

  // optional float Y_Diao_Luo_Shi_Jian_Jian_Ge = 4 [default = 0];
  if (has_y_diao_luo_shi_jian_jian_ge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y_diao_luo_shi_jian_jian_ge(), output);
  }

  // optional float X_Shi_Hua_Shi_Jian = 5 [default = 0];
  if (has_x_shi_hua_shi_jian()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x_shi_hua_shi_jian(), output);
  }

  // optional float Y_Shi_Hua_Shi_Jian = 6 [default = 0];
  if (has_y_shi_hua_shi_jian()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y_shi_hua_shi_jian(), output);
  }

  // optional float X_Tan_Xing = 7 [default = 0];
  if (has_x_tan_xing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->x_tan_xing(), output);
  }

  // optional float Y_Tan_Xing = 8 [default = 0];
  if (has_y_tan_xing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->y_tan_xing(), output);
  }

  // optional float X_Diao_Luo_Shu_Liang = 9 [default = 0];
  if (has_x_diao_luo_shu_liang()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->x_diao_luo_shu_liang(), output);
  }

  // optional float Y_Diao_Luo_Shu_Liang = 10 [default = 0];
  if (has_y_diao_luo_shu_liang()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->y_diao_luo_shu_liang(), output);
  }

  // optional float X_Shi_Hua_Qiu_Shu_Liang = 11 [default = 0];
  if (has_x_shi_hua_qiu_shu_liang()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->x_shi_hua_qiu_shu_liang(), output);
  }

  // optional float Y_Shi_Hua_Qiu_Shu_Liang = 12 [default = 0];
  if (has_y_shi_hua_qiu_shu_liang()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->y_shi_hua_qiu_shu_liang(), output);
  }

}

int FigureData_FigureProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float X_Lian_Xian_Ju_Li = 1 [default = 0];
    if (has_x_lian_xian_ju_li()) {
      total_size += 1 + 4;
    }

    // optional float Y_Lian_Xian_Ju_Li = 2 [default = 0];
    if (has_y_lian_xian_ju_li()) {
      total_size += 1 + 4;
    }

    // optional float X_Diao_Luo_Shi_Jian_Jian_Ge = 3 [default = 0];
    if (has_x_diao_luo_shi_jian_jian_ge()) {
      total_size += 1 + 4;
    }

    // optional float Y_Diao_Luo_Shi_Jian_Jian_Ge = 4 [default = 0];
    if (has_y_diao_luo_shi_jian_jian_ge()) {
      total_size += 1 + 4;
    }

    // optional float X_Shi_Hua_Shi_Jian = 5 [default = 0];
    if (has_x_shi_hua_shi_jian()) {
      total_size += 1 + 4;
    }

    // optional float Y_Shi_Hua_Shi_Jian = 6 [default = 0];
    if (has_y_shi_hua_shi_jian()) {
      total_size += 1 + 4;
    }

    // optional float X_Tan_Xing = 7 [default = 0];
    if (has_x_tan_xing()) {
      total_size += 1 + 4;
    }

    // optional float Y_Tan_Xing = 8 [default = 0];
    if (has_y_tan_xing()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float X_Diao_Luo_Shu_Liang = 9 [default = 0];
    if (has_x_diao_luo_shu_liang()) {
      total_size += 1 + 4;
    }

    // optional float Y_Diao_Luo_Shu_Liang = 10 [default = 0];
    if (has_y_diao_luo_shu_liang()) {
      total_size += 1 + 4;
    }

    // optional float X_Shi_Hua_Qiu_Shu_Liang = 11 [default = 0];
    if (has_x_shi_hua_qiu_shu_liang()) {
      total_size += 1 + 4;
    }

    // optional float Y_Shi_Hua_Qiu_Shu_Liang = 12 [default = 0];
    if (has_y_shi_hua_qiu_shu_liang()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FigureData_FigureProperty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FigureData_FigureProperty*>(&from));
}

void FigureData_FigureProperty::MergeFrom(const FigureData_FigureProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_lian_xian_ju_li()) {
      set_x_lian_xian_ju_li(from.x_lian_xian_ju_li());
    }
    if (from.has_y_lian_xian_ju_li()) {
      set_y_lian_xian_ju_li(from.y_lian_xian_ju_li());
    }
    if (from.has_x_diao_luo_shi_jian_jian_ge()) {
      set_x_diao_luo_shi_jian_jian_ge(from.x_diao_luo_shi_jian_jian_ge());
    }
    if (from.has_y_diao_luo_shi_jian_jian_ge()) {
      set_y_diao_luo_shi_jian_jian_ge(from.y_diao_luo_shi_jian_jian_ge());
    }
    if (from.has_x_shi_hua_shi_jian()) {
      set_x_shi_hua_shi_jian(from.x_shi_hua_shi_jian());
    }
    if (from.has_y_shi_hua_shi_jian()) {
      set_y_shi_hua_shi_jian(from.y_shi_hua_shi_jian());
    }
    if (from.has_x_tan_xing()) {
      set_x_tan_xing(from.x_tan_xing());
    }
    if (from.has_y_tan_xing()) {
      set_y_tan_xing(from.y_tan_xing());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_x_diao_luo_shu_liang()) {
      set_x_diao_luo_shu_liang(from.x_diao_luo_shu_liang());
    }
    if (from.has_y_diao_luo_shu_liang()) {
      set_y_diao_luo_shu_liang(from.y_diao_luo_shu_liang());
    }
    if (from.has_x_shi_hua_qiu_shu_liang()) {
      set_x_shi_hua_qiu_shu_liang(from.x_shi_hua_qiu_shu_liang());
    }
    if (from.has_y_shi_hua_qiu_shu_liang()) {
      set_y_shi_hua_qiu_shu_liang(from.y_shi_hua_qiu_shu_liang());
    }
  }
}

void FigureData_FigureProperty::CopyFrom(const FigureData_FigureProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureData_FigureProperty::IsInitialized() const {

  return true;
}

void FigureData_FigureProperty::Swap(FigureData_FigureProperty* other) {
  if (other != this) {
    std::swap(x_lian_xian_ju_li_, other->x_lian_xian_ju_li_);
    std::swap(y_lian_xian_ju_li_, other->y_lian_xian_ju_li_);
    std::swap(x_diao_luo_shi_jian_jian_ge_, other->x_diao_luo_shi_jian_jian_ge_);
    std::swap(y_diao_luo_shi_jian_jian_ge_, other->y_diao_luo_shi_jian_jian_ge_);
    std::swap(x_shi_hua_shi_jian_, other->x_shi_hua_shi_jian_);
    std::swap(y_shi_hua_shi_jian_, other->y_shi_hua_shi_jian_);
    std::swap(x_tan_xing_, other->x_tan_xing_);
    std::swap(y_tan_xing_, other->y_tan_xing_);
    std::swap(x_diao_luo_shu_liang_, other->x_diao_luo_shu_liang_);
    std::swap(y_diao_luo_shu_liang_, other->y_diao_luo_shu_liang_);
    std::swap(x_shi_hua_qiu_shu_liang_, other->x_shi_hua_qiu_shu_liang_);
    std::swap(y_shi_hua_qiu_shu_liang_, other->y_shi_hua_qiu_shu_liang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FigureData_FigureProperty::GetTypeName() const {
  return "message.FigureData.FigureProperty";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FigureData::kFigureListFieldNumber;
#endif  // !_MSC_VER

FigureData::FigureData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FigureData::InitAsDefaultInstance() {
}

FigureData::FigureData(const FigureData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FigureData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FigureData::~FigureData() {
  SharedDtor();
}

void FigureData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FigureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FigureData& FigureData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Figure_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Figure_2eproto();
#endif
  return *default_instance_;
}

FigureData* FigureData::default_instance_ = NULL;

FigureData* FigureData::New() const {
  return new FigureData;
}

void FigureData::Clear() {
  figurelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FigureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.FigureData.FigureBase FigureList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FigureList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_figurelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FigureList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FigureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.FigureData.FigureBase FigureList = 1;
  for (int i = 0; i < this->figurelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->figurelist(i), output);
  }

}

int FigureData::ByteSize() const {
  int total_size = 0;

  // repeated .message.FigureData.FigureBase FigureList = 1;
  total_size += 1 * this->figurelist_size();
  for (int i = 0; i < this->figurelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->figurelist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FigureData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FigureData*>(&from));
}

void FigureData::MergeFrom(const FigureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  figurelist_.MergeFrom(from.figurelist_);
}

void FigureData::CopyFrom(const FigureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureData::IsInitialized() const {

  for (int i = 0; i < figurelist_size(); i++) {
    if (!this->figurelist(i).IsInitialized()) return false;
  }
  return true;
}

void FigureData::Swap(FigureData* other) {
  if (other != this) {
    figurelist_.Swap(&other->figurelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FigureData::GetTypeName() const {
  return "message.FigureData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
