// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LanBattleData.proto

#ifndef PROTOBUF_LanBattleData_2eproto__INCLUDED
#define PROTOBUF_LanBattleData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "BattleInfoData.pb.h"
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LanBattleData_2eproto();
void protobuf_AssignDesc_LanBattleData_2eproto();
void protobuf_ShutdownFile_LanBattleData_2eproto();

class LanBattleDataNotice;

// ===================================================================

class LanBattleDataNotice : public ::google::protobuf::MessageLite {
 public:
  LanBattleDataNotice();
  virtual ~LanBattleDataNotice();

  LanBattleDataNotice(const LanBattleDataNotice& from);

  inline LanBattleDataNotice& operator=(const LanBattleDataNotice& from) {
    CopyFrom(from);
    return *this;
  }

  static const LanBattleDataNotice& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LanBattleDataNotice* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LanBattleDataNotice* other);

  // implements Message ----------------------------------------------

  LanBattleDataNotice* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LanBattleDataNotice& from);
  void MergeFrom(const LanBattleDataNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required .message.BattleInfo battleInfo = 2;
  inline bool has_battleinfo() const;
  inline void clear_battleinfo();
  static const int kBattleInfoFieldNumber = 2;
  inline const ::message::BattleInfo& battleinfo() const;
  inline ::message::BattleInfo* mutable_battleinfo();
  inline ::message::BattleInfo* release_battleinfo();
  inline void set_allocated_battleinfo(::message::BattleInfo* battleinfo);

  // @@protoc_insertion_point(class_scope:message.LanBattleDataNotice)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_battleinfo();
  inline void clear_has_battleinfo();

  ::std::string* uuid_;
  ::message::BattleInfo* battleinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LanBattleData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LanBattleData_2eproto();
  #endif
  friend void protobuf_AssignDesc_LanBattleData_2eproto();
  friend void protobuf_ShutdownFile_LanBattleData_2eproto();

  void InitAsDefaultInstance();
  static LanBattleDataNotice* default_instance_;
};
// ===================================================================


// ===================================================================

// LanBattleDataNotice

// required string uuid = 1;
inline bool LanBattleDataNotice::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanBattleDataNotice::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanBattleDataNotice::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanBattleDataNotice::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& LanBattleDataNotice::uuid() const {
  return *uuid_;
}
inline void LanBattleDataNotice::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LanBattleDataNotice::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LanBattleDataNotice::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanBattleDataNotice::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* LanBattleDataNotice::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LanBattleDataNotice::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .message.BattleInfo battleInfo = 2;
inline bool LanBattleDataNotice::has_battleinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanBattleDataNotice::set_has_battleinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanBattleDataNotice::clear_has_battleinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanBattleDataNotice::clear_battleinfo() {
  if (battleinfo_ != NULL) battleinfo_->::message::BattleInfo::Clear();
  clear_has_battleinfo();
}
inline const ::message::BattleInfo& LanBattleDataNotice::battleinfo() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return battleinfo_ != NULL ? *battleinfo_ : *default_instance().battleinfo_;
#else
  return battleinfo_ != NULL ? *battleinfo_ : *default_instance_->battleinfo_;
#endif
}
inline ::message::BattleInfo* LanBattleDataNotice::mutable_battleinfo() {
  set_has_battleinfo();
  if (battleinfo_ == NULL) battleinfo_ = new ::message::BattleInfo;
  return battleinfo_;
}
inline ::message::BattleInfo* LanBattleDataNotice::release_battleinfo() {
  clear_has_battleinfo();
  ::message::BattleInfo* temp = battleinfo_;
  battleinfo_ = NULL;
  return temp;
}
inline void LanBattleDataNotice::set_allocated_battleinfo(::message::BattleInfo* battleinfo) {
  delete battleinfo_;
  battleinfo_ = battleinfo;
  if (battleinfo) {
    set_has_battleinfo();
  } else {
    clear_has_battleinfo();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LanBattleData_2eproto__INCLUDED
