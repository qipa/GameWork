// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_FriendList_2eproto() {
  delete FriendListRequest::default_instance_;
  delete FriendListResponse::default_instance_;
  delete FriendListResponse_PlayerInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_FriendList_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_FriendList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FriendListRequest::default_instance_ = new FriendListRequest();
  FriendListResponse::default_instance_ = new FriendListResponse();
  FriendListResponse_PlayerInfo::default_instance_ = new FriendListResponse_PlayerInfo();
  FriendListRequest::default_instance_->InitAsDefaultInstance();
  FriendListResponse::default_instance_->InitAsDefaultInstance();
  FriendListResponse_PlayerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FriendList_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_FriendList_2eproto_once_);
void protobuf_AddDesc_FriendList_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_FriendList_2eproto_once_,
                 &protobuf_AddDesc_FriendList_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FriendList_2eproto {
  StaticDescriptorInitializer_FriendList_2eproto() {
    protobuf_AddDesc_FriendList_2eproto();
  }
} static_descriptor_initializer_FriendList_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FriendListRequest::kWbTypeFieldNumber;
#endif  // !_MSC_VER

FriendListRequest::FriendListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendListRequest::InitAsDefaultInstance() {
}

FriendListRequest::FriendListRequest(const FriendListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendListRequest::SharedCtor() {
  _cached_size_ = 0;
  wb_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendListRequest::~FriendListRequest() {
  SharedDtor();
}

void FriendListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendListRequest& FriendListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendList_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendList_2eproto();
#endif
  return *default_instance_;
}

FriendListRequest* FriendListRequest::default_instance_ = NULL;

FriendListRequest* FriendListRequest::New() const {
  return new FriendListRequest;
}

void FriendListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wb_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wb_Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_type_)));
          set_has_wb_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wb_Type = 1;
  if (has_wb_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wb_type(), output);
  }

}

int FriendListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wb_Type = 1;
    if (has_wb_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wb_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendListRequest*>(&from));
}

void FriendListRequest::MergeFrom(const FriendListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wb_type()) {
      set_wb_type(from.wb_type());
    }
  }
}

void FriendListRequest::CopyFrom(const FriendListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListRequest::IsInitialized() const {

  return true;
}

void FriendListRequest::Swap(FriendListRequest* other) {
  if (other != this) {
    std::swap(wb_type_, other->wb_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendListRequest::GetTypeName() const {
  return "message.FriendListRequest";
}


// ===================================================================

bool FriendListResponse_PlayerInfo_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FriendListResponse_PlayerInfo_State FriendListResponse_PlayerInfo::State_Online;
const FriendListResponse_PlayerInfo_State FriendListResponse_PlayerInfo::State_Battle;
const FriendListResponse_PlayerInfo_State FriendListResponse_PlayerInfo::State_Offline;
const FriendListResponse_PlayerInfo_State FriendListResponse_PlayerInfo::State_MIN;
const FriendListResponse_PlayerInfo_State FriendListResponse_PlayerInfo::State_MAX;
const int FriendListResponse_PlayerInfo::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FriendListResponse_PlayerInfo::kGameUUIDFieldNumber;
const int FriendListResponse_PlayerInfo::kFriendNameFieldNumber;
const int FriendListResponse_PlayerInfo::kGameScoreFieldNumber;
const int FriendListResponse_PlayerInfo::kHeadIconFieldNumber;
const int FriendListResponse_PlayerInfo::kIsAllowGiveFieldNumber;
const int FriendListResponse_PlayerInfo::kStateFieldNumber;
const int FriendListResponse_PlayerInfo::kFriendNickNameFieldNumber;
#endif  // !_MSC_VER

FriendListResponse_PlayerInfo::FriendListResponse_PlayerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendListResponse_PlayerInfo::InitAsDefaultInstance() {
}

FriendListResponse_PlayerInfo::FriendListResponse_PlayerInfo(const FriendListResponse_PlayerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendListResponse_PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  game_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamescore_ = 0;
  headicon_ = 0;
  isallowgive_ = false;
  state_ = 0;
  friendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendListResponse_PlayerInfo::~FriendListResponse_PlayerInfo() {
  SharedDtor();
}

void FriendListResponse_PlayerInfo::SharedDtor() {
  if (game_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete game_uuid_;
  }
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendnickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendListResponse_PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendListResponse_PlayerInfo& FriendListResponse_PlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendList_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendList_2eproto();
#endif
  return *default_instance_;
}

FriendListResponse_PlayerInfo* FriendListResponse_PlayerInfo::default_instance_ = NULL;

FriendListResponse_PlayerInfo* FriendListResponse_PlayerInfo::New() const {
  return new FriendListResponse_PlayerInfo;
}

void FriendListResponse_PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_uuid()) {
      if (game_uuid_ != &::google::protobuf::internal::kEmptyString) {
        game_uuid_->clear();
      }
    }
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    gamescore_ = 0;
    headicon_ = 0;
    isallowgive_ = false;
    state_ = 0;
    if (has_friendnickname()) {
      if (friendnickname_ != &::google::protobuf::internal::kEmptyString) {
        friendnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendListResponse_PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string game_UUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendName;
        break;
      }

      // required string friendName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameScore;
        break;
      }

      // required int32 gameScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamescore_)));
          set_has_gamescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headIcon;
        break;
      }

      // required int32 headIcon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isAllowGive;
        break;
      }

      // required bool isAllowGive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAllowGive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isallowgive_)));
          set_has_isallowgive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // required .message.FriendListResponse.PlayerInfo.State state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::FriendListResponse_PlayerInfo_State_IsValid(value)) {
            set_state(static_cast< ::message::FriendListResponse_PlayerInfo_State >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_friendNickName;
        break;
      }

      // required string friendNickName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendnickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendListResponse_PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string game_UUID = 1;
  if (has_game_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->game_uuid(), output);
  }

  // required string friendName = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friendname(), output);
  }

  // required int32 gameScore = 3;
  if (has_gamescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamescore(), output);
  }

  // required int32 headIcon = 4;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headicon(), output);
  }

  // required bool isAllowGive = 5;
  if (has_isallowgive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isallowgive(), output);
  }

  // required .message.FriendListResponse.PlayerInfo.State state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // required string friendNickName = 7;
  if (has_friendnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->friendnickname(), output);
  }

}

int FriendListResponse_PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string game_UUID = 1;
    if (has_game_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_uuid());
    }

    // required string friendName = 2;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // required int32 gameScore = 3;
    if (has_gamescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamescore());
    }

    // required int32 headIcon = 4;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }

    // required bool isAllowGive = 5;
    if (has_isallowgive()) {
      total_size += 1 + 1;
    }

    // required .message.FriendListResponse.PlayerInfo.State state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required string friendNickName = 7;
    if (has_friendnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendnickname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListResponse_PlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendListResponse_PlayerInfo*>(&from));
}

void FriendListResponse_PlayerInfo::MergeFrom(const FriendListResponse_PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_uuid()) {
      set_game_uuid(from.game_uuid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_gamescore()) {
      set_gamescore(from.gamescore());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
    if (from.has_isallowgive()) {
      set_isallowgive(from.isallowgive());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_friendnickname()) {
      set_friendnickname(from.friendnickname());
    }
  }
}

void FriendListResponse_PlayerInfo::CopyFrom(const FriendListResponse_PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListResponse_PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void FriendListResponse_PlayerInfo::Swap(FriendListResponse_PlayerInfo* other) {
  if (other != this) {
    std::swap(game_uuid_, other->game_uuid_);
    std::swap(friendname_, other->friendname_);
    std::swap(gamescore_, other->gamescore_);
    std::swap(headicon_, other->headicon_);
    std::swap(isallowgive_, other->isallowgive_);
    std::swap(state_, other->state_);
    std::swap(friendnickname_, other->friendnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendListResponse_PlayerInfo::GetTypeName() const {
  return "message.FriendListResponse.PlayerInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FriendListResponse::kFriendListFieldNumber;
#endif  // !_MSC_VER

FriendListResponse::FriendListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendListResponse::InitAsDefaultInstance() {
}

FriendListResponse::FriendListResponse(const FriendListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendListResponse::~FriendListResponse() {
  SharedDtor();
}

void FriendListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendListResponse& FriendListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendList_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendList_2eproto();
#endif
  return *default_instance_;
}

FriendListResponse* FriendListResponse::default_instance_ = NULL;

FriendListResponse* FriendListResponse::New() const {
  return new FriendListResponse;
}

void FriendListResponse::Clear() {
  friendlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.FriendListResponse.PlayerInfo friendList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friendList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.FriendListResponse.PlayerInfo friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friendlist(i), output);
  }

}

int FriendListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .message.FriendListResponse.PlayerInfo friendList = 1;
  total_size += 1 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendListResponse*>(&from));
}

void FriendListResponse::MergeFrom(const FriendListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
}

void FriendListResponse::CopyFrom(const FriendListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListResponse::IsInitialized() const {

  for (int i = 0; i < friendlist_size(); i++) {
    if (!this->friendlist(i).IsInitialized()) return false;
  }
  return true;
}

void FriendListResponse::Swap(FriendListResponse* other) {
  if (other != this) {
    friendlist_.Swap(&other->friendlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendListResponse::GetTypeName() const {
  return "message.FriendListResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
