// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfo.proto

#ifndef PROTOBUF_UserInfo_2eproto__INCLUDED
#define PROTOBUF_UserInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "PropInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UserInfo_2eproto();
void protobuf_AssignDesc_UserInfo_2eproto();
void protobuf_ShutdownFile_UserInfo_2eproto();

class UserBasicInfo;
class UserBasicInfo_EffectData;
class UserBasicInfo_UnlockFigure;

// ===================================================================

class UserBasicInfo_EffectData : public ::google::protobuf::MessageLite {
 public:
  UserBasicInfo_EffectData();
  virtual ~UserBasicInfo_EffectData();

  UserBasicInfo_EffectData(const UserBasicInfo_EffectData& from);

  inline UserBasicInfo_EffectData& operator=(const UserBasicInfo_EffectData& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserBasicInfo_EffectData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserBasicInfo_EffectData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserBasicInfo_EffectData* other);

  // implements Message ----------------------------------------------

  UserBasicInfo_EffectData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserBasicInfo_EffectData& from);
  void MergeFrom(const UserBasicInfo_EffectData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool refrash = 1;
  inline bool has_refrash() const;
  inline void clear_refrash();
  static const int kRefrashFieldNumber = 1;
  inline bool refrash() const;
  inline void set_refrash(bool value);

  // required string targetUid = 2;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetUidFieldNumber = 2;
  inline const ::std::string& targetuid() const;
  inline void set_targetuid(const ::std::string& value);
  inline void set_targetuid(const char* value);
  inline void set_targetuid(const char* value, size_t size);
  inline ::std::string* mutable_targetuid();
  inline ::std::string* release_targetuid();
  inline void set_allocated_targetuid(::std::string* targetuid);

  // optional string attacker = 3;
  inline bool has_attacker() const;
  inline void clear_attacker();
  static const int kAttackerFieldNumber = 3;
  inline const ::std::string& attacker() const;
  inline void set_attacker(const ::std::string& value);
  inline void set_attacker(const char* value);
  inline void set_attacker(const char* value, size_t size);
  inline ::std::string* mutable_attacker();
  inline ::std::string* release_attacker();
  inline void set_allocated_attacker(::std::string* attacker);

  // required uint32 propid = 4;
  inline bool has_propid() const;
  inline void clear_propid();
  static const int kPropidFieldNumber = 4;
  inline ::google::protobuf::uint32 propid() const;
  inline void set_propid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.UserBasicInfo.EffectData)
 private:
  inline void set_has_refrash();
  inline void clear_has_refrash();
  inline void set_has_targetuid();
  inline void clear_has_targetuid();
  inline void set_has_attacker();
  inline void clear_has_attacker();
  inline void set_has_propid();
  inline void clear_has_propid();

  ::std::string* targetuid_;
  bool refrash_;
  ::google::protobuf::uint32 propid_;
  ::std::string* attacker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_UserInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_UserInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_UserInfo_2eproto();
  friend void protobuf_ShutdownFile_UserInfo_2eproto();

  void InitAsDefaultInstance();
  static UserBasicInfo_EffectData* default_instance_;
};
// -------------------------------------------------------------------

class UserBasicInfo_UnlockFigure : public ::google::protobuf::MessageLite {
 public:
  UserBasicInfo_UnlockFigure();
  virtual ~UserBasicInfo_UnlockFigure();

  UserBasicInfo_UnlockFigure(const UserBasicInfo_UnlockFigure& from);

  inline UserBasicInfo_UnlockFigure& operator=(const UserBasicInfo_UnlockFigure& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserBasicInfo_UnlockFigure& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserBasicInfo_UnlockFigure* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserBasicInfo_UnlockFigure* other);

  // implements Message ----------------------------------------------

  UserBasicInfo_UnlockFigure* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserBasicInfo_UnlockFigure& from);
  void MergeFrom(const UserBasicInfo_UnlockFigure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.UserBasicInfo.UnlockFigure)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_UserInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_UserInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_UserInfo_2eproto();
  friend void protobuf_ShutdownFile_UserInfo_2eproto();

  void InitAsDefaultInstance();
  static UserBasicInfo_UnlockFigure* default_instance_;
};
// -------------------------------------------------------------------

class UserBasicInfo : public ::google::protobuf::MessageLite {
 public:
  UserBasicInfo();
  virtual ~UserBasicInfo();

  UserBasicInfo(const UserBasicInfo& from);

  inline UserBasicInfo& operator=(const UserBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserBasicInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserBasicInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserBasicInfo* other);

  // implements Message ----------------------------------------------

  UserBasicInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserBasicInfo& from);
  void MergeFrom(const UserBasicInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef UserBasicInfo_EffectData EffectData;
  typedef UserBasicInfo_UnlockFigure UnlockFigure;

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3 [default = 1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 style = 4;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 4;
  inline ::google::protobuf::uint32 style() const;
  inline void set_style(::google::protobuf::uint32 value);

  // optional uint32 winCount = 5;
  inline bool has_wincount() const;
  inline void clear_wincount();
  static const int kWinCountFieldNumber = 5;
  inline ::google::protobuf::uint32 wincount() const;
  inline void set_wincount(::google::protobuf::uint32 value);

  // optional uint32 loseCount = 6;
  inline bool has_losecount() const;
  inline void clear_losecount();
  static const int kLoseCountFieldNumber = 6;
  inline ::google::protobuf::uint32 losecount() const;
  inline void set_losecount(::google::protobuf::uint32 value);

  // optional float winRate = 7;
  inline bool has_winrate() const;
  inline void clear_winrate();
  static const int kWinRateFieldNumber = 7;
  inline float winrate() const;
  inline void set_winrate(float value);

  // optional .message.UserBasicInfo.EffectData effect = 8;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 8;
  inline const ::message::UserBasicInfo_EffectData& effect() const;
  inline ::message::UserBasicInfo_EffectData* mutable_effect();
  inline ::message::UserBasicInfo_EffectData* release_effect();
  inline void set_allocated_effect(::message::UserBasicInfo_EffectData* effect);

  // optional uint32 iconId = 9 [default = 6000];
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconIdFieldNumber = 9;
  inline ::google::protobuf::uint32 iconid() const;
  inline void set_iconid(::google::protobuf::uint32 value);

  // optional uint32 successionWinCount = 10;
  inline bool has_successionwincount() const;
  inline void clear_successionwincount();
  static const int kSuccessionWinCountFieldNumber = 10;
  inline ::google::protobuf::uint32 successionwincount() const;
  inline void set_successionwincount(::google::protobuf::uint32 value);

  // optional uint32 onceLong = 11;
  inline bool has_oncelong() const;
  inline void clear_oncelong();
  static const int kOnceLongFieldNumber = 11;
  inline ::google::protobuf::uint32 oncelong() const;
  inline void set_oncelong(::google::protobuf::uint32 value);

  // optional uint64 maximum = 12;
  inline bool has_maximum() const;
  inline void clear_maximum();
  static const int kMaximumFieldNumber = 12;
  inline ::google::protobuf::uint64 maximum() const;
  inline void set_maximum(::google::protobuf::uint64 value);

  // optional uint64 totalTime = 13;
  inline bool has_totaltime() const;
  inline void clear_totaltime();
  static const int kTotalTimeFieldNumber = 13;
  inline ::google::protobuf::uint64 totaltime() const;
  inline void set_totaltime(::google::protobuf::uint64 value);

  // optional uint32 roundsPlayed = 14;
  inline bool has_roundsplayed() const;
  inline void clear_roundsplayed();
  static const int kRoundsPlayedFieldNumber = 14;
  inline ::google::protobuf::uint32 roundsplayed() const;
  inline void set_roundsplayed(::google::protobuf::uint32 value);

  // optional uint32 throwStones = 15;
  inline bool has_throwstones() const;
  inline void clear_throwstones();
  static const int kThrowStonesFieldNumber = 15;
  inline ::google::protobuf::uint32 throwstones() const;
  inline void set_throwstones(::google::protobuf::uint32 value);

  // optional uint32 thrownStones = 16;
  inline bool has_thrownstones() const;
  inline void clear_thrownstones();
  static const int kThrownStonesFieldNumber = 16;
  inline ::google::protobuf::uint32 thrownstones() const;
  inline void set_thrownstones(::google::protobuf::uint32 value);

  // optional uint32 colorCats = 17;
  inline bool has_colorcats() const;
  inline void clear_colorcats();
  static const int kColorCatsFieldNumber = 17;
  inline ::google::protobuf::uint32 colorcats() const;
  inline void set_colorcats(::google::protobuf::uint32 value);

  // optional uint32 consumeGolds = 18;
  inline bool has_consumegolds() const;
  inline void clear_consumegolds();
  static const int kConsumeGoldsFieldNumber = 18;
  inline ::google::protobuf::uint32 consumegolds() const;
  inline void set_consumegolds(::google::protobuf::uint32 value);

  // optional uint32 consumeItems1 = 19;
  inline bool has_consumeitems1() const;
  inline void clear_consumeitems1();
  static const int kConsumeItems1FieldNumber = 19;
  inline ::google::protobuf::uint32 consumeitems1() const;
  inline void set_consumeitems1(::google::protobuf::uint32 value);

  // optional uint32 consumeItems2 = 20;
  inline bool has_consumeitems2() const;
  inline void clear_consumeitems2();
  static const int kConsumeItems2FieldNumber = 20;
  inline ::google::protobuf::uint32 consumeitems2() const;
  inline void set_consumeitems2(::google::protobuf::uint32 value);

  // optional uint32 consumeItems3 = 21;
  inline bool has_consumeitems3() const;
  inline void clear_consumeitems3();
  static const int kConsumeItems3FieldNumber = 21;
  inline ::google::protobuf::uint32 consumeitems3() const;
  inline void set_consumeitems3(::google::protobuf::uint32 value);

  // optional uint32 consumeItems4 = 22;
  inline bool has_consumeitems4() const;
  inline void clear_consumeitems4();
  static const int kConsumeItems4FieldNumber = 22;
  inline ::google::protobuf::uint32 consumeitems4() const;
  inline void set_consumeitems4(::google::protobuf::uint32 value);

  // optional uint32 golds = 23;
  inline bool has_golds() const;
  inline void clear_golds();
  static const int kGoldsFieldNumber = 23;
  inline ::google::protobuf::uint32 golds() const;
  inline void set_golds(::google::protobuf::uint32 value);

  // optional uint32 experience = 24;
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 24;
  inline ::google::protobuf::uint32 experience() const;
  inline void set_experience(::google::protobuf::uint32 value);

  // optional uint32 maxExperience = 25 [default = 1];
  inline bool has_maxexperience() const;
  inline void clear_maxexperience();
  static const int kMaxExperienceFieldNumber = 25;
  inline ::google::protobuf::uint32 maxexperience() const;
  inline void set_maxexperience(::google::protobuf::uint32 value);

  // repeated uint32 buyEquipFrame = 26;
  inline int buyequipframe_size() const;
  inline void clear_buyequipframe();
  static const int kBuyEquipFrameFieldNumber = 26;
  inline ::google::protobuf::uint32 buyequipframe(int index) const;
  inline void set_buyequipframe(int index, ::google::protobuf::uint32 value);
  inline void add_buyequipframe(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buyequipframe() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buyequipframe();

  // optional uint32 gameScore = 27;
  inline bool has_gamescore() const;
  inline void clear_gamescore();
  static const int kGameScoreFieldNumber = 27;
  inline ::google::protobuf::uint32 gamescore() const;
  inline void set_gamescore(::google::protobuf::uint32 value);

  // optional uint32 figureId = 28 [default = 7000];
  inline bool has_figureid() const;
  inline void clear_figureid();
  static const int kFigureIdFieldNumber = 28;
  inline ::google::protobuf::uint32 figureid() const;
  inline void set_figureid(::google::protobuf::uint32 value);

  // optional uint32 figureLevel = 29 [default = 1];
  inline bool has_figurelevel() const;
  inline void clear_figurelevel();
  static const int kFigureLevelFieldNumber = 29;
  inline ::google::protobuf::uint32 figurelevel() const;
  inline void set_figurelevel(::google::protobuf::uint32 value);

  // repeated .message.UserBasicInfo.UnlockFigure figures = 30;
  inline int figures_size() const;
  inline void clear_figures();
  static const int kFiguresFieldNumber = 30;
  inline const ::message::UserBasicInfo_UnlockFigure& figures(int index) const;
  inline ::message::UserBasicInfo_UnlockFigure* mutable_figures(int index);
  inline ::message::UserBasicInfo_UnlockFigure* add_figures();
  inline const ::google::protobuf::RepeatedPtrField< ::message::UserBasicInfo_UnlockFigure >&
      figures() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::UserBasicInfo_UnlockFigure >*
      mutable_figures();

  // @@protoc_insertion_point(class_scope:message.UserBasicInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_style();
  inline void clear_has_style();
  inline void set_has_wincount();
  inline void clear_has_wincount();
  inline void set_has_losecount();
  inline void clear_has_losecount();
  inline void set_has_winrate();
  inline void clear_has_winrate();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_iconid();
  inline void clear_has_iconid();
  inline void set_has_successionwincount();
  inline void clear_has_successionwincount();
  inline void set_has_oncelong();
  inline void clear_has_oncelong();
  inline void set_has_maximum();
  inline void clear_has_maximum();
  inline void set_has_totaltime();
  inline void clear_has_totaltime();
  inline void set_has_roundsplayed();
  inline void clear_has_roundsplayed();
  inline void set_has_throwstones();
  inline void clear_has_throwstones();
  inline void set_has_thrownstones();
  inline void clear_has_thrownstones();
  inline void set_has_colorcats();
  inline void clear_has_colorcats();
  inline void set_has_consumegolds();
  inline void clear_has_consumegolds();
  inline void set_has_consumeitems1();
  inline void clear_has_consumeitems1();
  inline void set_has_consumeitems2();
  inline void clear_has_consumeitems2();
  inline void set_has_consumeitems3();
  inline void clear_has_consumeitems3();
  inline void set_has_consumeitems4();
  inline void clear_has_consumeitems4();
  inline void set_has_golds();
  inline void clear_has_golds();
  inline void set_has_experience();
  inline void clear_has_experience();
  inline void set_has_maxexperience();
  inline void clear_has_maxexperience();
  inline void set_has_gamescore();
  inline void clear_has_gamescore();
  inline void set_has_figureid();
  inline void clear_has_figureid();
  inline void set_has_figurelevel();
  inline void clear_has_figurelevel();

  ::std::string* uid_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 style_;
  ::google::protobuf::uint32 wincount_;
  ::google::protobuf::uint32 losecount_;
  float winrate_;
  ::google::protobuf::uint32 iconid_;
  ::message::UserBasicInfo_EffectData* effect_;
  ::google::protobuf::uint32 successionwincount_;
  ::google::protobuf::uint32 oncelong_;
  ::google::protobuf::uint64 maximum_;
  ::google::protobuf::uint64 totaltime_;
  ::google::protobuf::uint32 roundsplayed_;
  ::google::protobuf::uint32 throwstones_;
  ::google::protobuf::uint32 thrownstones_;
  ::google::protobuf::uint32 colorcats_;
  ::google::protobuf::uint32 consumegolds_;
  ::google::protobuf::uint32 consumeitems1_;
  ::google::protobuf::uint32 consumeitems2_;
  ::google::protobuf::uint32 consumeitems3_;
  ::google::protobuf::uint32 consumeitems4_;
  ::google::protobuf::uint32 golds_;
  ::google::protobuf::uint32 experience_;
  ::google::protobuf::uint32 maxexperience_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buyequipframe_;
  ::google::protobuf::uint32 gamescore_;
  ::google::protobuf::uint32 figureid_;
  ::google::protobuf::RepeatedPtrField< ::message::UserBasicInfo_UnlockFigure > figures_;
  ::google::protobuf::uint32 figurelevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_UserInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_UserInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_UserInfo_2eproto();
  friend void protobuf_ShutdownFile_UserInfo_2eproto();

  void InitAsDefaultInstance();
  static UserBasicInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// UserBasicInfo_EffectData

// optional bool refrash = 1;
inline bool UserBasicInfo_EffectData::has_refrash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBasicInfo_EffectData::set_has_refrash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBasicInfo_EffectData::clear_has_refrash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBasicInfo_EffectData::clear_refrash() {
  refrash_ = false;
  clear_has_refrash();
}
inline bool UserBasicInfo_EffectData::refrash() const {
  return refrash_;
}
inline void UserBasicInfo_EffectData::set_refrash(bool value) {
  set_has_refrash();
  refrash_ = value;
}

// required string targetUid = 2;
inline bool UserBasicInfo_EffectData::has_targetuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBasicInfo_EffectData::set_has_targetuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBasicInfo_EffectData::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBasicInfo_EffectData::clear_targetuid() {
  if (targetuid_ != &::google::protobuf::internal::kEmptyString) {
    targetuid_->clear();
  }
  clear_has_targetuid();
}
inline const ::std::string& UserBasicInfo_EffectData::targetuid() const {
  return *targetuid_;
}
inline void UserBasicInfo_EffectData::set_targetuid(const ::std::string& value) {
  set_has_targetuid();
  if (targetuid_ == &::google::protobuf::internal::kEmptyString) {
    targetuid_ = new ::std::string;
  }
  targetuid_->assign(value);
}
inline void UserBasicInfo_EffectData::set_targetuid(const char* value) {
  set_has_targetuid();
  if (targetuid_ == &::google::protobuf::internal::kEmptyString) {
    targetuid_ = new ::std::string;
  }
  targetuid_->assign(value);
}
inline void UserBasicInfo_EffectData::set_targetuid(const char* value, size_t size) {
  set_has_targetuid();
  if (targetuid_ == &::google::protobuf::internal::kEmptyString) {
    targetuid_ = new ::std::string;
  }
  targetuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBasicInfo_EffectData::mutable_targetuid() {
  set_has_targetuid();
  if (targetuid_ == &::google::protobuf::internal::kEmptyString) {
    targetuid_ = new ::std::string;
  }
  return targetuid_;
}
inline ::std::string* UserBasicInfo_EffectData::release_targetuid() {
  clear_has_targetuid();
  if (targetuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetuid_;
    targetuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBasicInfo_EffectData::set_allocated_targetuid(::std::string* targetuid) {
  if (targetuid_ != &::google::protobuf::internal::kEmptyString) {
    delete targetuid_;
  }
  if (targetuid) {
    set_has_targetuid();
    targetuid_ = targetuid;
  } else {
    clear_has_targetuid();
    targetuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string attacker = 3;
inline bool UserBasicInfo_EffectData::has_attacker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBasicInfo_EffectData::set_has_attacker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBasicInfo_EffectData::clear_has_attacker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBasicInfo_EffectData::clear_attacker() {
  if (attacker_ != &::google::protobuf::internal::kEmptyString) {
    attacker_->clear();
  }
  clear_has_attacker();
}
inline const ::std::string& UserBasicInfo_EffectData::attacker() const {
  return *attacker_;
}
inline void UserBasicInfo_EffectData::set_attacker(const ::std::string& value) {
  set_has_attacker();
  if (attacker_ == &::google::protobuf::internal::kEmptyString) {
    attacker_ = new ::std::string;
  }
  attacker_->assign(value);
}
inline void UserBasicInfo_EffectData::set_attacker(const char* value) {
  set_has_attacker();
  if (attacker_ == &::google::protobuf::internal::kEmptyString) {
    attacker_ = new ::std::string;
  }
  attacker_->assign(value);
}
inline void UserBasicInfo_EffectData::set_attacker(const char* value, size_t size) {
  set_has_attacker();
  if (attacker_ == &::google::protobuf::internal::kEmptyString) {
    attacker_ = new ::std::string;
  }
  attacker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBasicInfo_EffectData::mutable_attacker() {
  set_has_attacker();
  if (attacker_ == &::google::protobuf::internal::kEmptyString) {
    attacker_ = new ::std::string;
  }
  return attacker_;
}
inline ::std::string* UserBasicInfo_EffectData::release_attacker() {
  clear_has_attacker();
  if (attacker_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attacker_;
    attacker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBasicInfo_EffectData::set_allocated_attacker(::std::string* attacker) {
  if (attacker_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_;
  }
  if (attacker) {
    set_has_attacker();
    attacker_ = attacker;
  } else {
    clear_has_attacker();
    attacker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 propid = 4;
inline bool UserBasicInfo_EffectData::has_propid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserBasicInfo_EffectData::set_has_propid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserBasicInfo_EffectData::clear_has_propid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserBasicInfo_EffectData::clear_propid() {
  propid_ = 0u;
  clear_has_propid();
}
inline ::google::protobuf::uint32 UserBasicInfo_EffectData::propid() const {
  return propid_;
}
inline void UserBasicInfo_EffectData::set_propid(::google::protobuf::uint32 value) {
  set_has_propid();
  propid_ = value;
}

// -------------------------------------------------------------------

// UserBasicInfo_UnlockFigure

// required uint32 id = 1;
inline bool UserBasicInfo_UnlockFigure::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBasicInfo_UnlockFigure::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBasicInfo_UnlockFigure::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBasicInfo_UnlockFigure::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UserBasicInfo_UnlockFigure::id() const {
  return id_;
}
inline void UserBasicInfo_UnlockFigure::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 level = 2;
inline bool UserBasicInfo_UnlockFigure::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBasicInfo_UnlockFigure::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBasicInfo_UnlockFigure::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBasicInfo_UnlockFigure::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 UserBasicInfo_UnlockFigure::level() const {
  return level_;
}
inline void UserBasicInfo_UnlockFigure::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// UserBasicInfo

// optional string uid = 1;
inline bool UserBasicInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBasicInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBasicInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBasicInfo::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& UserBasicInfo::uid() const {
  return *uid_;
}
inline void UserBasicInfo::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void UserBasicInfo::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void UserBasicInfo::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBasicInfo::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* UserBasicInfo::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBasicInfo::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool UserBasicInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBasicInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBasicInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBasicInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserBasicInfo::name() const {
  return *name_;
}
inline void UserBasicInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserBasicInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserBasicInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBasicInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UserBasicInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBasicInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3 [default = 1];
inline bool UserBasicInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBasicInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBasicInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBasicInfo::clear_level() {
  level_ = 1u;
  clear_has_level();
}
inline ::google::protobuf::uint32 UserBasicInfo::level() const {
  return level_;
}
inline void UserBasicInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 style = 4;
inline bool UserBasicInfo::has_style() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserBasicInfo::set_has_style() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserBasicInfo::clear_has_style() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserBasicInfo::clear_style() {
  style_ = 0u;
  clear_has_style();
}
inline ::google::protobuf::uint32 UserBasicInfo::style() const {
  return style_;
}
inline void UserBasicInfo::set_style(::google::protobuf::uint32 value) {
  set_has_style();
  style_ = value;
}

// optional uint32 winCount = 5;
inline bool UserBasicInfo::has_wincount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserBasicInfo::set_has_wincount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserBasicInfo::clear_has_wincount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserBasicInfo::clear_wincount() {
  wincount_ = 0u;
  clear_has_wincount();
}
inline ::google::protobuf::uint32 UserBasicInfo::wincount() const {
  return wincount_;
}
inline void UserBasicInfo::set_wincount(::google::protobuf::uint32 value) {
  set_has_wincount();
  wincount_ = value;
}

// optional uint32 loseCount = 6;
inline bool UserBasicInfo::has_losecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserBasicInfo::set_has_losecount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserBasicInfo::clear_has_losecount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserBasicInfo::clear_losecount() {
  losecount_ = 0u;
  clear_has_losecount();
}
inline ::google::protobuf::uint32 UserBasicInfo::losecount() const {
  return losecount_;
}
inline void UserBasicInfo::set_losecount(::google::protobuf::uint32 value) {
  set_has_losecount();
  losecount_ = value;
}

// optional float winRate = 7;
inline bool UserBasicInfo::has_winrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserBasicInfo::set_has_winrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserBasicInfo::clear_has_winrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserBasicInfo::clear_winrate() {
  winrate_ = 0;
  clear_has_winrate();
}
inline float UserBasicInfo::winrate() const {
  return winrate_;
}
inline void UserBasicInfo::set_winrate(float value) {
  set_has_winrate();
  winrate_ = value;
}

// optional .message.UserBasicInfo.EffectData effect = 8;
inline bool UserBasicInfo::has_effect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserBasicInfo::set_has_effect() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserBasicInfo::clear_has_effect() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserBasicInfo::clear_effect() {
  if (effect_ != NULL) effect_->::message::UserBasicInfo_EffectData::Clear();
  clear_has_effect();
}
inline const ::message::UserBasicInfo_EffectData& UserBasicInfo::effect() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return effect_ != NULL ? *effect_ : *default_instance().effect_;
#else
  return effect_ != NULL ? *effect_ : *default_instance_->effect_;
#endif
}
inline ::message::UserBasicInfo_EffectData* UserBasicInfo::mutable_effect() {
  set_has_effect();
  if (effect_ == NULL) effect_ = new ::message::UserBasicInfo_EffectData;
  return effect_;
}
inline ::message::UserBasicInfo_EffectData* UserBasicInfo::release_effect() {
  clear_has_effect();
  ::message::UserBasicInfo_EffectData* temp = effect_;
  effect_ = NULL;
  return temp;
}
inline void UserBasicInfo::set_allocated_effect(::message::UserBasicInfo_EffectData* effect) {
  delete effect_;
  effect_ = effect;
  if (effect) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
}

// optional uint32 iconId = 9 [default = 6000];
inline bool UserBasicInfo::has_iconid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserBasicInfo::set_has_iconid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserBasicInfo::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserBasicInfo::clear_iconid() {
  iconid_ = 6000u;
  clear_has_iconid();
}
inline ::google::protobuf::uint32 UserBasicInfo::iconid() const {
  return iconid_;
}
inline void UserBasicInfo::set_iconid(::google::protobuf::uint32 value) {
  set_has_iconid();
  iconid_ = value;
}

// optional uint32 successionWinCount = 10;
inline bool UserBasicInfo::has_successionwincount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserBasicInfo::set_has_successionwincount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserBasicInfo::clear_has_successionwincount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserBasicInfo::clear_successionwincount() {
  successionwincount_ = 0u;
  clear_has_successionwincount();
}
inline ::google::protobuf::uint32 UserBasicInfo::successionwincount() const {
  return successionwincount_;
}
inline void UserBasicInfo::set_successionwincount(::google::protobuf::uint32 value) {
  set_has_successionwincount();
  successionwincount_ = value;
}

// optional uint32 onceLong = 11;
inline bool UserBasicInfo::has_oncelong() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserBasicInfo::set_has_oncelong() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserBasicInfo::clear_has_oncelong() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserBasicInfo::clear_oncelong() {
  oncelong_ = 0u;
  clear_has_oncelong();
}
inline ::google::protobuf::uint32 UserBasicInfo::oncelong() const {
  return oncelong_;
}
inline void UserBasicInfo::set_oncelong(::google::protobuf::uint32 value) {
  set_has_oncelong();
  oncelong_ = value;
}

// optional uint64 maximum = 12;
inline bool UserBasicInfo::has_maximum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserBasicInfo::set_has_maximum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserBasicInfo::clear_has_maximum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserBasicInfo::clear_maximum() {
  maximum_ = GOOGLE_ULONGLONG(0);
  clear_has_maximum();
}
inline ::google::protobuf::uint64 UserBasicInfo::maximum() const {
  return maximum_;
}
inline void UserBasicInfo::set_maximum(::google::protobuf::uint64 value) {
  set_has_maximum();
  maximum_ = value;
}

// optional uint64 totalTime = 13;
inline bool UserBasicInfo::has_totaltime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserBasicInfo::set_has_totaltime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserBasicInfo::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserBasicInfo::clear_totaltime() {
  totaltime_ = GOOGLE_ULONGLONG(0);
  clear_has_totaltime();
}
inline ::google::protobuf::uint64 UserBasicInfo::totaltime() const {
  return totaltime_;
}
inline void UserBasicInfo::set_totaltime(::google::protobuf::uint64 value) {
  set_has_totaltime();
  totaltime_ = value;
}

// optional uint32 roundsPlayed = 14;
inline bool UserBasicInfo::has_roundsplayed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserBasicInfo::set_has_roundsplayed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserBasicInfo::clear_has_roundsplayed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserBasicInfo::clear_roundsplayed() {
  roundsplayed_ = 0u;
  clear_has_roundsplayed();
}
inline ::google::protobuf::uint32 UserBasicInfo::roundsplayed() const {
  return roundsplayed_;
}
inline void UserBasicInfo::set_roundsplayed(::google::protobuf::uint32 value) {
  set_has_roundsplayed();
  roundsplayed_ = value;
}

// optional uint32 throwStones = 15;
inline bool UserBasicInfo::has_throwstones() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserBasicInfo::set_has_throwstones() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserBasicInfo::clear_has_throwstones() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserBasicInfo::clear_throwstones() {
  throwstones_ = 0u;
  clear_has_throwstones();
}
inline ::google::protobuf::uint32 UserBasicInfo::throwstones() const {
  return throwstones_;
}
inline void UserBasicInfo::set_throwstones(::google::protobuf::uint32 value) {
  set_has_throwstones();
  throwstones_ = value;
}

// optional uint32 thrownStones = 16;
inline bool UserBasicInfo::has_thrownstones() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserBasicInfo::set_has_thrownstones() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserBasicInfo::clear_has_thrownstones() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserBasicInfo::clear_thrownstones() {
  thrownstones_ = 0u;
  clear_has_thrownstones();
}
inline ::google::protobuf::uint32 UserBasicInfo::thrownstones() const {
  return thrownstones_;
}
inline void UserBasicInfo::set_thrownstones(::google::protobuf::uint32 value) {
  set_has_thrownstones();
  thrownstones_ = value;
}

// optional uint32 colorCats = 17;
inline bool UserBasicInfo::has_colorcats() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserBasicInfo::set_has_colorcats() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserBasicInfo::clear_has_colorcats() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserBasicInfo::clear_colorcats() {
  colorcats_ = 0u;
  clear_has_colorcats();
}
inline ::google::protobuf::uint32 UserBasicInfo::colorcats() const {
  return colorcats_;
}
inline void UserBasicInfo::set_colorcats(::google::protobuf::uint32 value) {
  set_has_colorcats();
  colorcats_ = value;
}

// optional uint32 consumeGolds = 18;
inline bool UserBasicInfo::has_consumegolds() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserBasicInfo::set_has_consumegolds() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserBasicInfo::clear_has_consumegolds() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserBasicInfo::clear_consumegolds() {
  consumegolds_ = 0u;
  clear_has_consumegolds();
}
inline ::google::protobuf::uint32 UserBasicInfo::consumegolds() const {
  return consumegolds_;
}
inline void UserBasicInfo::set_consumegolds(::google::protobuf::uint32 value) {
  set_has_consumegolds();
  consumegolds_ = value;
}

// optional uint32 consumeItems1 = 19;
inline bool UserBasicInfo::has_consumeitems1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserBasicInfo::set_has_consumeitems1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserBasicInfo::clear_has_consumeitems1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserBasicInfo::clear_consumeitems1() {
  consumeitems1_ = 0u;
  clear_has_consumeitems1();
}
inline ::google::protobuf::uint32 UserBasicInfo::consumeitems1() const {
  return consumeitems1_;
}
inline void UserBasicInfo::set_consumeitems1(::google::protobuf::uint32 value) {
  set_has_consumeitems1();
  consumeitems1_ = value;
}

// optional uint32 consumeItems2 = 20;
inline bool UserBasicInfo::has_consumeitems2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserBasicInfo::set_has_consumeitems2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserBasicInfo::clear_has_consumeitems2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserBasicInfo::clear_consumeitems2() {
  consumeitems2_ = 0u;
  clear_has_consumeitems2();
}
inline ::google::protobuf::uint32 UserBasicInfo::consumeitems2() const {
  return consumeitems2_;
}
inline void UserBasicInfo::set_consumeitems2(::google::protobuf::uint32 value) {
  set_has_consumeitems2();
  consumeitems2_ = value;
}

// optional uint32 consumeItems3 = 21;
inline bool UserBasicInfo::has_consumeitems3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UserBasicInfo::set_has_consumeitems3() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UserBasicInfo::clear_has_consumeitems3() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UserBasicInfo::clear_consumeitems3() {
  consumeitems3_ = 0u;
  clear_has_consumeitems3();
}
inline ::google::protobuf::uint32 UserBasicInfo::consumeitems3() const {
  return consumeitems3_;
}
inline void UserBasicInfo::set_consumeitems3(::google::protobuf::uint32 value) {
  set_has_consumeitems3();
  consumeitems3_ = value;
}

// optional uint32 consumeItems4 = 22;
inline bool UserBasicInfo::has_consumeitems4() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UserBasicInfo::set_has_consumeitems4() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UserBasicInfo::clear_has_consumeitems4() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UserBasicInfo::clear_consumeitems4() {
  consumeitems4_ = 0u;
  clear_has_consumeitems4();
}
inline ::google::protobuf::uint32 UserBasicInfo::consumeitems4() const {
  return consumeitems4_;
}
inline void UserBasicInfo::set_consumeitems4(::google::protobuf::uint32 value) {
  set_has_consumeitems4();
  consumeitems4_ = value;
}

// optional uint32 golds = 23;
inline bool UserBasicInfo::has_golds() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UserBasicInfo::set_has_golds() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UserBasicInfo::clear_has_golds() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UserBasicInfo::clear_golds() {
  golds_ = 0u;
  clear_has_golds();
}
inline ::google::protobuf::uint32 UserBasicInfo::golds() const {
  return golds_;
}
inline void UserBasicInfo::set_golds(::google::protobuf::uint32 value) {
  set_has_golds();
  golds_ = value;
}

// optional uint32 experience = 24;
inline bool UserBasicInfo::has_experience() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UserBasicInfo::set_has_experience() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UserBasicInfo::clear_has_experience() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UserBasicInfo::clear_experience() {
  experience_ = 0u;
  clear_has_experience();
}
inline ::google::protobuf::uint32 UserBasicInfo::experience() const {
  return experience_;
}
inline void UserBasicInfo::set_experience(::google::protobuf::uint32 value) {
  set_has_experience();
  experience_ = value;
}

// optional uint32 maxExperience = 25 [default = 1];
inline bool UserBasicInfo::has_maxexperience() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UserBasicInfo::set_has_maxexperience() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UserBasicInfo::clear_has_maxexperience() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UserBasicInfo::clear_maxexperience() {
  maxexperience_ = 1u;
  clear_has_maxexperience();
}
inline ::google::protobuf::uint32 UserBasicInfo::maxexperience() const {
  return maxexperience_;
}
inline void UserBasicInfo::set_maxexperience(::google::protobuf::uint32 value) {
  set_has_maxexperience();
  maxexperience_ = value;
}

// repeated uint32 buyEquipFrame = 26;
inline int UserBasicInfo::buyequipframe_size() const {
  return buyequipframe_.size();
}
inline void UserBasicInfo::clear_buyequipframe() {
  buyequipframe_.Clear();
}
inline ::google::protobuf::uint32 UserBasicInfo::buyequipframe(int index) const {
  return buyequipframe_.Get(index);
}
inline void UserBasicInfo::set_buyequipframe(int index, ::google::protobuf::uint32 value) {
  buyequipframe_.Set(index, value);
}
inline void UserBasicInfo::add_buyequipframe(::google::protobuf::uint32 value) {
  buyequipframe_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserBasicInfo::buyequipframe() const {
  return buyequipframe_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserBasicInfo::mutable_buyequipframe() {
  return &buyequipframe_;
}

// optional uint32 gameScore = 27;
inline bool UserBasicInfo::has_gamescore() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UserBasicInfo::set_has_gamescore() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UserBasicInfo::clear_has_gamescore() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UserBasicInfo::clear_gamescore() {
  gamescore_ = 0u;
  clear_has_gamescore();
}
inline ::google::protobuf::uint32 UserBasicInfo::gamescore() const {
  return gamescore_;
}
inline void UserBasicInfo::set_gamescore(::google::protobuf::uint32 value) {
  set_has_gamescore();
  gamescore_ = value;
}

// optional uint32 figureId = 28 [default = 7000];
inline bool UserBasicInfo::has_figureid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void UserBasicInfo::set_has_figureid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void UserBasicInfo::clear_has_figureid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void UserBasicInfo::clear_figureid() {
  figureid_ = 7000u;
  clear_has_figureid();
}
inline ::google::protobuf::uint32 UserBasicInfo::figureid() const {
  return figureid_;
}
inline void UserBasicInfo::set_figureid(::google::protobuf::uint32 value) {
  set_has_figureid();
  figureid_ = value;
}

// optional uint32 figureLevel = 29 [default = 1];
inline bool UserBasicInfo::has_figurelevel() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void UserBasicInfo::set_has_figurelevel() {
  _has_bits_[0] |= 0x10000000u;
}
inline void UserBasicInfo::clear_has_figurelevel() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void UserBasicInfo::clear_figurelevel() {
  figurelevel_ = 1u;
  clear_has_figurelevel();
}
inline ::google::protobuf::uint32 UserBasicInfo::figurelevel() const {
  return figurelevel_;
}
inline void UserBasicInfo::set_figurelevel(::google::protobuf::uint32 value) {
  set_has_figurelevel();
  figurelevel_ = value;
}

// repeated .message.UserBasicInfo.UnlockFigure figures = 30;
inline int UserBasicInfo::figures_size() const {
  return figures_.size();
}
inline void UserBasicInfo::clear_figures() {
  figures_.Clear();
}
inline const ::message::UserBasicInfo_UnlockFigure& UserBasicInfo::figures(int index) const {
  return figures_.Get(index);
}
inline ::message::UserBasicInfo_UnlockFigure* UserBasicInfo::mutable_figures(int index) {
  return figures_.Mutable(index);
}
inline ::message::UserBasicInfo_UnlockFigure* UserBasicInfo::add_figures() {
  return figures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::UserBasicInfo_UnlockFigure >&
UserBasicInfo::figures() const {
  return figures_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::UserBasicInfo_UnlockFigure >*
UserBasicInfo::mutable_figures() {
  return &figures_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserInfo_2eproto__INCLUDED
