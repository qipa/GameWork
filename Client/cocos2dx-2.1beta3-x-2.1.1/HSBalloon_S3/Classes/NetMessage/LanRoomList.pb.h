// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LanRoomList.proto

#ifndef PROTOBUF_LanRoomList_2eproto__INCLUDED
#define PROTOBUF_LanRoomList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LanRoomList_2eproto();
void protobuf_AssignDesc_LanRoomList_2eproto();
void protobuf_ShutdownFile_LanRoomList_2eproto();

class LanRoomListData;
class LanRoomListData_Room;

// ===================================================================

class LanRoomListData_Room : public ::google::protobuf::MessageLite {
 public:
  LanRoomListData_Room();
  virtual ~LanRoomListData_Room();

  LanRoomListData_Room(const LanRoomListData_Room& from);

  inline LanRoomListData_Room& operator=(const LanRoomListData_Room& from) {
    CopyFrom(from);
    return *this;
  }

  static const LanRoomListData_Room& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LanRoomListData_Room* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LanRoomListData_Room* other);

  // implements Message ----------------------------------------------

  LanRoomListData_Room* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LanRoomListData_Room& from);
  void MergeFrom(const LanRoomListData_Room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string roomName = 1;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 1;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  inline void set_allocated_roomname(::std::string* roomname);

  // optional int32 maxPlayerCount = 2 [default = 2];
  inline bool has_maxplayercount() const;
  inline void clear_maxplayercount();
  static const int kMaxPlayerCountFieldNumber = 2;
  inline ::google::protobuf::int32 maxplayercount() const;
  inline void set_maxplayercount(::google::protobuf::int32 value);

  // optional int32 currenterPlayerCount = 3;
  inline bool has_currenterplayercount() const;
  inline void clear_currenterplayercount();
  static const int kCurrenterPlayerCountFieldNumber = 3;
  inline ::google::protobuf::int32 currenterplayercount() const;
  inline void set_currenterplayercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.LanRoomListData.Room)
 private:
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_maxplayercount();
  inline void clear_has_maxplayercount();
  inline void set_has_currenterplayercount();
  inline void clear_has_currenterplayercount();

  ::std::string* roomname_;
  ::google::protobuf::int32 maxplayercount_;
  ::google::protobuf::int32 currenterplayercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LanRoomList_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LanRoomList_2eproto();
  #endif
  friend void protobuf_AssignDesc_LanRoomList_2eproto();
  friend void protobuf_ShutdownFile_LanRoomList_2eproto();

  void InitAsDefaultInstance();
  static LanRoomListData_Room* default_instance_;
};
// -------------------------------------------------------------------

class LanRoomListData : public ::google::protobuf::MessageLite {
 public:
  LanRoomListData();
  virtual ~LanRoomListData();

  LanRoomListData(const LanRoomListData& from);

  inline LanRoomListData& operator=(const LanRoomListData& from) {
    CopyFrom(from);
    return *this;
  }

  static const LanRoomListData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LanRoomListData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LanRoomListData* other);

  // implements Message ----------------------------------------------

  LanRoomListData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LanRoomListData& from);
  void MergeFrom(const LanRoomListData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef LanRoomListData_Room Room;

  // accessors -------------------------------------------------------

  // repeated .message.LanRoomListData.Room roomList = 1;
  inline int roomlist_size() const;
  inline void clear_roomlist();
  static const int kRoomListFieldNumber = 1;
  inline const ::message::LanRoomListData_Room& roomlist(int index) const;
  inline ::message::LanRoomListData_Room* mutable_roomlist(int index);
  inline ::message::LanRoomListData_Room* add_roomlist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::LanRoomListData_Room >&
      roomlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::LanRoomListData_Room >*
      mutable_roomlist();

  // @@protoc_insertion_point(class_scope:message.LanRoomListData)
 private:

  ::google::protobuf::RepeatedPtrField< ::message::LanRoomListData_Room > roomlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LanRoomList_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LanRoomList_2eproto();
  #endif
  friend void protobuf_AssignDesc_LanRoomList_2eproto();
  friend void protobuf_ShutdownFile_LanRoomList_2eproto();

  void InitAsDefaultInstance();
  static LanRoomListData* default_instance_;
};
// ===================================================================


// ===================================================================

// LanRoomListData_Room

// required string roomName = 1;
inline bool LanRoomListData_Room::has_roomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanRoomListData_Room::set_has_roomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanRoomListData_Room::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanRoomListData_Room::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& LanRoomListData_Room::roomname() const {
  return *roomname_;
}
inline void LanRoomListData_Room::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void LanRoomListData_Room::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void LanRoomListData_Room::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanRoomListData_Room::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  return roomname_;
}
inline ::std::string* LanRoomListData_Room::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LanRoomListData_Room::set_allocated_roomname(::std::string* roomname) {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (roomname) {
    set_has_roomname();
    roomname_ = roomname;
  } else {
    clear_has_roomname();
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxPlayerCount = 2 [default = 2];
inline bool LanRoomListData_Room::has_maxplayercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanRoomListData_Room::set_has_maxplayercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanRoomListData_Room::clear_has_maxplayercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanRoomListData_Room::clear_maxplayercount() {
  maxplayercount_ = 2;
  clear_has_maxplayercount();
}
inline ::google::protobuf::int32 LanRoomListData_Room::maxplayercount() const {
  return maxplayercount_;
}
inline void LanRoomListData_Room::set_maxplayercount(::google::protobuf::int32 value) {
  set_has_maxplayercount();
  maxplayercount_ = value;
}

// optional int32 currenterPlayerCount = 3;
inline bool LanRoomListData_Room::has_currenterplayercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LanRoomListData_Room::set_has_currenterplayercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LanRoomListData_Room::clear_has_currenterplayercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LanRoomListData_Room::clear_currenterplayercount() {
  currenterplayercount_ = 0;
  clear_has_currenterplayercount();
}
inline ::google::protobuf::int32 LanRoomListData_Room::currenterplayercount() const {
  return currenterplayercount_;
}
inline void LanRoomListData_Room::set_currenterplayercount(::google::protobuf::int32 value) {
  set_has_currenterplayercount();
  currenterplayercount_ = value;
}

// -------------------------------------------------------------------

// LanRoomListData

// repeated .message.LanRoomListData.Room roomList = 1;
inline int LanRoomListData::roomlist_size() const {
  return roomlist_.size();
}
inline void LanRoomListData::clear_roomlist() {
  roomlist_.Clear();
}
inline const ::message::LanRoomListData_Room& LanRoomListData::roomlist(int index) const {
  return roomlist_.Get(index);
}
inline ::message::LanRoomListData_Room* LanRoomListData::mutable_roomlist(int index) {
  return roomlist_.Mutable(index);
}
inline ::message::LanRoomListData_Room* LanRoomListData::add_roomlist() {
  return roomlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::LanRoomListData_Room >&
LanRoomListData::roomlist() const {
  return roomlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::LanRoomListData_Room >*
LanRoomListData::mutable_roomlist() {
  return &roomlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LanRoomList_2eproto__INCLUDED
