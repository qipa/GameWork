// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LanRoomList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LanRoomList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_LanRoomList_2eproto() {
  delete LanRoomListData::default_instance_;
  delete LanRoomListData_Room::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_LanRoomList_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_LanRoomList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LanRoomListData::default_instance_ = new LanRoomListData();
  LanRoomListData_Room::default_instance_ = new LanRoomListData_Room();
  LanRoomListData::default_instance_->InitAsDefaultInstance();
  LanRoomListData_Room::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LanRoomList_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LanRoomList_2eproto_once_);
void protobuf_AddDesc_LanRoomList_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LanRoomList_2eproto_once_,
                 &protobuf_AddDesc_LanRoomList_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LanRoomList_2eproto {
  StaticDescriptorInitializer_LanRoomList_2eproto() {
    protobuf_AddDesc_LanRoomList_2eproto();
  }
} static_descriptor_initializer_LanRoomList_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LanRoomListData_Room::kRoomNameFieldNumber;
const int LanRoomListData_Room::kMaxPlayerCountFieldNumber;
const int LanRoomListData_Room::kCurrenterPlayerCountFieldNumber;
#endif  // !_MSC_VER

LanRoomListData_Room::LanRoomListData_Room()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LanRoomListData_Room::InitAsDefaultInstance() {
}

LanRoomListData_Room::LanRoomListData_Room(const LanRoomListData_Room& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LanRoomListData_Room::SharedCtor() {
  _cached_size_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxplayercount_ = 2;
  currenterplayercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanRoomListData_Room::~LanRoomListData_Room() {
  SharedDtor();
}

void LanRoomListData_Room::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LanRoomListData_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LanRoomListData_Room& LanRoomListData_Room::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LanRoomList_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LanRoomList_2eproto();
#endif
  return *default_instance_;
}

LanRoomListData_Room* LanRoomListData_Room::default_instance_ = NULL;

LanRoomListData_Room* LanRoomListData_Room::New() const {
  return new LanRoomListData_Room;
}

void LanRoomListData_Room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    maxplayercount_ = 2;
    currenterplayercount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LanRoomListData_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxPlayerCount;
        break;
      }

      // optional int32 maxPlayerCount = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayercount_)));
          set_has_maxplayercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currenterPlayerCount;
        break;
      }

      // optional int32 currenterPlayerCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currenterPlayerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenterplayercount_)));
          set_has_currenterplayercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanRoomListData_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomName = 1;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomname(), output);
  }

  // optional int32 maxPlayerCount = 2 [default = 2];
  if (has_maxplayercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxplayercount(), output);
  }

  // optional int32 currenterPlayerCount = 3;
  if (has_currenterplayercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currenterplayercount(), output);
  }

}

int LanRoomListData_Room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomName = 1;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional int32 maxPlayerCount = 2 [default = 2];
    if (has_maxplayercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayercount());
    }

    // optional int32 currenterPlayerCount = 3;
    if (has_currenterplayercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenterplayercount());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanRoomListData_Room::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LanRoomListData_Room*>(&from));
}

void LanRoomListData_Room::MergeFrom(const LanRoomListData_Room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_maxplayercount()) {
      set_maxplayercount(from.maxplayercount());
    }
    if (from.has_currenterplayercount()) {
      set_currenterplayercount(from.currenterplayercount());
    }
  }
}

void LanRoomListData_Room::CopyFrom(const LanRoomListData_Room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanRoomListData_Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LanRoomListData_Room::Swap(LanRoomListData_Room* other) {
  if (other != this) {
    std::swap(roomname_, other->roomname_);
    std::swap(maxplayercount_, other->maxplayercount_);
    std::swap(currenterplayercount_, other->currenterplayercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LanRoomListData_Room::GetTypeName() const {
  return "message.LanRoomListData.Room";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LanRoomListData::kRoomListFieldNumber;
#endif  // !_MSC_VER

LanRoomListData::LanRoomListData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LanRoomListData::InitAsDefaultInstance() {
}

LanRoomListData::LanRoomListData(const LanRoomListData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LanRoomListData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanRoomListData::~LanRoomListData() {
  SharedDtor();
}

void LanRoomListData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LanRoomListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LanRoomListData& LanRoomListData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LanRoomList_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LanRoomList_2eproto();
#endif
  return *default_instance_;
}

LanRoomListData* LanRoomListData::default_instance_ = NULL;

LanRoomListData* LanRoomListData::New() const {
  return new LanRoomListData;
}

void LanRoomListData::Clear() {
  roomlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LanRoomListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.LanRoomListData.Room roomList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roomList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanRoomListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.LanRoomListData.Room roomList = 1;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->roomlist(i), output);
  }

}

int LanRoomListData::ByteSize() const {
  int total_size = 0;

  // repeated .message.LanRoomListData.Room roomList = 1;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanRoomListData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LanRoomListData*>(&from));
}

void LanRoomListData::MergeFrom(const LanRoomListData& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
}

void LanRoomListData::CopyFrom(const LanRoomListData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanRoomListData::IsInitialized() const {

  for (int i = 0; i < roomlist_size(); i++) {
    if (!this->roomlist(i).IsInitialized()) return false;
  }
  return true;
}

void LanRoomListData::Swap(LanRoomListData* other) {
  if (other != this) {
    roomlist_.Swap(&other->roomlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LanRoomListData::GetTypeName() const {
  return "message.LanRoomListData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
