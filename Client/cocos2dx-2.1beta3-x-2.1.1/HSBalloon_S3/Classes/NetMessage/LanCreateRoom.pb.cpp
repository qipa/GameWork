// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LanCreateRoom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LanCreateRoom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_LanCreateRoom_2eproto() {
  delete LanCreateRoomRequest::default_instance_;
  delete LanCreateRoomResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_LanCreateRoom_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_LanCreateRoom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LanCreateRoomRequest::default_instance_ = new LanCreateRoomRequest();
  LanCreateRoomResponse::default_instance_ = new LanCreateRoomResponse();
  LanCreateRoomRequest::default_instance_->InitAsDefaultInstance();
  LanCreateRoomResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LanCreateRoom_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LanCreateRoom_2eproto_once_);
void protobuf_AddDesc_LanCreateRoom_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LanCreateRoom_2eproto_once_,
                 &protobuf_AddDesc_LanCreateRoom_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LanCreateRoom_2eproto {
  StaticDescriptorInitializer_LanCreateRoom_2eproto() {
    protobuf_AddDesc_LanCreateRoom_2eproto();
  }
} static_descriptor_initializer_LanCreateRoom_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LanCreateRoomRequest::kJsonIDFieldNumber;
const int LanCreateRoomRequest::kRoomNameFieldNumber;
#endif  // !_MSC_VER

LanCreateRoomRequest::LanCreateRoomRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LanCreateRoomRequest::InitAsDefaultInstance() {
}

LanCreateRoomRequest::LanCreateRoomRequest(const LanCreateRoomRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LanCreateRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  jsonid_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanCreateRoomRequest::~LanCreateRoomRequest() {
  SharedDtor();
}

void LanCreateRoomRequest::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LanCreateRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LanCreateRoomRequest& LanCreateRoomRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LanCreateRoom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LanCreateRoom_2eproto();
#endif
  return *default_instance_;
}

LanCreateRoomRequest* LanCreateRoomRequest::default_instance_ = NULL;

LanCreateRoomRequest* LanCreateRoomRequest::New() const {
  return new LanCreateRoomRequest;
}

void LanCreateRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jsonid_ = 0;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LanCreateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 jsonID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jsonid_)));
          set_has_jsonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomName;
        break;
      }

      // required string roomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanCreateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 jsonID = 1;
  if (has_jsonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jsonid(), output);
  }

  // required string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomname(), output);
  }

}

int LanCreateRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 jsonID = 1;
    if (has_jsonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jsonid());
    }

    // required string roomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanCreateRoomRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LanCreateRoomRequest*>(&from));
}

void LanCreateRoomRequest::MergeFrom(const LanCreateRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jsonid()) {
      set_jsonid(from.jsonid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
  }
}

void LanCreateRoomRequest::CopyFrom(const LanCreateRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanCreateRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LanCreateRoomRequest::Swap(LanCreateRoomRequest* other) {
  if (other != this) {
    std::swap(jsonid_, other->jsonid_);
    std::swap(roomname_, other->roomname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LanCreateRoomRequest::GetTypeName() const {
  return "message.LanCreateRoomRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LanCreateRoomResponse::kJsonIDFieldNumber;
const int LanCreateRoomResponse::kJNIEGGRESULTFieldNumber;
#endif  // !_MSC_VER

LanCreateRoomResponse::LanCreateRoomResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LanCreateRoomResponse::InitAsDefaultInstance() {
}

LanCreateRoomResponse::LanCreateRoomResponse(const LanCreateRoomResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LanCreateRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  jsonid_ = 0;
  jni_egg_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanCreateRoomResponse::~LanCreateRoomResponse() {
  SharedDtor();
}

void LanCreateRoomResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LanCreateRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LanCreateRoomResponse& LanCreateRoomResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LanCreateRoom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LanCreateRoom_2eproto();
#endif
  return *default_instance_;
}

LanCreateRoomResponse* LanCreateRoomResponse::default_instance_ = NULL;

LanCreateRoomResponse* LanCreateRoomResponse::New() const {
  return new LanCreateRoomResponse;
}

void LanCreateRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jsonid_ = 0;
    jni_egg_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LanCreateRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 jsonID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jsonid_)));
          set_has_jsonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_JNI_EGG_RESULT;
        break;
      }

      // required int32 JNI_EGG_RESULT = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JNI_EGG_RESULT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jni_egg_result_)));
          set_has_jni_egg_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanCreateRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 jsonID = 1;
  if (has_jsonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jsonid(), output);
  }

  // required int32 JNI_EGG_RESULT = 2;
  if (has_jni_egg_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jni_egg_result(), output);
  }

}

int LanCreateRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 jsonID = 1;
    if (has_jsonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jsonid());
    }

    // required int32 JNI_EGG_RESULT = 2;
    if (has_jni_egg_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jni_egg_result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanCreateRoomResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LanCreateRoomResponse*>(&from));
}

void LanCreateRoomResponse::MergeFrom(const LanCreateRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jsonid()) {
      set_jsonid(from.jsonid());
    }
    if (from.has_jni_egg_result()) {
      set_jni_egg_result(from.jni_egg_result());
    }
  }
}

void LanCreateRoomResponse::CopyFrom(const LanCreateRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanCreateRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LanCreateRoomResponse::Swap(LanCreateRoomResponse* other) {
  if (other != this) {
    std::swap(jsonid_, other->jsonid_);
    std::swap(jni_egg_result_, other->jni_egg_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LanCreateRoomResponse::GetTypeName() const {
  return "message.LanCreateRoomResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
