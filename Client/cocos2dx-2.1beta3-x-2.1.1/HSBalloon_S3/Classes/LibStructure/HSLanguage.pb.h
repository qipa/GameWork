// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HSLanguage.proto

#ifndef PROTOBUF_HSLanguage_2eproto__INCLUDED
#define PROTOBUF_HSLanguage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HSLanguage_2eproto();
void protobuf_AssignDesc_HSLanguage_2eproto();
void protobuf_ShutdownFile_HSLanguage_2eproto();

class LanguageData;
class LanguageData_Language;
class LanguageData_Statement;

// ===================================================================

class LanguageData_Language : public ::google::protobuf::MessageLite {
 public:
  LanguageData_Language();
  virtual ~LanguageData_Language();

  LanguageData_Language(const LanguageData_Language& from);

  inline LanguageData_Language& operator=(const LanguageData_Language& from) {
    CopyFrom(from);
    return *this;
  }

  static const LanguageData_Language& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LanguageData_Language* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LanguageData_Language* other);

  // implements Message ----------------------------------------------

  LanguageData_Language* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LanguageData_Language& from);
  void MergeFrom(const LanguageData_Language& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // repeated .message.LanguageData.Statement statement = 2;
  inline int statement_size() const;
  inline void clear_statement();
  static const int kStatementFieldNumber = 2;
  inline const ::message::LanguageData_Statement& statement(int index) const;
  inline ::message::LanguageData_Statement* mutable_statement(int index);
  inline ::message::LanguageData_Statement* add_statement();
  inline const ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Statement >&
      statement() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Statement >*
      mutable_statement();

  // @@protoc_insertion_point(class_scope:message.LanguageData.Language)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::std::string* key_;
  ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Statement > statement_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_HSLanguage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_HSLanguage_2eproto();
  #endif
  friend void protobuf_AssignDesc_HSLanguage_2eproto();
  friend void protobuf_ShutdownFile_HSLanguage_2eproto();

  void InitAsDefaultInstance();
  static LanguageData_Language* default_instance_;
};
// -------------------------------------------------------------------

class LanguageData_Statement : public ::google::protobuf::MessageLite {
 public:
  LanguageData_Statement();
  virtual ~LanguageData_Statement();

  LanguageData_Statement(const LanguageData_Statement& from);

  inline LanguageData_Statement& operator=(const LanguageData_Statement& from) {
    CopyFrom(from);
    return *this;
  }

  static const LanguageData_Statement& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LanguageData_Statement* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LanguageData_Statement* other);

  // implements Message ----------------------------------------------

  LanguageData_Statement* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LanguageData_Statement& from);
  void MergeFrom(const LanguageData_Statement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional string talk = 2;
  inline bool has_talk() const;
  inline void clear_talk();
  static const int kTalkFieldNumber = 2;
  inline const ::std::string& talk() const;
  inline void set_talk(const ::std::string& value);
  inline void set_talk(const char* value);
  inline void set_talk(const char* value, size_t size);
  inline ::std::string* mutable_talk();
  inline ::std::string* release_talk();
  inline void set_allocated_talk(::std::string* talk);

  // @@protoc_insertion_point(class_scope:message.LanguageData.Statement)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_talk();
  inline void clear_has_talk();

  ::std::string* country_;
  ::std::string* talk_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_HSLanguage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_HSLanguage_2eproto();
  #endif
  friend void protobuf_AssignDesc_HSLanguage_2eproto();
  friend void protobuf_ShutdownFile_HSLanguage_2eproto();

  void InitAsDefaultInstance();
  static LanguageData_Statement* default_instance_;
};
// -------------------------------------------------------------------

class LanguageData : public ::google::protobuf::MessageLite {
 public:
  LanguageData();
  virtual ~LanguageData();

  LanguageData(const LanguageData& from);

  inline LanguageData& operator=(const LanguageData& from) {
    CopyFrom(from);
    return *this;
  }

  static const LanguageData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LanguageData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LanguageData* other);

  // implements Message ----------------------------------------------

  LanguageData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LanguageData& from);
  void MergeFrom(const LanguageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef LanguageData_Language Language;
  typedef LanguageData_Statement Statement;

  // accessors -------------------------------------------------------

  // repeated .message.LanguageData.Language language = 1;
  inline int language_size() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 1;
  inline const ::message::LanguageData_Language& language(int index) const;
  inline ::message::LanguageData_Language* mutable_language(int index);
  inline ::message::LanguageData_Language* add_language();
  inline const ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Language >&
      language() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Language >*
      mutable_language();

  // @@protoc_insertion_point(class_scope:message.LanguageData)
 private:

  ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Language > language_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_HSLanguage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_HSLanguage_2eproto();
  #endif
  friend void protobuf_AssignDesc_HSLanguage_2eproto();
  friend void protobuf_ShutdownFile_HSLanguage_2eproto();

  void InitAsDefaultInstance();
  static LanguageData* default_instance_;
};
// ===================================================================


// ===================================================================

// LanguageData_Language

// required string key = 1;
inline bool LanguageData_Language::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanguageData_Language::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanguageData_Language::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanguageData_Language::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& LanguageData_Language::key() const {
  return *key_;
}
inline void LanguageData_Language::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LanguageData_Language::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LanguageData_Language::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanguageData_Language::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* LanguageData_Language::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LanguageData_Language::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .message.LanguageData.Statement statement = 2;
inline int LanguageData_Language::statement_size() const {
  return statement_.size();
}
inline void LanguageData_Language::clear_statement() {
  statement_.Clear();
}
inline const ::message::LanguageData_Statement& LanguageData_Language::statement(int index) const {
  return statement_.Get(index);
}
inline ::message::LanguageData_Statement* LanguageData_Language::mutable_statement(int index) {
  return statement_.Mutable(index);
}
inline ::message::LanguageData_Statement* LanguageData_Language::add_statement() {
  return statement_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Statement >&
LanguageData_Language::statement() const {
  return statement_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Statement >*
LanguageData_Language::mutable_statement() {
  return &statement_;
}

// -------------------------------------------------------------------

// LanguageData_Statement

// required string country = 1;
inline bool LanguageData_Statement::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanguageData_Statement::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanguageData_Statement::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanguageData_Statement::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& LanguageData_Statement::country() const {
  return *country_;
}
inline void LanguageData_Statement::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void LanguageData_Statement::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void LanguageData_Statement::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanguageData_Statement::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* LanguageData_Statement::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LanguageData_Statement::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string talk = 2;
inline bool LanguageData_Statement::has_talk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanguageData_Statement::set_has_talk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanguageData_Statement::clear_has_talk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanguageData_Statement::clear_talk() {
  if (talk_ != &::google::protobuf::internal::kEmptyString) {
    talk_->clear();
  }
  clear_has_talk();
}
inline const ::std::string& LanguageData_Statement::talk() const {
  return *talk_;
}
inline void LanguageData_Statement::set_talk(const ::std::string& value) {
  set_has_talk();
  if (talk_ == &::google::protobuf::internal::kEmptyString) {
    talk_ = new ::std::string;
  }
  talk_->assign(value);
}
inline void LanguageData_Statement::set_talk(const char* value) {
  set_has_talk();
  if (talk_ == &::google::protobuf::internal::kEmptyString) {
    talk_ = new ::std::string;
  }
  talk_->assign(value);
}
inline void LanguageData_Statement::set_talk(const char* value, size_t size) {
  set_has_talk();
  if (talk_ == &::google::protobuf::internal::kEmptyString) {
    talk_ = new ::std::string;
  }
  talk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanguageData_Statement::mutable_talk() {
  set_has_talk();
  if (talk_ == &::google::protobuf::internal::kEmptyString) {
    talk_ = new ::std::string;
  }
  return talk_;
}
inline ::std::string* LanguageData_Statement::release_talk() {
  clear_has_talk();
  if (talk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = talk_;
    talk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LanguageData_Statement::set_allocated_talk(::std::string* talk) {
  if (talk_ != &::google::protobuf::internal::kEmptyString) {
    delete talk_;
  }
  if (talk) {
    set_has_talk();
    talk_ = talk;
  } else {
    clear_has_talk();
    talk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LanguageData

// repeated .message.LanguageData.Language language = 1;
inline int LanguageData::language_size() const {
  return language_.size();
}
inline void LanguageData::clear_language() {
  language_.Clear();
}
inline const ::message::LanguageData_Language& LanguageData::language(int index) const {
  return language_.Get(index);
}
inline ::message::LanguageData_Language* LanguageData::mutable_language(int index) {
  return language_.Mutable(index);
}
inline ::message::LanguageData_Language* LanguageData::add_language() {
  return language_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Language >&
LanguageData::language() const {
  return language_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::LanguageData_Language >*
LanguageData::mutable_language() {
  return &language_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HSLanguage_2eproto__INCLUDED
