// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyRewardSystem.proto

#ifndef PROTOBUF_DailyRewardSystem_2eproto__INCLUDED
#define PROTOBUF_DailyRewardSystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DailyRewardSystem_2eproto();
void protobuf_AssignDesc_DailyRewardSystem_2eproto();
void protobuf_ShutdownFile_DailyRewardSystem_2eproto();

class DailyRewardSystemData;
class DailyRewardSystemData_DailyReward;

enum DailyRewardSystemData_DailyReward_ClaimedState {
  DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_Unclaimed = 0,
  DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_Claimed = 1,
  DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_AllowClaimed = 2
};
bool DailyRewardSystemData_DailyReward_ClaimedState_IsValid(int value);
const DailyRewardSystemData_DailyReward_ClaimedState DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_MIN = DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_Unclaimed;
const DailyRewardSystemData_DailyReward_ClaimedState DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_MAX = DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_AllowClaimed;
const int DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_ARRAYSIZE = DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_MAX + 1;

// ===================================================================

class DailyRewardSystemData_DailyReward : public ::google::protobuf::MessageLite {
 public:
  DailyRewardSystemData_DailyReward();
  virtual ~DailyRewardSystemData_DailyReward();

  DailyRewardSystemData_DailyReward(const DailyRewardSystemData_DailyReward& from);

  inline DailyRewardSystemData_DailyReward& operator=(const DailyRewardSystemData_DailyReward& from) {
    CopyFrom(from);
    return *this;
  }

  static const DailyRewardSystemData_DailyReward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DailyRewardSystemData_DailyReward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DailyRewardSystemData_DailyReward* other);

  // implements Message ----------------------------------------------

  DailyRewardSystemData_DailyReward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DailyRewardSystemData_DailyReward& from);
  void MergeFrom(const DailyRewardSystemData_DailyReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef DailyRewardSystemData_DailyReward_ClaimedState ClaimedState;
  static const ClaimedState ClaimedState_Unclaimed = DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_Unclaimed;
  static const ClaimedState ClaimedState_Claimed = DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_Claimed;
  static const ClaimedState ClaimedState_AllowClaimed = DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_AllowClaimed;
  static inline bool ClaimedState_IsValid(int value) {
    return DailyRewardSystemData_DailyReward_ClaimedState_IsValid(value);
  }
  static const ClaimedState ClaimedState_MIN =
    DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_MIN;
  static const ClaimedState ClaimedState_MAX =
    DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_MAX;
  static const int ClaimedState_ARRAYSIZE =
    DailyRewardSystemData_DailyReward_ClaimedState_ClaimedState_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required int32 dayID = 1;
  inline bool has_dayid() const;
  inline void clear_dayid();
  static const int kDayIDFieldNumber = 1;
  inline ::google::protobuf::int32 dayid() const;
  inline void set_dayid(::google::protobuf::int32 value);

  // required int32 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // required .message.DailyRewardSystemData.DailyReward.ClaimedState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::message::DailyRewardSystemData_DailyReward_ClaimedState state() const;
  inline void set_state(::message::DailyRewardSystemData_DailyReward_ClaimedState value);

  // @@protoc_insertion_point(class_scope:message.DailyRewardSystemData.DailyReward)
 private:
  inline void set_has_dayid();
  inline void clear_has_dayid();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::int32 dayid_;
  ::google::protobuf::int32 gold_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DailyRewardSystem_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DailyRewardSystem_2eproto();
  #endif
  friend void protobuf_AssignDesc_DailyRewardSystem_2eproto();
  friend void protobuf_ShutdownFile_DailyRewardSystem_2eproto();

  void InitAsDefaultInstance();
  static DailyRewardSystemData_DailyReward* default_instance_;
};
// -------------------------------------------------------------------

class DailyRewardSystemData : public ::google::protobuf::MessageLite {
 public:
  DailyRewardSystemData();
  virtual ~DailyRewardSystemData();

  DailyRewardSystemData(const DailyRewardSystemData& from);

  inline DailyRewardSystemData& operator=(const DailyRewardSystemData& from) {
    CopyFrom(from);
    return *this;
  }

  static const DailyRewardSystemData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DailyRewardSystemData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DailyRewardSystemData* other);

  // implements Message ----------------------------------------------

  DailyRewardSystemData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DailyRewardSystemData& from);
  void MergeFrom(const DailyRewardSystemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef DailyRewardSystemData_DailyReward DailyReward;

  // accessors -------------------------------------------------------

  // repeated .message.DailyRewardSystemData.DailyReward dailyRewardList = 1;
  inline int dailyrewardlist_size() const;
  inline void clear_dailyrewardlist();
  static const int kDailyRewardListFieldNumber = 1;
  inline const ::message::DailyRewardSystemData_DailyReward& dailyrewardlist(int index) const;
  inline ::message::DailyRewardSystemData_DailyReward* mutable_dailyrewardlist(int index);
  inline ::message::DailyRewardSystemData_DailyReward* add_dailyrewardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::DailyRewardSystemData_DailyReward >&
      dailyrewardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::DailyRewardSystemData_DailyReward >*
      mutable_dailyrewardlist();

  // @@protoc_insertion_point(class_scope:message.DailyRewardSystemData)
 private:

  ::google::protobuf::RepeatedPtrField< ::message::DailyRewardSystemData_DailyReward > dailyrewardlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DailyRewardSystem_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DailyRewardSystem_2eproto();
  #endif
  friend void protobuf_AssignDesc_DailyRewardSystem_2eproto();
  friend void protobuf_ShutdownFile_DailyRewardSystem_2eproto();

  void InitAsDefaultInstance();
  static DailyRewardSystemData* default_instance_;
};
// ===================================================================


// ===================================================================

// DailyRewardSystemData_DailyReward

// required int32 dayID = 1;
inline bool DailyRewardSystemData_DailyReward::has_dayid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyRewardSystemData_DailyReward::set_has_dayid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyRewardSystemData_DailyReward::clear_has_dayid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyRewardSystemData_DailyReward::clear_dayid() {
  dayid_ = 0;
  clear_has_dayid();
}
inline ::google::protobuf::int32 DailyRewardSystemData_DailyReward::dayid() const {
  return dayid_;
}
inline void DailyRewardSystemData_DailyReward::set_dayid(::google::protobuf::int32 value) {
  set_has_dayid();
  dayid_ = value;
}

// required int32 gold = 2;
inline bool DailyRewardSystemData_DailyReward::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyRewardSystemData_DailyReward::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyRewardSystemData_DailyReward::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyRewardSystemData_DailyReward::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 DailyRewardSystemData_DailyReward::gold() const {
  return gold_;
}
inline void DailyRewardSystemData_DailyReward::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// required .message.DailyRewardSystemData.DailyReward.ClaimedState state = 3;
inline bool DailyRewardSystemData_DailyReward::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyRewardSystemData_DailyReward::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyRewardSystemData_DailyReward::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyRewardSystemData_DailyReward::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::message::DailyRewardSystemData_DailyReward_ClaimedState DailyRewardSystemData_DailyReward::state() const {
  return static_cast< ::message::DailyRewardSystemData_DailyReward_ClaimedState >(state_);
}
inline void DailyRewardSystemData_DailyReward::set_state(::message::DailyRewardSystemData_DailyReward_ClaimedState value) {
  assert(::message::DailyRewardSystemData_DailyReward_ClaimedState_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// DailyRewardSystemData

// repeated .message.DailyRewardSystemData.DailyReward dailyRewardList = 1;
inline int DailyRewardSystemData::dailyrewardlist_size() const {
  return dailyrewardlist_.size();
}
inline void DailyRewardSystemData::clear_dailyrewardlist() {
  dailyrewardlist_.Clear();
}
inline const ::message::DailyRewardSystemData_DailyReward& DailyRewardSystemData::dailyrewardlist(int index) const {
  return dailyrewardlist_.Get(index);
}
inline ::message::DailyRewardSystemData_DailyReward* DailyRewardSystemData::mutable_dailyrewardlist(int index) {
  return dailyrewardlist_.Mutable(index);
}
inline ::message::DailyRewardSystemData_DailyReward* DailyRewardSystemData::add_dailyrewardlist() {
  return dailyrewardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::DailyRewardSystemData_DailyReward >&
DailyRewardSystemData::dailyrewardlist() const {
  return dailyrewardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::DailyRewardSystemData_DailyReward >*
DailyRewardSystemData::mutable_dailyrewardlist() {
  return &dailyrewardlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DailyRewardSystem_2eproto__INCLUDED
