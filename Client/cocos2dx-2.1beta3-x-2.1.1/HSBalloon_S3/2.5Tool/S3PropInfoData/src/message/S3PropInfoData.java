// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PropInfoData.proto

package message;

public final class S3PropInfoData {
  private S3PropInfoData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface PropInfoDataOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // repeated .message.PropInfo manualPropInfoList = 1;
    /**
     * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
     *
     * <pre>
     *所有手动道具信息
     * </pre>
     */
    java.util.List<message.S3PropInfo.PropInfo> 
        getManualPropInfoListList();
    /**
     * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
     *
     * <pre>
     *所有手动道具信息
     * </pre>
     */
    message.S3PropInfo.PropInfo getManualPropInfoList(int index);
    /**
     * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
     *
     * <pre>
     *所有手动道具信息
     * </pre>
     */
    int getManualPropInfoListCount();

    // repeated .message.PropInfo bufferPropInfoList = 2;
    /**
     * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
     *
     * <pre>
     *所有buffer道具信息
     * </pre>
     */
    java.util.List<message.S3PropInfo.PropInfo> 
        getBufferPropInfoListList();
    /**
     * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
     *
     * <pre>
     *所有buffer道具信息
     * </pre>
     */
    message.S3PropInfo.PropInfo getBufferPropInfoList(int index);
    /**
     * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
     *
     * <pre>
     *所有buffer道具信息
     * </pre>
     */
    int getBufferPropInfoListCount();

    // repeated .message.PropInfo effectPropInfoList = 3;
    /**
     * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
     *
     * <pre>
     *效果道具信息
     * </pre>
     */
    java.util.List<message.S3PropInfo.PropInfo> 
        getEffectPropInfoListList();
    /**
     * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
     *
     * <pre>
     *效果道具信息
     * </pre>
     */
    message.S3PropInfo.PropInfo getEffectPropInfoList(int index);
    /**
     * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
     *
     * <pre>
     *效果道具信息
     * </pre>
     */
    int getEffectPropInfoListCount();

    // repeated .message.PropInfo lockPropInfoList = 4;
    /**
     * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
     *
     * <pre>
     *道具槽锁信息
     * </pre>
     */
    java.util.List<message.S3PropInfo.PropInfo> 
        getLockPropInfoListList();
    /**
     * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
     *
     * <pre>
     *道具槽锁信息
     * </pre>
     */
    message.S3PropInfo.PropInfo getLockPropInfoList(int index);
    /**
     * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
     *
     * <pre>
     *道具槽锁信息
     * </pre>
     */
    int getLockPropInfoListCount();

    // repeated .message.BuyGold buyGoldList = 5;
    /**
     * <code>repeated .message.BuyGold buyGoldList = 5;</code>
     *
     * <pre>
     *购买金币的信息
     * </pre>
     */
    java.util.List<message.S3BuyGold.BuyGold> 
        getBuyGoldListList();
    /**
     * <code>repeated .message.BuyGold buyGoldList = 5;</code>
     *
     * <pre>
     *购买金币的信息
     * </pre>
     */
    message.S3BuyGold.BuyGold getBuyGoldList(int index);
    /**
     * <code>repeated .message.BuyGold buyGoldList = 5;</code>
     *
     * <pre>
     *购买金币的信息
     * </pre>
     */
    int getBuyGoldListCount();

    // repeated .message.PropInfo headList = 6;
    /**
     * <code>repeated .message.PropInfo headList = 6;</code>
     *
     * <pre>
     *头像列表信息
     * </pre>
     */
    java.util.List<message.S3PropInfo.PropInfo> 
        getHeadListList();
    /**
     * <code>repeated .message.PropInfo headList = 6;</code>
     *
     * <pre>
     *头像列表信息
     * </pre>
     */
    message.S3PropInfo.PropInfo getHeadList(int index);
    /**
     * <code>repeated .message.PropInfo headList = 6;</code>
     *
     * <pre>
     *头像列表信息
     * </pre>
     */
    int getHeadListCount();
  }
  /**
   * Protobuf type {@code message.PropInfoData}
   */
  public static final class PropInfoData extends
      com.google.protobuf.GeneratedMessageLite
      implements PropInfoDataOrBuilder {
    // Use PropInfoData.newBuilder() to construct.
    private PropInfoData(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private PropInfoData(boolean noInit) {}

    private static final PropInfoData defaultInstance;
    public static PropInfoData getDefaultInstance() {
      return defaultInstance;
    }

    public PropInfoData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private PropInfoData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                manualPropInfoList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              manualPropInfoList_.add(input.readMessage(message.S3PropInfo.PropInfo.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                bufferPropInfoList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              bufferPropInfoList_.add(input.readMessage(message.S3PropInfo.PropInfo.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                effectPropInfoList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>();
                mutable_bitField0_ |= 0x00000004;
              }
              effectPropInfoList_.add(input.readMessage(message.S3PropInfo.PropInfo.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                lockPropInfoList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>();
                mutable_bitField0_ |= 0x00000008;
              }
              lockPropInfoList_.add(input.readMessage(message.S3PropInfo.PropInfo.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                buyGoldList_ = new java.util.ArrayList<message.S3BuyGold.BuyGold>();
                mutable_bitField0_ |= 0x00000010;
              }
              buyGoldList_.add(input.readMessage(message.S3BuyGold.BuyGold.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                headList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>();
                mutable_bitField0_ |= 0x00000020;
              }
              headList_.add(input.readMessage(message.S3PropInfo.PropInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          manualPropInfoList_ = java.util.Collections.unmodifiableList(manualPropInfoList_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          bufferPropInfoList_ = java.util.Collections.unmodifiableList(bufferPropInfoList_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          effectPropInfoList_ = java.util.Collections.unmodifiableList(effectPropInfoList_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          lockPropInfoList_ = java.util.Collections.unmodifiableList(lockPropInfoList_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          buyGoldList_ = java.util.Collections.unmodifiableList(buyGoldList_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          headList_ = java.util.Collections.unmodifiableList(headList_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<PropInfoData> PARSER =
        new com.google.protobuf.AbstractParser<PropInfoData>() {
      public PropInfoData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PropInfoData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PropInfoData> getParserForType() {
      return PARSER;
    }

    // repeated .message.PropInfo manualPropInfoList = 1;
    public static final int MANUALPROPINFOLIST_FIELD_NUMBER = 1;
    private java.util.List<message.S3PropInfo.PropInfo> manualPropInfoList_;
    /**
     * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
     *
     * <pre>
     *所有手动道具信息
     * </pre>
     */
    public java.util.List<message.S3PropInfo.PropInfo> getManualPropInfoListList() {
      return manualPropInfoList_;
    }
    /**
     * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
     *
     * <pre>
     *所有手动道具信息
     * </pre>
     */
    public java.util.List<? extends message.S3PropInfo.PropInfoOrBuilder> 
        getManualPropInfoListOrBuilderList() {
      return manualPropInfoList_;
    }
    /**
     * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
     *
     * <pre>
     *所有手动道具信息
     * </pre>
     */
    public int getManualPropInfoListCount() {
      return manualPropInfoList_.size();
    }
    /**
     * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
     *
     * <pre>
     *所有手动道具信息
     * </pre>
     */
    public message.S3PropInfo.PropInfo getManualPropInfoList(int index) {
      return manualPropInfoList_.get(index);
    }
    /**
     * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
     *
     * <pre>
     *所有手动道具信息
     * </pre>
     */
    public message.S3PropInfo.PropInfoOrBuilder getManualPropInfoListOrBuilder(
        int index) {
      return manualPropInfoList_.get(index);
    }

    // repeated .message.PropInfo bufferPropInfoList = 2;
    public static final int BUFFERPROPINFOLIST_FIELD_NUMBER = 2;
    private java.util.List<message.S3PropInfo.PropInfo> bufferPropInfoList_;
    /**
     * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
     *
     * <pre>
     *所有buffer道具信息
     * </pre>
     */
    public java.util.List<message.S3PropInfo.PropInfo> getBufferPropInfoListList() {
      return bufferPropInfoList_;
    }
    /**
     * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
     *
     * <pre>
     *所有buffer道具信息
     * </pre>
     */
    public java.util.List<? extends message.S3PropInfo.PropInfoOrBuilder> 
        getBufferPropInfoListOrBuilderList() {
      return bufferPropInfoList_;
    }
    /**
     * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
     *
     * <pre>
     *所有buffer道具信息
     * </pre>
     */
    public int getBufferPropInfoListCount() {
      return bufferPropInfoList_.size();
    }
    /**
     * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
     *
     * <pre>
     *所有buffer道具信息
     * </pre>
     */
    public message.S3PropInfo.PropInfo getBufferPropInfoList(int index) {
      return bufferPropInfoList_.get(index);
    }
    /**
     * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
     *
     * <pre>
     *所有buffer道具信息
     * </pre>
     */
    public message.S3PropInfo.PropInfoOrBuilder getBufferPropInfoListOrBuilder(
        int index) {
      return bufferPropInfoList_.get(index);
    }

    // repeated .message.PropInfo effectPropInfoList = 3;
    public static final int EFFECTPROPINFOLIST_FIELD_NUMBER = 3;
    private java.util.List<message.S3PropInfo.PropInfo> effectPropInfoList_;
    /**
     * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
     *
     * <pre>
     *效果道具信息
     * </pre>
     */
    public java.util.List<message.S3PropInfo.PropInfo> getEffectPropInfoListList() {
      return effectPropInfoList_;
    }
    /**
     * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
     *
     * <pre>
     *效果道具信息
     * </pre>
     */
    public java.util.List<? extends message.S3PropInfo.PropInfoOrBuilder> 
        getEffectPropInfoListOrBuilderList() {
      return effectPropInfoList_;
    }
    /**
     * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
     *
     * <pre>
     *效果道具信息
     * </pre>
     */
    public int getEffectPropInfoListCount() {
      return effectPropInfoList_.size();
    }
    /**
     * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
     *
     * <pre>
     *效果道具信息
     * </pre>
     */
    public message.S3PropInfo.PropInfo getEffectPropInfoList(int index) {
      return effectPropInfoList_.get(index);
    }
    /**
     * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
     *
     * <pre>
     *效果道具信息
     * </pre>
     */
    public message.S3PropInfo.PropInfoOrBuilder getEffectPropInfoListOrBuilder(
        int index) {
      return effectPropInfoList_.get(index);
    }

    // repeated .message.PropInfo lockPropInfoList = 4;
    public static final int LOCKPROPINFOLIST_FIELD_NUMBER = 4;
    private java.util.List<message.S3PropInfo.PropInfo> lockPropInfoList_;
    /**
     * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
     *
     * <pre>
     *道具槽锁信息
     * </pre>
     */
    public java.util.List<message.S3PropInfo.PropInfo> getLockPropInfoListList() {
      return lockPropInfoList_;
    }
    /**
     * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
     *
     * <pre>
     *道具槽锁信息
     * </pre>
     */
    public java.util.List<? extends message.S3PropInfo.PropInfoOrBuilder> 
        getLockPropInfoListOrBuilderList() {
      return lockPropInfoList_;
    }
    /**
     * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
     *
     * <pre>
     *道具槽锁信息
     * </pre>
     */
    public int getLockPropInfoListCount() {
      return lockPropInfoList_.size();
    }
    /**
     * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
     *
     * <pre>
     *道具槽锁信息
     * </pre>
     */
    public message.S3PropInfo.PropInfo getLockPropInfoList(int index) {
      return lockPropInfoList_.get(index);
    }
    /**
     * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
     *
     * <pre>
     *道具槽锁信息
     * </pre>
     */
    public message.S3PropInfo.PropInfoOrBuilder getLockPropInfoListOrBuilder(
        int index) {
      return lockPropInfoList_.get(index);
    }

    // repeated .message.BuyGold buyGoldList = 5;
    public static final int BUYGOLDLIST_FIELD_NUMBER = 5;
    private java.util.List<message.S3BuyGold.BuyGold> buyGoldList_;
    /**
     * <code>repeated .message.BuyGold buyGoldList = 5;</code>
     *
     * <pre>
     *购买金币的信息
     * </pre>
     */
    public java.util.List<message.S3BuyGold.BuyGold> getBuyGoldListList() {
      return buyGoldList_;
    }
    /**
     * <code>repeated .message.BuyGold buyGoldList = 5;</code>
     *
     * <pre>
     *购买金币的信息
     * </pre>
     */
    public java.util.List<? extends message.S3BuyGold.BuyGoldOrBuilder> 
        getBuyGoldListOrBuilderList() {
      return buyGoldList_;
    }
    /**
     * <code>repeated .message.BuyGold buyGoldList = 5;</code>
     *
     * <pre>
     *购买金币的信息
     * </pre>
     */
    public int getBuyGoldListCount() {
      return buyGoldList_.size();
    }
    /**
     * <code>repeated .message.BuyGold buyGoldList = 5;</code>
     *
     * <pre>
     *购买金币的信息
     * </pre>
     */
    public message.S3BuyGold.BuyGold getBuyGoldList(int index) {
      return buyGoldList_.get(index);
    }
    /**
     * <code>repeated .message.BuyGold buyGoldList = 5;</code>
     *
     * <pre>
     *购买金币的信息
     * </pre>
     */
    public message.S3BuyGold.BuyGoldOrBuilder getBuyGoldListOrBuilder(
        int index) {
      return buyGoldList_.get(index);
    }

    // repeated .message.PropInfo headList = 6;
    public static final int HEADLIST_FIELD_NUMBER = 6;
    private java.util.List<message.S3PropInfo.PropInfo> headList_;
    /**
     * <code>repeated .message.PropInfo headList = 6;</code>
     *
     * <pre>
     *头像列表信息
     * </pre>
     */
    public java.util.List<message.S3PropInfo.PropInfo> getHeadListList() {
      return headList_;
    }
    /**
     * <code>repeated .message.PropInfo headList = 6;</code>
     *
     * <pre>
     *头像列表信息
     * </pre>
     */
    public java.util.List<? extends message.S3PropInfo.PropInfoOrBuilder> 
        getHeadListOrBuilderList() {
      return headList_;
    }
    /**
     * <code>repeated .message.PropInfo headList = 6;</code>
     *
     * <pre>
     *头像列表信息
     * </pre>
     */
    public int getHeadListCount() {
      return headList_.size();
    }
    /**
     * <code>repeated .message.PropInfo headList = 6;</code>
     *
     * <pre>
     *头像列表信息
     * </pre>
     */
    public message.S3PropInfo.PropInfo getHeadList(int index) {
      return headList_.get(index);
    }
    /**
     * <code>repeated .message.PropInfo headList = 6;</code>
     *
     * <pre>
     *头像列表信息
     * </pre>
     */
    public message.S3PropInfo.PropInfoOrBuilder getHeadListOrBuilder(
        int index) {
      return headList_.get(index);
    }

    private void initFields() {
      manualPropInfoList_ = java.util.Collections.emptyList();
      bufferPropInfoList_ = java.util.Collections.emptyList();
      effectPropInfoList_ = java.util.Collections.emptyList();
      lockPropInfoList_ = java.util.Collections.emptyList();
      buyGoldList_ = java.util.Collections.emptyList();
      headList_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < manualPropInfoList_.size(); i++) {
        output.writeMessage(1, manualPropInfoList_.get(i));
      }
      for (int i = 0; i < bufferPropInfoList_.size(); i++) {
        output.writeMessage(2, bufferPropInfoList_.get(i));
      }
      for (int i = 0; i < effectPropInfoList_.size(); i++) {
        output.writeMessage(3, effectPropInfoList_.get(i));
      }
      for (int i = 0; i < lockPropInfoList_.size(); i++) {
        output.writeMessage(4, lockPropInfoList_.get(i));
      }
      for (int i = 0; i < buyGoldList_.size(); i++) {
        output.writeMessage(5, buyGoldList_.get(i));
      }
      for (int i = 0; i < headList_.size(); i++) {
        output.writeMessage(6, headList_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < manualPropInfoList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, manualPropInfoList_.get(i));
      }
      for (int i = 0; i < bufferPropInfoList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, bufferPropInfoList_.get(i));
      }
      for (int i = 0; i < effectPropInfoList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, effectPropInfoList_.get(i));
      }
      for (int i = 0; i < lockPropInfoList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, lockPropInfoList_.get(i));
      }
      for (int i = 0; i < buyGoldList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, buyGoldList_.get(i));
      }
      for (int i = 0; i < headList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, headList_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static message.S3PropInfoData.PropInfoData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static message.S3PropInfoData.PropInfoData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static message.S3PropInfoData.PropInfoData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static message.S3PropInfoData.PropInfoData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static message.S3PropInfoData.PropInfoData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static message.S3PropInfoData.PropInfoData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static message.S3PropInfoData.PropInfoData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static message.S3PropInfoData.PropInfoData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static message.S3PropInfoData.PropInfoData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static message.S3PropInfoData.PropInfoData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(message.S3PropInfoData.PropInfoData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code message.PropInfoData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          message.S3PropInfoData.PropInfoData, Builder>
        implements message.S3PropInfoData.PropInfoDataOrBuilder {
      // Construct using message.S3PropInfoData.PropInfoData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        manualPropInfoList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        bufferPropInfoList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        effectPropInfoList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        lockPropInfoList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        buyGoldList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        headList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public message.S3PropInfoData.PropInfoData getDefaultInstanceForType() {
        return message.S3PropInfoData.PropInfoData.getDefaultInstance();
      }

      public message.S3PropInfoData.PropInfoData build() {
        message.S3PropInfoData.PropInfoData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public message.S3PropInfoData.PropInfoData buildPartial() {
        message.S3PropInfoData.PropInfoData result = new message.S3PropInfoData.PropInfoData(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          manualPropInfoList_ = java.util.Collections.unmodifiableList(manualPropInfoList_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.manualPropInfoList_ = manualPropInfoList_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          bufferPropInfoList_ = java.util.Collections.unmodifiableList(bufferPropInfoList_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bufferPropInfoList_ = bufferPropInfoList_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          effectPropInfoList_ = java.util.Collections.unmodifiableList(effectPropInfoList_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.effectPropInfoList_ = effectPropInfoList_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          lockPropInfoList_ = java.util.Collections.unmodifiableList(lockPropInfoList_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.lockPropInfoList_ = lockPropInfoList_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          buyGoldList_ = java.util.Collections.unmodifiableList(buyGoldList_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.buyGoldList_ = buyGoldList_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          headList_ = java.util.Collections.unmodifiableList(headList_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.headList_ = headList_;
        return result;
      }

      public Builder mergeFrom(message.S3PropInfoData.PropInfoData other) {
        if (other == message.S3PropInfoData.PropInfoData.getDefaultInstance()) return this;
        if (!other.manualPropInfoList_.isEmpty()) {
          if (manualPropInfoList_.isEmpty()) {
            manualPropInfoList_ = other.manualPropInfoList_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureManualPropInfoListIsMutable();
            manualPropInfoList_.addAll(other.manualPropInfoList_);
          }
          
        }
        if (!other.bufferPropInfoList_.isEmpty()) {
          if (bufferPropInfoList_.isEmpty()) {
            bufferPropInfoList_ = other.bufferPropInfoList_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBufferPropInfoListIsMutable();
            bufferPropInfoList_.addAll(other.bufferPropInfoList_);
          }
          
        }
        if (!other.effectPropInfoList_.isEmpty()) {
          if (effectPropInfoList_.isEmpty()) {
            effectPropInfoList_ = other.effectPropInfoList_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureEffectPropInfoListIsMutable();
            effectPropInfoList_.addAll(other.effectPropInfoList_);
          }
          
        }
        if (!other.lockPropInfoList_.isEmpty()) {
          if (lockPropInfoList_.isEmpty()) {
            lockPropInfoList_ = other.lockPropInfoList_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureLockPropInfoListIsMutable();
            lockPropInfoList_.addAll(other.lockPropInfoList_);
          }
          
        }
        if (!other.buyGoldList_.isEmpty()) {
          if (buyGoldList_.isEmpty()) {
            buyGoldList_ = other.buyGoldList_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureBuyGoldListIsMutable();
            buyGoldList_.addAll(other.buyGoldList_);
          }
          
        }
        if (!other.headList_.isEmpty()) {
          if (headList_.isEmpty()) {
            headList_ = other.headList_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureHeadListIsMutable();
            headList_.addAll(other.headList_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        message.S3PropInfoData.PropInfoData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (message.S3PropInfoData.PropInfoData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .message.PropInfo manualPropInfoList = 1;
      private java.util.List<message.S3PropInfo.PropInfo> manualPropInfoList_ =
        java.util.Collections.emptyList();
      private void ensureManualPropInfoListIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          manualPropInfoList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>(manualPropInfoList_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public java.util.List<message.S3PropInfo.PropInfo> getManualPropInfoListList() {
        return java.util.Collections.unmodifiableList(manualPropInfoList_);
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public int getManualPropInfoListCount() {
        return manualPropInfoList_.size();
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public message.S3PropInfo.PropInfo getManualPropInfoList(int index) {
        return manualPropInfoList_.get(index);
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public Builder setManualPropInfoList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureManualPropInfoListIsMutable();
        manualPropInfoList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public Builder setManualPropInfoList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureManualPropInfoListIsMutable();
        manualPropInfoList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public Builder addManualPropInfoList(message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureManualPropInfoListIsMutable();
        manualPropInfoList_.add(value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public Builder addManualPropInfoList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureManualPropInfoListIsMutable();
        manualPropInfoList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public Builder addManualPropInfoList(
          message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureManualPropInfoListIsMutable();
        manualPropInfoList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public Builder addManualPropInfoList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureManualPropInfoListIsMutable();
        manualPropInfoList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public Builder addAllManualPropInfoList(
          java.lang.Iterable<? extends message.S3PropInfo.PropInfo> values) {
        ensureManualPropInfoListIsMutable();
        super.addAll(values, manualPropInfoList_);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public Builder clearManualPropInfoList() {
        manualPropInfoList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo manualPropInfoList = 1;</code>
       *
       * <pre>
       *所有手动道具信息
       * </pre>
       */
      public Builder removeManualPropInfoList(int index) {
        ensureManualPropInfoListIsMutable();
        manualPropInfoList_.remove(index);

        return this;
      }

      // repeated .message.PropInfo bufferPropInfoList = 2;
      private java.util.List<message.S3PropInfo.PropInfo> bufferPropInfoList_ =
        java.util.Collections.emptyList();
      private void ensureBufferPropInfoListIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          bufferPropInfoList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>(bufferPropInfoList_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public java.util.List<message.S3PropInfo.PropInfo> getBufferPropInfoListList() {
        return java.util.Collections.unmodifiableList(bufferPropInfoList_);
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public int getBufferPropInfoListCount() {
        return bufferPropInfoList_.size();
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public message.S3PropInfo.PropInfo getBufferPropInfoList(int index) {
        return bufferPropInfoList_.get(index);
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public Builder setBufferPropInfoList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBufferPropInfoListIsMutable();
        bufferPropInfoList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public Builder setBufferPropInfoList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureBufferPropInfoListIsMutable();
        bufferPropInfoList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public Builder addBufferPropInfoList(message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBufferPropInfoListIsMutable();
        bufferPropInfoList_.add(value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public Builder addBufferPropInfoList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBufferPropInfoListIsMutable();
        bufferPropInfoList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public Builder addBufferPropInfoList(
          message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureBufferPropInfoListIsMutable();
        bufferPropInfoList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public Builder addBufferPropInfoList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureBufferPropInfoListIsMutable();
        bufferPropInfoList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public Builder addAllBufferPropInfoList(
          java.lang.Iterable<? extends message.S3PropInfo.PropInfo> values) {
        ensureBufferPropInfoListIsMutable();
        super.addAll(values, bufferPropInfoList_);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public Builder clearBufferPropInfoList() {
        bufferPropInfoList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo bufferPropInfoList = 2;</code>
       *
       * <pre>
       *所有buffer道具信息
       * </pre>
       */
      public Builder removeBufferPropInfoList(int index) {
        ensureBufferPropInfoListIsMutable();
        bufferPropInfoList_.remove(index);

        return this;
      }

      // repeated .message.PropInfo effectPropInfoList = 3;
      private java.util.List<message.S3PropInfo.PropInfo> effectPropInfoList_ =
        java.util.Collections.emptyList();
      private void ensureEffectPropInfoListIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          effectPropInfoList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>(effectPropInfoList_);
          bitField0_ |= 0x00000004;
         }
      }

      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public java.util.List<message.S3PropInfo.PropInfo> getEffectPropInfoListList() {
        return java.util.Collections.unmodifiableList(effectPropInfoList_);
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public int getEffectPropInfoListCount() {
        return effectPropInfoList_.size();
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public message.S3PropInfo.PropInfo getEffectPropInfoList(int index) {
        return effectPropInfoList_.get(index);
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public Builder setEffectPropInfoList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEffectPropInfoListIsMutable();
        effectPropInfoList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public Builder setEffectPropInfoList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureEffectPropInfoListIsMutable();
        effectPropInfoList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public Builder addEffectPropInfoList(message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEffectPropInfoListIsMutable();
        effectPropInfoList_.add(value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public Builder addEffectPropInfoList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEffectPropInfoListIsMutable();
        effectPropInfoList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public Builder addEffectPropInfoList(
          message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureEffectPropInfoListIsMutable();
        effectPropInfoList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public Builder addEffectPropInfoList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureEffectPropInfoListIsMutable();
        effectPropInfoList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public Builder addAllEffectPropInfoList(
          java.lang.Iterable<? extends message.S3PropInfo.PropInfo> values) {
        ensureEffectPropInfoListIsMutable();
        super.addAll(values, effectPropInfoList_);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public Builder clearEffectPropInfoList() {
        effectPropInfoList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo effectPropInfoList = 3;</code>
       *
       * <pre>
       *效果道具信息
       * </pre>
       */
      public Builder removeEffectPropInfoList(int index) {
        ensureEffectPropInfoListIsMutable();
        effectPropInfoList_.remove(index);

        return this;
      }

      // repeated .message.PropInfo lockPropInfoList = 4;
      private java.util.List<message.S3PropInfo.PropInfo> lockPropInfoList_ =
        java.util.Collections.emptyList();
      private void ensureLockPropInfoListIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          lockPropInfoList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>(lockPropInfoList_);
          bitField0_ |= 0x00000008;
         }
      }

      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public java.util.List<message.S3PropInfo.PropInfo> getLockPropInfoListList() {
        return java.util.Collections.unmodifiableList(lockPropInfoList_);
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public int getLockPropInfoListCount() {
        return lockPropInfoList_.size();
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public message.S3PropInfo.PropInfo getLockPropInfoList(int index) {
        return lockPropInfoList_.get(index);
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public Builder setLockPropInfoList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLockPropInfoListIsMutable();
        lockPropInfoList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public Builder setLockPropInfoList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureLockPropInfoListIsMutable();
        lockPropInfoList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public Builder addLockPropInfoList(message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLockPropInfoListIsMutable();
        lockPropInfoList_.add(value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public Builder addLockPropInfoList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLockPropInfoListIsMutable();
        lockPropInfoList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public Builder addLockPropInfoList(
          message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureLockPropInfoListIsMutable();
        lockPropInfoList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public Builder addLockPropInfoList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureLockPropInfoListIsMutable();
        lockPropInfoList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public Builder addAllLockPropInfoList(
          java.lang.Iterable<? extends message.S3PropInfo.PropInfo> values) {
        ensureLockPropInfoListIsMutable();
        super.addAll(values, lockPropInfoList_);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public Builder clearLockPropInfoList() {
        lockPropInfoList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo lockPropInfoList = 4;</code>
       *
       * <pre>
       *道具槽锁信息
       * </pre>
       */
      public Builder removeLockPropInfoList(int index) {
        ensureLockPropInfoListIsMutable();
        lockPropInfoList_.remove(index);

        return this;
      }

      // repeated .message.BuyGold buyGoldList = 5;
      private java.util.List<message.S3BuyGold.BuyGold> buyGoldList_ =
        java.util.Collections.emptyList();
      private void ensureBuyGoldListIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          buyGoldList_ = new java.util.ArrayList<message.S3BuyGold.BuyGold>(buyGoldList_);
          bitField0_ |= 0x00000010;
         }
      }

      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public java.util.List<message.S3BuyGold.BuyGold> getBuyGoldListList() {
        return java.util.Collections.unmodifiableList(buyGoldList_);
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public int getBuyGoldListCount() {
        return buyGoldList_.size();
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public message.S3BuyGold.BuyGold getBuyGoldList(int index) {
        return buyGoldList_.get(index);
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public Builder setBuyGoldList(
          int index, message.S3BuyGold.BuyGold value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBuyGoldListIsMutable();
        buyGoldList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public Builder setBuyGoldList(
          int index, message.S3BuyGold.BuyGold.Builder builderForValue) {
        ensureBuyGoldListIsMutable();
        buyGoldList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public Builder addBuyGoldList(message.S3BuyGold.BuyGold value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBuyGoldListIsMutable();
        buyGoldList_.add(value);

        return this;
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public Builder addBuyGoldList(
          int index, message.S3BuyGold.BuyGold value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBuyGoldListIsMutable();
        buyGoldList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public Builder addBuyGoldList(
          message.S3BuyGold.BuyGold.Builder builderForValue) {
        ensureBuyGoldListIsMutable();
        buyGoldList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public Builder addBuyGoldList(
          int index, message.S3BuyGold.BuyGold.Builder builderForValue) {
        ensureBuyGoldListIsMutable();
        buyGoldList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public Builder addAllBuyGoldList(
          java.lang.Iterable<? extends message.S3BuyGold.BuyGold> values) {
        ensureBuyGoldListIsMutable();
        super.addAll(values, buyGoldList_);

        return this;
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public Builder clearBuyGoldList() {
        buyGoldList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);

        return this;
      }
      /**
       * <code>repeated .message.BuyGold buyGoldList = 5;</code>
       *
       * <pre>
       *购买金币的信息
       * </pre>
       */
      public Builder removeBuyGoldList(int index) {
        ensureBuyGoldListIsMutable();
        buyGoldList_.remove(index);

        return this;
      }

      // repeated .message.PropInfo headList = 6;
      private java.util.List<message.S3PropInfo.PropInfo> headList_ =
        java.util.Collections.emptyList();
      private void ensureHeadListIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          headList_ = new java.util.ArrayList<message.S3PropInfo.PropInfo>(headList_);
          bitField0_ |= 0x00000020;
         }
      }

      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public java.util.List<message.S3PropInfo.PropInfo> getHeadListList() {
        return java.util.Collections.unmodifiableList(headList_);
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public int getHeadListCount() {
        return headList_.size();
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public message.S3PropInfo.PropInfo getHeadList(int index) {
        return headList_.get(index);
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public Builder setHeadList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadListIsMutable();
        headList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public Builder setHeadList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureHeadListIsMutable();
        headList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public Builder addHeadList(message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadListIsMutable();
        headList_.add(value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public Builder addHeadList(
          int index, message.S3PropInfo.PropInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadListIsMutable();
        headList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public Builder addHeadList(
          message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureHeadListIsMutable();
        headList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public Builder addHeadList(
          int index, message.S3PropInfo.PropInfo.Builder builderForValue) {
        ensureHeadListIsMutable();
        headList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public Builder addAllHeadList(
          java.lang.Iterable<? extends message.S3PropInfo.PropInfo> values) {
        ensureHeadListIsMutable();
        super.addAll(values, headList_);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public Builder clearHeadList() {
        headList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);

        return this;
      }
      /**
       * <code>repeated .message.PropInfo headList = 6;</code>
       *
       * <pre>
       *头像列表信息
       * </pre>
       */
      public Builder removeHeadList(int index) {
        ensureHeadListIsMutable();
        headList_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:message.PropInfoData)
    }

    static {
      defaultInstance = new PropInfoData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:message.PropInfoData)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
