// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameLog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_GameLog_2eproto() {
  delete LogRequest::default_instance_;
  delete LogRequest_UserLog::default_instance_;
  delete LogRequest_TerminalLog::default_instance_;
  delete LogRequest_GoodsLog::default_instance_;
  delete LogResponse::default_instance_;
}

void protobuf_AddDesc_GameLog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  LogRequest::default_instance_ = new LogRequest();
  LogRequest_UserLog::default_instance_ = new LogRequest_UserLog();
  LogRequest_TerminalLog::default_instance_ = new LogRequest_TerminalLog();
  LogRequest_GoodsLog::default_instance_ = new LogRequest_GoodsLog();
  LogResponse::default_instance_ = new LogResponse();
  LogRequest::default_instance_->InitAsDefaultInstance();
  LogRequest_UserLog::default_instance_->InitAsDefaultInstance();
  LogRequest_TerminalLog::default_instance_->InitAsDefaultInstance();
  LogRequest_GoodsLog::default_instance_->InitAsDefaultInstance();
  LogResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameLog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameLog_2eproto {
  StaticDescriptorInitializer_GameLog_2eproto() {
    protobuf_AddDesc_GameLog_2eproto();
  }
} static_descriptor_initializer_GameLog_2eproto_;


// ===================================================================

bool LogRequest_ActionType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogRequest_ActionType LogRequest::Normal;
const LogRequest_ActionType LogRequest::Activate;
const LogRequest_ActionType LogRequest::Register;
const LogRequest_ActionType LogRequest::Login;
const LogRequest_ActionType LogRequest::Logout;
const LogRequest_ActionType LogRequest::Logoff;
const LogRequest_ActionType LogRequest::ActionType_MIN;
const LogRequest_ActionType LogRequest::ActionType_MAX;
const int LogRequest::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
bool LogRequest_BuyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogRequest_BuyType LogRequest::BuyItem;
const LogRequest_BuyType LogRequest::BuyGold;
const LogRequest_BuyType LogRequest::BuyGood;
const LogRequest_BuyType LogRequest::BuyOrnament;
const LogRequest_BuyType LogRequest::BuyType_MIN;
const LogRequest_BuyType LogRequest::BuyType_MAX;
const int LogRequest::BuyType_ARRAYSIZE;
#endif  // _MSC_VER
bool LogRequest_BuyState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogRequest_BuyState LogRequest::Success;
const LogRequest_BuyState LogRequest::Fail;
const LogRequest_BuyState LogRequest::Repeat_Buy;
const LogRequest_BuyState LogRequest::BuyState_MIN;
const LogRequest_BuyState LogRequest::BuyState_MAX;
const int LogRequest::BuyState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogRequest_UserLog::kChIDFieldNumber;
const int LogRequest_UserLog::kLoginTimeFieldNumber;
const int LogRequest_UserLog::kActionTypeFieldNumber;
const int LogRequest_UserLog::kLogoutTimeFieldNumber;
const int LogRequest_UserLog::kSTimeFieldNumber;
#endif  // !_MSC_VER

LogRequest_UserLog::LogRequest_UserLog()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogRequest_UserLog::InitAsDefaultInstance() {
}

LogRequest_UserLog::LogRequest_UserLog(const LogRequest_UserLog& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogRequest_UserLog::SharedCtor() {
  _cached_size_ = 0;
  chid_ = 0;
  logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  actiontype_ = -1;
  logouttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRequest_UserLog::~LogRequest_UserLog() {
  SharedDtor();
}

void LogRequest_UserLog::SharedDtor() {
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    delete logintime_;
  }
  if (logouttime_ != &::google::protobuf::internal::kEmptyString) {
    delete logouttime_;
  }
  if (stime_ != &::google::protobuf::internal::kEmptyString) {
    delete stime_;
  }
  if (this != default_instance_) {
  }
}

void LogRequest_UserLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogRequest_UserLog& LogRequest_UserLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameLog_2eproto();  return *default_instance_;
}

LogRequest_UserLog* LogRequest_UserLog::default_instance_ = NULL;

LogRequest_UserLog* LogRequest_UserLog::New() const {
  return new LogRequest_UserLog;
}

void LogRequest_UserLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chid_ = 0;
    if (has_logintime()) {
      if (logintime_ != &::google::protobuf::internal::kEmptyString) {
        logintime_->clear();
      }
    }
    actiontype_ = -1;
    if (has_logouttime()) {
      if (logouttime_ != &::google::protobuf::internal::kEmptyString) {
        logouttime_->clear();
      }
    }
    if (has_stime()) {
      if (stime_ != &::google::protobuf::internal::kEmptyString) {
        stime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogRequest_UserLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chid_)));
          set_has_chid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginTime;
        break;
      }
      
      // optional string loginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logintime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actionType;
        break;
      }
      
      // optional .message.LogRequest.ActionType actionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::LogRequest_ActionType_IsValid(value)) {
            set_actiontype(static_cast< ::message::LogRequest_ActionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logoutTime;
        break;
      }
      
      // optional string logoutTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logoutTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logouttime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sTime;
        break;
      }
      
      // optional string sTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRequest_UserLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chID = 1;
  if (has_chid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chid(), output);
  }
  
  // optional string loginTime = 2;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->logintime(), output);
  }
  
  // optional .message.LogRequest.ActionType actionType = 3;
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->actiontype(), output);
  }
  
  // optional string logoutTime = 4;
  if (has_logouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->logouttime(), output);
  }
  
  // optional string sTime = 5;
  if (has_stime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stime(), output);
  }
  
}

int LogRequest_UserLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chID = 1;
    if (has_chid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chid());
    }
    
    // optional string loginTime = 2;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logintime());
    }
    
    // optional .message.LogRequest.ActionType actionType = 3;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->actiontype());
    }
    
    // optional string logoutTime = 4;
    if (has_logouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logouttime());
    }
    
    // optional string sTime = 5;
    if (has_stime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stime());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRequest_UserLog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogRequest_UserLog*>(&from));
}

void LogRequest_UserLog::MergeFrom(const LogRequest_UserLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chid()) {
      set_chid(from.chid());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_logouttime()) {
      set_logouttime(from.logouttime());
    }
    if (from.has_stime()) {
      set_stime(from.stime());
    }
  }
}

void LogRequest_UserLog::CopyFrom(const LogRequest_UserLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest_UserLog::IsInitialized() const {
  
  return true;
}

void LogRequest_UserLog::Swap(LogRequest_UserLog* other) {
  if (other != this) {
    std::swap(chid_, other->chid_);
    std::swap(logintime_, other->logintime_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(logouttime_, other->logouttime_);
    std::swap(stime_, other->stime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogRequest_UserLog::GetTypeName() const {
  return "message.LogRequest.UserLog";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogRequest_TerminalLog::kOsNameFieldNumber;
const int LogRequest_TerminalLog::kDpiSizeFieldNumber;
const int LogRequest_TerminalLog::kCliTypeFieldNumber;
const int LogRequest_TerminalLog::kVerInfoFieldNumber;
const int LogRequest_TerminalLog::kNetTypeFieldNumber;
const int LogRequest_TerminalLog::kNetProInfoFieldNumber;
const int LogRequest_TerminalLog::kCountryInfoFieldNumber;
const int LogRequest_TerminalLog::kCityInfoFieldNumber;
#endif  // !_MSC_VER

LogRequest_TerminalLog::LogRequest_TerminalLog()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogRequest_TerminalLog::InitAsDefaultInstance() {
}

LogRequest_TerminalLog::LogRequest_TerminalLog(const LogRequest_TerminalLog& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogRequest_TerminalLog::SharedCtor() {
  _cached_size_ = 0;
  osname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dpisize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clitype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nettype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netproinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  countryinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cityinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRequest_TerminalLog::~LogRequest_TerminalLog() {
  SharedDtor();
}

void LogRequest_TerminalLog::SharedDtor() {
  if (osname_ != &::google::protobuf::internal::kEmptyString) {
    delete osname_;
  }
  if (dpisize_ != &::google::protobuf::internal::kEmptyString) {
    delete dpisize_;
  }
  if (clitype_ != &::google::protobuf::internal::kEmptyString) {
    delete clitype_;
  }
  if (verinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete verinfo_;
  }
  if (nettype_ != &::google::protobuf::internal::kEmptyString) {
    delete nettype_;
  }
  if (netproinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete netproinfo_;
  }
  if (countryinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete countryinfo_;
  }
  if (cityinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete cityinfo_;
  }
  if (this != default_instance_) {
  }
}

void LogRequest_TerminalLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogRequest_TerminalLog& LogRequest_TerminalLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameLog_2eproto();  return *default_instance_;
}

LogRequest_TerminalLog* LogRequest_TerminalLog::default_instance_ = NULL;

LogRequest_TerminalLog* LogRequest_TerminalLog::New() const {
  return new LogRequest_TerminalLog;
}

void LogRequest_TerminalLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_osname()) {
      if (osname_ != &::google::protobuf::internal::kEmptyString) {
        osname_->clear();
      }
    }
    if (has_dpisize()) {
      if (dpisize_ != &::google::protobuf::internal::kEmptyString) {
        dpisize_->clear();
      }
    }
    if (has_clitype()) {
      if (clitype_ != &::google::protobuf::internal::kEmptyString) {
        clitype_->clear();
      }
    }
    if (has_verinfo()) {
      if (verinfo_ != &::google::protobuf::internal::kEmptyString) {
        verinfo_->clear();
      }
    }
    if (has_nettype()) {
      if (nettype_ != &::google::protobuf::internal::kEmptyString) {
        nettype_->clear();
      }
    }
    if (has_netproinfo()) {
      if (netproinfo_ != &::google::protobuf::internal::kEmptyString) {
        netproinfo_->clear();
      }
    }
    if (has_countryinfo()) {
      if (countryinfo_ != &::google::protobuf::internal::kEmptyString) {
        countryinfo_->clear();
      }
    }
    if (has_cityinfo()) {
      if (cityinfo_ != &::google::protobuf::internal::kEmptyString) {
        cityinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogRequest_TerminalLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string osName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dpiSize;
        break;
      }
      
      // optional string dpiSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dpiSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dpisize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cliType;
        break;
      }
      
      // optional string cliType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cliType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clitype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_verInfo;
        break;
      }
      
      // optional string verInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_netType;
        break;
      }
      
      // optional string netType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nettype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_netProInfo;
        break;
      }
      
      // optional string netProInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netProInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netproinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_countryInfo;
        break;
      }
      
      // optional string countryInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countryInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countryinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cityInfo;
        break;
      }
      
      // optional string cityInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cityInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cityinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRequest_TerminalLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string osName = 1;
  if (has_osname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->osname(), output);
  }
  
  // optional string dpiSize = 2;
  if (has_dpisize()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dpisize(), output);
  }
  
  // optional string cliType = 3;
  if (has_clitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->clitype(), output);
  }
  
  // optional string verInfo = 4;
  if (has_verinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->verinfo(), output);
  }
  
  // optional string netType = 5;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nettype(), output);
  }
  
  // optional string netProInfo = 6;
  if (has_netproinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->netproinfo(), output);
  }
  
  // optional string countryInfo = 7;
  if (has_countryinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->countryinfo(), output);
  }
  
  // optional string cityInfo = 8;
  if (has_cityinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->cityinfo(), output);
  }
  
}

int LogRequest_TerminalLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string osName = 1;
    if (has_osname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osname());
    }
    
    // optional string dpiSize = 2;
    if (has_dpisize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dpisize());
    }
    
    // optional string cliType = 3;
    if (has_clitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clitype());
    }
    
    // optional string verInfo = 4;
    if (has_verinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verinfo());
    }
    
    // optional string netType = 5;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nettype());
    }
    
    // optional string netProInfo = 6;
    if (has_netproinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netproinfo());
    }
    
    // optional string countryInfo = 7;
    if (has_countryinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countryinfo());
    }
    
    // optional string cityInfo = 8;
    if (has_cityinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cityinfo());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRequest_TerminalLog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogRequest_TerminalLog*>(&from));
}

void LogRequest_TerminalLog::MergeFrom(const LogRequest_TerminalLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osname()) {
      set_osname(from.osname());
    }
    if (from.has_dpisize()) {
      set_dpisize(from.dpisize());
    }
    if (from.has_clitype()) {
      set_clitype(from.clitype());
    }
    if (from.has_verinfo()) {
      set_verinfo(from.verinfo());
    }
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
    if (from.has_netproinfo()) {
      set_netproinfo(from.netproinfo());
    }
    if (from.has_countryinfo()) {
      set_countryinfo(from.countryinfo());
    }
    if (from.has_cityinfo()) {
      set_cityinfo(from.cityinfo());
    }
  }
}

void LogRequest_TerminalLog::CopyFrom(const LogRequest_TerminalLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest_TerminalLog::IsInitialized() const {
  
  return true;
}

void LogRequest_TerminalLog::Swap(LogRequest_TerminalLog* other) {
  if (other != this) {
    std::swap(osname_, other->osname_);
    std::swap(dpisize_, other->dpisize_);
    std::swap(clitype_, other->clitype_);
    std::swap(verinfo_, other->verinfo_);
    std::swap(nettype_, other->nettype_);
    std::swap(netproinfo_, other->netproinfo_);
    std::swap(countryinfo_, other->countryinfo_);
    std::swap(cityinfo_, other->cityinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogRequest_TerminalLog::GetTypeName() const {
  return "message.LogRequest.TerminalLog";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogRequest_GoodsLog::kChIDFieldNumber;
const int LogRequest_GoodsLog::kTypeFieldNumber;
const int LogRequest_GoodsLog::kGoodsIDFieldNumber;
const int LogRequest_GoodsLog::kBuySizeFieldNumber;
const int LogRequest_GoodsLog::kStateFieldNumber;
const int LogRequest_GoodsLog::kBuyTimeFieldNumber;
const int LogRequest_GoodsLog::kSTimeFieldNumber;
#endif  // !_MSC_VER

LogRequest_GoodsLog::LogRequest_GoodsLog()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogRequest_GoodsLog::InitAsDefaultInstance() {
}

LogRequest_GoodsLog::LogRequest_GoodsLog(const LogRequest_GoodsLog& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogRequest_GoodsLog::SharedCtor() {
  _cached_size_ = 0;
  chid_ = 0;
  type_ = 1;
  goodsid_ = 0;
  buysize_ = 0;
  state_ = 0;
  buytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRequest_GoodsLog::~LogRequest_GoodsLog() {
  SharedDtor();
}

void LogRequest_GoodsLog::SharedDtor() {
  if (buytime_ != &::google::protobuf::internal::kEmptyString) {
    delete buytime_;
  }
  if (stime_ != &::google::protobuf::internal::kEmptyString) {
    delete stime_;
  }
  if (this != default_instance_) {
  }
}

void LogRequest_GoodsLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogRequest_GoodsLog& LogRequest_GoodsLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameLog_2eproto();  return *default_instance_;
}

LogRequest_GoodsLog* LogRequest_GoodsLog::default_instance_ = NULL;

LogRequest_GoodsLog* LogRequest_GoodsLog::New() const {
  return new LogRequest_GoodsLog;
}

void LogRequest_GoodsLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chid_ = 0;
    type_ = 1;
    goodsid_ = 0;
    buysize_ = 0;
    state_ = 0;
    if (has_buytime()) {
      if (buytime_ != &::google::protobuf::internal::kEmptyString) {
        buytime_->clear();
      }
    }
    if (has_stime()) {
      if (stime_ != &::google::protobuf::internal::kEmptyString) {
        stime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogRequest_GoodsLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chid_)));
          set_has_chid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .message.LogRequest.BuyType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::LogRequest_BuyType_IsValid(value)) {
            set_type(static_cast< ::message::LogRequest_BuyType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goodsID;
        break;
      }
      
      // optional int32 goodsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buySize;
        break;
      }
      
      // optional int32 buySize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buysize_)));
          set_has_buysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }
      
      // optional .message.LogRequest.BuyState state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::LogRequest_BuyState_IsValid(value)) {
            set_state(static_cast< ::message::LogRequest_BuyState >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_buyTime;
        break;
      }
      
      // optional string buyTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buytime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sTime;
        break;
      }
      
      // optional string sTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRequest_GoodsLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chID = 1;
  if (has_chid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chid(), output);
  }
  
  // optional .message.LogRequest.BuyType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional int32 goodsID = 3;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goodsid(), output);
  }
  
  // optional int32 buySize = 4;
  if (has_buysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buysize(), output);
  }
  
  // optional .message.LogRequest.BuyState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }
  
  // optional string buyTime = 6;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->buytime(), output);
  }
  
  // optional string sTime = 7;
  if (has_stime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->stime(), output);
  }
  
}

int LogRequest_GoodsLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chID = 1;
    if (has_chid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chid());
    }
    
    // optional .message.LogRequest.BuyType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 goodsID = 3;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsid());
    }
    
    // optional int32 buySize = 4;
    if (has_buysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buysize());
    }
    
    // optional .message.LogRequest.BuyState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string buyTime = 6;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buytime());
    }
    
    // optional string sTime = 7;
    if (has_stime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stime());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRequest_GoodsLog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogRequest_GoodsLog*>(&from));
}

void LogRequest_GoodsLog::MergeFrom(const LogRequest_GoodsLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chid()) {
      set_chid(from.chid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_buysize()) {
      set_buysize(from.buysize());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
    if (from.has_stime()) {
      set_stime(from.stime());
    }
  }
}

void LogRequest_GoodsLog::CopyFrom(const LogRequest_GoodsLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest_GoodsLog::IsInitialized() const {
  
  return true;
}

void LogRequest_GoodsLog::Swap(LogRequest_GoodsLog* other) {
  if (other != this) {
    std::swap(chid_, other->chid_);
    std::swap(type_, other->type_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(buysize_, other->buysize_);
    std::swap(state_, other->state_);
    std::swap(buytime_, other->buytime_);
    std::swap(stime_, other->stime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogRequest_GoodsLog::GetTypeName() const {
  return "message.LogRequest.GoodsLog";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogRequest::kUserLogsFieldNumber;
const int LogRequest::kTerminalLogsFieldNumber;
const int LogRequest::kGoodsLogFieldNumber;
#endif  // !_MSC_VER

LogRequest::LogRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogRequest::InitAsDefaultInstance() {
  terminallogs_ = const_cast< ::message::LogRequest_TerminalLog*>(&::message::LogRequest_TerminalLog::default_instance());
}

LogRequest::LogRequest(const LogRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogRequest::SharedCtor() {
  _cached_size_ = 0;
  terminallogs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRequest::~LogRequest() {
  SharedDtor();
}

void LogRequest::SharedDtor() {
  if (this != default_instance_) {
    delete terminallogs_;
  }
}

void LogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogRequest& LogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameLog_2eproto();  return *default_instance_;
}

LogRequest* LogRequest::default_instance_ = NULL;

LogRequest* LogRequest::New() const {
  return new LogRequest;
}

void LogRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_terminallogs()) {
      if (terminallogs_ != NULL) terminallogs_->::message::LogRequest_TerminalLog::Clear();
    }
  }
  userlogs_.Clear();
  goodslog_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.LogRequest.UserLog userLogs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userLogs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlogs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userLogs;
        if (input->ExpectTag(18)) goto parse_terminalLogs;
        break;
      }
      
      // optional .message.LogRequest.TerminalLog terminalLogs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_terminalLogs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terminallogs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goodsLog;
        break;
      }
      
      // repeated .message.LogRequest.GoodsLog goodsLog = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodsLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodslog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goodsLog;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.LogRequest.UserLog userLogs = 1;
  for (int i = 0; i < this->userlogs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->userlogs(i), output);
  }
  
  // optional .message.LogRequest.TerminalLog terminalLogs = 2;
  if (has_terminallogs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->terminallogs(), output);
  }
  
  // repeated .message.LogRequest.GoodsLog goodsLog = 3;
  for (int i = 0; i < this->goodslog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->goodslog(i), output);
  }
  
}

int LogRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .message.LogRequest.TerminalLog terminalLogs = 2;
    if (has_terminallogs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->terminallogs());
    }
    
  }
  // repeated .message.LogRequest.UserLog userLogs = 1;
  total_size += 1 * this->userlogs_size();
  for (int i = 0; i < this->userlogs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlogs(i));
  }
  
  // repeated .message.LogRequest.GoodsLog goodsLog = 3;
  total_size += 1 * this->goodslog_size();
  for (int i = 0; i < this->goodslog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodslog(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogRequest*>(&from));
}

void LogRequest::MergeFrom(const LogRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlogs_.MergeFrom(from.userlogs_);
  goodslog_.MergeFrom(from.goodslog_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_terminallogs()) {
      mutable_terminallogs()->::message::LogRequest_TerminalLog::MergeFrom(from.terminallogs());
    }
  }
}

void LogRequest::CopyFrom(const LogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest::IsInitialized() const {
  
  return true;
}

void LogRequest::Swap(LogRequest* other) {
  if (other != this) {
    userlogs_.Swap(&other->userlogs_);
    std::swap(terminallogs_, other->terminallogs_);
    goodslog_.Swap(&other->goodslog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogRequest::GetTypeName() const {
  return "message.LogRequest";
}


// ===================================================================

bool LogResponse_ResultStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogResponse_ResultStatus LogResponse::OK;
const LogResponse_ResultStatus LogResponse::FAIL;
const LogResponse_ResultStatus LogResponse::ResultStatus_MIN;
const LogResponse_ResultStatus LogResponse::ResultStatus_MAX;
const int LogResponse::ResultStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

LogResponse::LogResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogResponse::InitAsDefaultInstance() {
}

LogResponse::LogResponse(const LogResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogResponse::~LogResponse() {
  SharedDtor();
}

void LogResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogResponse& LogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameLog_2eproto();  return *default_instance_;
}

LogResponse* LogResponse::default_instance_ = NULL;

LogResponse* LogResponse::New() const {
  return new LogResponse;
}

void LogResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.LogResponse.ResultStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::LogResponse_ResultStatus_IsValid(value)) {
            set_status(static_cast< ::message::LogResponse_ResultStatus >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .message.LogResponse.ResultStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
}

int LogResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message.LogResponse.ResultStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogResponse*>(&from));
}

void LogResponse::MergeFrom(const LogResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void LogResponse::CopyFrom(const LogResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LogResponse::Swap(LogResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogResponse::GetTypeName() const {
  return "message.LogResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
