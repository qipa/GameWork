// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SearchWeeklyScore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_SearchWeeklyScore_2eproto() {
  delete SearchWeeklyScoreRequest::default_instance_;
  delete SearchWeeklyScoreResponse::default_instance_;
  delete SearchWeeklyScoreResponse_WeeklyScore::default_instance_;
}

void protobuf_AddDesc_SearchWeeklyScore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  SearchWeeklyScoreRequest::default_instance_ = new SearchWeeklyScoreRequest();
  SearchWeeklyScoreResponse::default_instance_ = new SearchWeeklyScoreResponse();
  SearchWeeklyScoreResponse_WeeklyScore::default_instance_ = new SearchWeeklyScoreResponse_WeeklyScore();
  SearchWeeklyScoreRequest::default_instance_->InitAsDefaultInstance();
  SearchWeeklyScoreResponse::default_instance_->InitAsDefaultInstance();
  SearchWeeklyScoreResponse_WeeklyScore::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SearchWeeklyScore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SearchWeeklyScore_2eproto {
  StaticDescriptorInitializer_SearchWeeklyScore_2eproto() {
    protobuf_AddDesc_SearchWeeklyScore_2eproto();
  }
} static_descriptor_initializer_SearchWeeklyScore_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SearchWeeklyScoreRequest::SearchWeeklyScoreRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SearchWeeklyScoreRequest::InitAsDefaultInstance() {
}

SearchWeeklyScoreRequest::SearchWeeklyScoreRequest(const SearchWeeklyScoreRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SearchWeeklyScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchWeeklyScoreRequest::~SearchWeeklyScoreRequest() {
  SharedDtor();
}

void SearchWeeklyScoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchWeeklyScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchWeeklyScoreRequest& SearchWeeklyScoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SearchWeeklyScore_2eproto();  return *default_instance_;
}

SearchWeeklyScoreRequest* SearchWeeklyScoreRequest::default_instance_ = NULL;

SearchWeeklyScoreRequest* SearchWeeklyScoreRequest::New() const {
  return new SearchWeeklyScoreRequest;
}

void SearchWeeklyScoreRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SearchWeeklyScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void SearchWeeklyScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int SearchWeeklyScoreRequest::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchWeeklyScoreRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchWeeklyScoreRequest*>(&from));
}

void SearchWeeklyScoreRequest::MergeFrom(const SearchWeeklyScoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void SearchWeeklyScoreRequest::CopyFrom(const SearchWeeklyScoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchWeeklyScoreRequest::IsInitialized() const {
  
  return true;
}

void SearchWeeklyScoreRequest::Swap(SearchWeeklyScoreRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchWeeklyScoreRequest::GetTypeName() const {
  return "message.SearchWeeklyScoreRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchWeeklyScoreResponse_WeeklyScore::kIndexFieldNumber;
const int SearchWeeklyScoreResponse_WeeklyScore::kScoreFieldNumber;
#endif  // !_MSC_VER

SearchWeeklyScoreResponse_WeeklyScore::SearchWeeklyScoreResponse_WeeklyScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SearchWeeklyScoreResponse_WeeklyScore::InitAsDefaultInstance() {
}

SearchWeeklyScoreResponse_WeeklyScore::SearchWeeklyScoreResponse_WeeklyScore(const SearchWeeklyScoreResponse_WeeklyScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SearchWeeklyScoreResponse_WeeklyScore::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchWeeklyScoreResponse_WeeklyScore::~SearchWeeklyScoreResponse_WeeklyScore() {
  SharedDtor();
}

void SearchWeeklyScoreResponse_WeeklyScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchWeeklyScoreResponse_WeeklyScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchWeeklyScoreResponse_WeeklyScore& SearchWeeklyScoreResponse_WeeklyScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SearchWeeklyScore_2eproto();  return *default_instance_;
}

SearchWeeklyScoreResponse_WeeklyScore* SearchWeeklyScoreResponse_WeeklyScore::default_instance_ = NULL;

SearchWeeklyScoreResponse_WeeklyScore* SearchWeeklyScoreResponse_WeeklyScore::New() const {
  return new SearchWeeklyScoreResponse_WeeklyScore;
}

void SearchWeeklyScoreResponse_WeeklyScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SearchWeeklyScoreResponse_WeeklyScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchWeeklyScoreResponse_WeeklyScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }
  
}

int SearchWeeklyScoreResponse_WeeklyScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchWeeklyScoreResponse_WeeklyScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchWeeklyScoreResponse_WeeklyScore*>(&from));
}

void SearchWeeklyScoreResponse_WeeklyScore::MergeFrom(const SearchWeeklyScoreResponse_WeeklyScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void SearchWeeklyScoreResponse_WeeklyScore::CopyFrom(const SearchWeeklyScoreResponse_WeeklyScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchWeeklyScoreResponse_WeeklyScore::IsInitialized() const {
  
  return true;
}

void SearchWeeklyScoreResponse_WeeklyScore::Swap(SearchWeeklyScoreResponse_WeeklyScore* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchWeeklyScoreResponse_WeeklyScore::GetTypeName() const {
  return "message.SearchWeeklyScoreResponse.WeeklyScore";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SearchWeeklyScoreResponse::kWeeklyScoreFieldNumber;
#endif  // !_MSC_VER

SearchWeeklyScoreResponse::SearchWeeklyScoreResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SearchWeeklyScoreResponse::InitAsDefaultInstance() {
}

SearchWeeklyScoreResponse::SearchWeeklyScoreResponse(const SearchWeeklyScoreResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SearchWeeklyScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchWeeklyScoreResponse::~SearchWeeklyScoreResponse() {
  SharedDtor();
}

void SearchWeeklyScoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchWeeklyScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchWeeklyScoreResponse& SearchWeeklyScoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SearchWeeklyScore_2eproto();  return *default_instance_;
}

SearchWeeklyScoreResponse* SearchWeeklyScoreResponse::default_instance_ = NULL;

SearchWeeklyScoreResponse* SearchWeeklyScoreResponse::New() const {
  return new SearchWeeklyScoreResponse;
}

void SearchWeeklyScoreResponse::Clear() {
  weeklyscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SearchWeeklyScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.SearchWeeklyScoreResponse.WeeklyScore weeklyScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weeklyScore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weeklyscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_weeklyScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchWeeklyScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.SearchWeeklyScoreResponse.WeeklyScore weeklyScore = 1;
  for (int i = 0; i < this->weeklyscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->weeklyscore(i), output);
  }
  
}

int SearchWeeklyScoreResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .message.SearchWeeklyScoreResponse.WeeklyScore weeklyScore = 1;
  total_size += 1 * this->weeklyscore_size();
  for (int i = 0; i < this->weeklyscore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weeklyscore(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchWeeklyScoreResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchWeeklyScoreResponse*>(&from));
}

void SearchWeeklyScoreResponse::MergeFrom(const SearchWeeklyScoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  weeklyscore_.MergeFrom(from.weeklyscore_);
}

void SearchWeeklyScoreResponse::CopyFrom(const SearchWeeklyScoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchWeeklyScoreResponse::IsInitialized() const {
  
  return true;
}

void SearchWeeklyScoreResponse::Swap(SearchWeeklyScoreResponse* other) {
  if (other != this) {
    weeklyscore_.Swap(&other->weeklyscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchWeeklyScoreResponse::GetTypeName() const {
  return "message.SearchWeeklyScoreResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
