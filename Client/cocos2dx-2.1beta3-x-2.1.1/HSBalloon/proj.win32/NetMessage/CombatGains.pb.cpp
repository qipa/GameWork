// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CombatGains.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_CombatGains_2eproto() {
  delete CombatGainsRequest::default_instance_;
  delete CombatGainsResponse::default_instance_;
}

void protobuf_AddDesc_CombatGains_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  CombatGainsRequest::default_instance_ = new CombatGainsRequest();
  CombatGainsResponse::default_instance_ = new CombatGainsResponse();
  CombatGainsRequest::default_instance_->InitAsDefaultInstance();
  CombatGainsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CombatGains_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CombatGains_2eproto {
  StaticDescriptorInitializer_CombatGains_2eproto() {
    protobuf_AddDesc_CombatGains_2eproto();
  }
} static_descriptor_initializer_CombatGains_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CombatGainsRequest::kScoreFieldNumber;
#endif  // !_MSC_VER

CombatGainsRequest::CombatGainsRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CombatGainsRequest::InitAsDefaultInstance() {
}

CombatGainsRequest::CombatGainsRequest(const CombatGainsRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CombatGainsRequest::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatGainsRequest::~CombatGainsRequest() {
  SharedDtor();
}

void CombatGainsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatGainsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CombatGainsRequest& CombatGainsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombatGains_2eproto();  return *default_instance_;
}

CombatGainsRequest* CombatGainsRequest::default_instance_ = NULL;

CombatGainsRequest* CombatGainsRequest::New() const {
  return new CombatGainsRequest;
}

void CombatGainsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CombatGainsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatGainsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }
  
}

int CombatGainsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatGainsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CombatGainsRequest*>(&from));
}

void CombatGainsRequest::MergeFrom(const CombatGainsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void CombatGainsRequest::CopyFrom(const CombatGainsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatGainsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CombatGainsRequest::Swap(CombatGainsRequest* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CombatGainsRequest::GetTypeName() const {
  return "message.CombatGainsRequest";
}


// ===================================================================

bool CombatGainsResponse_CombatGainsStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CombatGainsResponse_CombatGainsStatus CombatGainsResponse::CombatGainsStatus_OK;
const CombatGainsResponse_CombatGainsStatus CombatGainsResponse::CombatGainsStatus_FAIL;
const CombatGainsResponse_CombatGainsStatus CombatGainsResponse::CombatGainsStatus_MIN;
const CombatGainsResponse_CombatGainsStatus CombatGainsResponse::CombatGainsStatus_MAX;
const int CombatGainsResponse::CombatGainsStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CombatGainsResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

CombatGainsResponse::CombatGainsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CombatGainsResponse::InitAsDefaultInstance() {
}

CombatGainsResponse::CombatGainsResponse(const CombatGainsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CombatGainsResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatGainsResponse::~CombatGainsResponse() {
  SharedDtor();
}

void CombatGainsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatGainsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CombatGainsResponse& CombatGainsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombatGains_2eproto();  return *default_instance_;
}

CombatGainsResponse* CombatGainsResponse::default_instance_ = NULL;

CombatGainsResponse* CombatGainsResponse::New() const {
  return new CombatGainsResponse;
}

void CombatGainsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CombatGainsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.CombatGainsResponse.CombatGainsStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::CombatGainsResponse_CombatGainsStatus_IsValid(value)) {
            set_status(static_cast< ::message::CombatGainsResponse_CombatGainsStatus >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatGainsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .message.CombatGainsResponse.CombatGainsStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
}

int CombatGainsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message.CombatGainsResponse.CombatGainsStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatGainsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CombatGainsResponse*>(&from));
}

void CombatGainsResponse::MergeFrom(const CombatGainsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void CombatGainsResponse::CopyFrom(const CombatGainsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatGainsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CombatGainsResponse::Swap(CombatGainsResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CombatGainsResponse::GetTypeName() const {
  return "message.CombatGainsResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
