// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SearchRank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_SearchRank_2eproto() {
  delete SearchRankRequest::default_instance_;
  delete SearchRankResponse::default_instance_;
  delete SearchRankResponse_UserRank::default_instance_;
}

void protobuf_AddDesc_SearchRank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  SearchRankRequest::default_instance_ = new SearchRankRequest();
  SearchRankResponse::default_instance_ = new SearchRankResponse();
  SearchRankResponse_UserRank::default_instance_ = new SearchRankResponse_UserRank();
  SearchRankRequest::default_instance_->InitAsDefaultInstance();
  SearchRankResponse::default_instance_->InitAsDefaultInstance();
  SearchRankResponse_UserRank::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SearchRank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SearchRank_2eproto {
  StaticDescriptorInitializer_SearchRank_2eproto() {
    protobuf_AddDesc_SearchRank_2eproto();
  }
} static_descriptor_initializer_SearchRank_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SearchRankRequest::SearchRankRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SearchRankRequest::InitAsDefaultInstance() {
}

SearchRankRequest::SearchRankRequest(const SearchRankRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SearchRankRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchRankRequest::~SearchRankRequest() {
  SharedDtor();
}

void SearchRankRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchRankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchRankRequest& SearchRankRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SearchRank_2eproto();  return *default_instance_;
}

SearchRankRequest* SearchRankRequest::default_instance_ = NULL;

SearchRankRequest* SearchRankRequest::New() const {
  return new SearchRankRequest;
}

void SearchRankRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SearchRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void SearchRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int SearchRankRequest::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRankRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchRankRequest*>(&from));
}

void SearchRankRequest::MergeFrom(const SearchRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void SearchRankRequest::CopyFrom(const SearchRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRankRequest::IsInitialized() const {
  
  return true;
}

void SearchRankRequest::Swap(SearchRankRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchRankRequest::GetTypeName() const {
  return "message.SearchRankRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchRankResponse_UserRank::kUserNameFieldNumber;
const int SearchRankResponse_UserRank::kRankFieldNumber;
const int SearchRankResponse_UserRank::kRankChangeFieldNumber;
const int SearchRankResponse_UserRank::kScoreFieldNumber;
#endif  // !_MSC_VER

SearchRankResponse_UserRank::SearchRankResponse_UserRank()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SearchRankResponse_UserRank::InitAsDefaultInstance() {
}

SearchRankResponse_UserRank::SearchRankResponse_UserRank(const SearchRankResponse_UserRank& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SearchRankResponse_UserRank::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0u;
  rankchange_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchRankResponse_UserRank::~SearchRankResponse_UserRank() {
  SharedDtor();
}

void SearchRankResponse_UserRank::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void SearchRankResponse_UserRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchRankResponse_UserRank& SearchRankResponse_UserRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SearchRank_2eproto();  return *default_instance_;
}

SearchRankResponse_UserRank* SearchRankResponse_UserRank::default_instance_ = NULL;

SearchRankResponse_UserRank* SearchRankResponse_UserRank::New() const {
  return new SearchRankResponse_UserRank;
}

void SearchRankResponse_UserRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    rank_ = 0u;
    rankchange_ = 0;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SearchRankResponse_UserRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankChange;
        break;
      }
      
      // optional int32 rankChange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankchange_)));
          set_has_rankchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchRankResponse_UserRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }
  
  // optional int32 rankChange = 3;
  if (has_rankchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rankchange(), output);
  }
  
  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }
  
}

int SearchRankResponse_UserRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // optional int32 rankChange = 3;
    if (has_rankchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankchange());
    }
    
    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRankResponse_UserRank::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchRankResponse_UserRank*>(&from));
}

void SearchRankResponse_UserRank::MergeFrom(const SearchRankResponse_UserRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rankchange()) {
      set_rankchange(from.rankchange());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void SearchRankResponse_UserRank::CopyFrom(const SearchRankResponse_UserRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRankResponse_UserRank::IsInitialized() const {
  
  return true;
}

void SearchRankResponse_UserRank::Swap(SearchRankResponse_UserRank* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(rank_, other->rank_);
    std::swap(rankchange_, other->rankchange_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchRankResponse_UserRank::GetTypeName() const {
  return "message.SearchRankResponse.UserRank";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SearchRankResponse::kUserTopRanksFieldNumber;
const int SearchRankResponse::kUserSelfRanksFieldNumber;
const int SearchRankResponse::kSelfRankFieldNumber;
#endif  // !_MSC_VER

SearchRankResponse::SearchRankResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SearchRankResponse::InitAsDefaultInstance() {
}

SearchRankResponse::SearchRankResponse(const SearchRankResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SearchRankResponse::SharedCtor() {
  _cached_size_ = 0;
  selfrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchRankResponse::~SearchRankResponse() {
  SharedDtor();
}

void SearchRankResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchRankResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchRankResponse& SearchRankResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SearchRank_2eproto();  return *default_instance_;
}

SearchRankResponse* SearchRankResponse::default_instance_ = NULL;

SearchRankResponse* SearchRankResponse::New() const {
  return new SearchRankResponse;
}

void SearchRankResponse::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    selfrank_ = 0u;
  }
  usertopranks_.Clear();
  userselfranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SearchRankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.SearchRankResponse.UserRank userTopRanks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userTopRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usertopranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userTopRanks;
        if (input->ExpectTag(18)) goto parse_userSelfRanks;
        break;
      }
      
      // repeated .message.SearchRankResponse.UserRank userSelfRanks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userSelfRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userselfranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userSelfRanks;
        if (input->ExpectTag(24)) goto parse_selfRank;
        break;
      }
      
      // optional uint32 selfRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchRankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.SearchRankResponse.UserRank userTopRanks = 1;
  for (int i = 0; i < this->usertopranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->usertopranks(i), output);
  }
  
  // repeated .message.SearchRankResponse.UserRank userSelfRanks = 2;
  for (int i = 0; i < this->userselfranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->userselfranks(i), output);
  }
  
  // optional uint32 selfRank = 3;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selfrank(), output);
  }
  
}

int SearchRankResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 selfRank = 3;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfrank());
    }
    
  }
  // repeated .message.SearchRankResponse.UserRank userTopRanks = 1;
  total_size += 1 * this->usertopranks_size();
  for (int i = 0; i < this->usertopranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usertopranks(i));
  }
  
  // repeated .message.SearchRankResponse.UserRank userSelfRanks = 2;
  total_size += 1 * this->userselfranks_size();
  for (int i = 0; i < this->userselfranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userselfranks(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRankResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchRankResponse*>(&from));
}

void SearchRankResponse::MergeFrom(const SearchRankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  usertopranks_.MergeFrom(from.usertopranks_);
  userselfranks_.MergeFrom(from.userselfranks_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
  }
}

void SearchRankResponse::CopyFrom(const SearchRankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRankResponse::IsInitialized() const {
  
  return true;
}

void SearchRankResponse::Swap(SearchRankResponse* other) {
  if (other != this) {
    usertopranks_.Swap(&other->usertopranks_);
    userselfranks_.Swap(&other->userselfranks_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchRankResponse::GetTypeName() const {
  return "message.SearchRankResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
