// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameCacheData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_GameCacheData_2eproto() {
  delete GameCacheData::default_instance_;
  delete GameCacheData_DayScore::default_instance_;
  delete GameCacheData_WorldRankData::default_instance_;
  delete GameCacheData_WeekRankData::default_instance_;
  delete GameCacheData_PropCacheData::default_instance_;
  delete GameCacheData_PropCache::default_instance_;
}

void protobuf_AddDesc_GameCacheData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::message::protobuf_AddDesc_PropInfo_2eproto();
  ::message::protobuf_AddDesc_SearchRank_2eproto();
  ::message::protobuf_AddDesc_SearchWeeklyScore_2eproto();
  GameCacheData::default_instance_ = new GameCacheData();
  GameCacheData_DayScore::default_instance_ = new GameCacheData_DayScore();
  GameCacheData_WorldRankData::default_instance_ = new GameCacheData_WorldRankData();
  GameCacheData_WeekRankData::default_instance_ = new GameCacheData_WeekRankData();
  GameCacheData_PropCacheData::default_instance_ = new GameCacheData_PropCacheData();
  GameCacheData_PropCache::default_instance_ = new GameCacheData_PropCache();
  GameCacheData::default_instance_->InitAsDefaultInstance();
  GameCacheData_DayScore::default_instance_->InitAsDefaultInstance();
  GameCacheData_WorldRankData::default_instance_->InitAsDefaultInstance();
  GameCacheData_WeekRankData::default_instance_->InitAsDefaultInstance();
  GameCacheData_PropCacheData::default_instance_->InitAsDefaultInstance();
  GameCacheData_PropCache::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameCacheData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameCacheData_2eproto {
  StaticDescriptorInitializer_GameCacheData_2eproto() {
    protobuf_AddDesc_GameCacheData_2eproto();
  }
} static_descriptor_initializer_GameCacheData_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GameCacheData_DayScore::kKeyFieldNumber;
const int GameCacheData_DayScore::kScoreFieldNumber;
#endif  // !_MSC_VER

GameCacheData_DayScore::GameCacheData_DayScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameCacheData_DayScore::InitAsDefaultInstance() {
}

GameCacheData_DayScore::GameCacheData_DayScore(const GameCacheData_DayScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameCacheData_DayScore::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  score_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameCacheData_DayScore::~GameCacheData_DayScore() {
  SharedDtor();
}

void GameCacheData_DayScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameCacheData_DayScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameCacheData_DayScore& GameCacheData_DayScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameCacheData_2eproto();  return *default_instance_;
}

GameCacheData_DayScore* GameCacheData_DayScore::default_instance_ = NULL;

GameCacheData_DayScore* GameCacheData_DayScore::New() const {
  return new GameCacheData_DayScore;
}

void GameCacheData_DayScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    score_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameCacheData_DayScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // required uint64 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameCacheData_DayScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }
  
  // required uint64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->score(), output);
  }
  
}

int GameCacheData_DayScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }
    
    // required uint64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCacheData_DayScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameCacheData_DayScore*>(&from));
}

void GameCacheData_DayScore::MergeFrom(const GameCacheData_DayScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void GameCacheData_DayScore::CopyFrom(const GameCacheData_DayScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCacheData_DayScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameCacheData_DayScore::Swap(GameCacheData_DayScore* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameCacheData_DayScore::GetTypeName() const {
  return "message.GameCacheData.DayScore";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameCacheData_WorldRankData::kKeyFieldNumber;
const int GameCacheData_WorldRankData::kDataFieldNumber;
#endif  // !_MSC_VER

GameCacheData_WorldRankData::GameCacheData_WorldRankData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameCacheData_WorldRankData::InitAsDefaultInstance() {
  data_ = const_cast< ::message::SearchRankResponse*>(&::message::SearchRankResponse::default_instance());
}

GameCacheData_WorldRankData::GameCacheData_WorldRankData(const GameCacheData_WorldRankData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameCacheData_WorldRankData::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameCacheData_WorldRankData::~GameCacheData_WorldRankData() {
  SharedDtor();
}

void GameCacheData_WorldRankData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GameCacheData_WorldRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameCacheData_WorldRankData& GameCacheData_WorldRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameCacheData_2eproto();  return *default_instance_;
}

GameCacheData_WorldRankData* GameCacheData_WorldRankData::default_instance_ = NULL;

GameCacheData_WorldRankData* GameCacheData_WorldRankData::New() const {
  return new GameCacheData_WorldRankData;
}

void GameCacheData_WorldRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::message::SearchRankResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameCacheData_WorldRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required .message.SearchRankResponse data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameCacheData_WorldRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }
  
  // required .message.SearchRankResponse data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->data(), output);
  }
  
}

int GameCacheData_WorldRankData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }
    
    // required .message.SearchRankResponse data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCacheData_WorldRankData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameCacheData_WorldRankData*>(&from));
}

void GameCacheData_WorldRankData::MergeFrom(const GameCacheData_WorldRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_data()) {
      mutable_data()->::message::SearchRankResponse::MergeFrom(from.data());
    }
  }
}

void GameCacheData_WorldRankData::CopyFrom(const GameCacheData_WorldRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCacheData_WorldRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameCacheData_WorldRankData::Swap(GameCacheData_WorldRankData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameCacheData_WorldRankData::GetTypeName() const {
  return "message.GameCacheData.WorldRankData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameCacheData_WeekRankData::kKeyFieldNumber;
const int GameCacheData_WeekRankData::kDataFieldNumber;
#endif  // !_MSC_VER

GameCacheData_WeekRankData::GameCacheData_WeekRankData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameCacheData_WeekRankData::InitAsDefaultInstance() {
  data_ = const_cast< ::message::SearchWeeklyScoreResponse*>(&::message::SearchWeeklyScoreResponse::default_instance());
}

GameCacheData_WeekRankData::GameCacheData_WeekRankData(const GameCacheData_WeekRankData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameCacheData_WeekRankData::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameCacheData_WeekRankData::~GameCacheData_WeekRankData() {
  SharedDtor();
}

void GameCacheData_WeekRankData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GameCacheData_WeekRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameCacheData_WeekRankData& GameCacheData_WeekRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameCacheData_2eproto();  return *default_instance_;
}

GameCacheData_WeekRankData* GameCacheData_WeekRankData::default_instance_ = NULL;

GameCacheData_WeekRankData* GameCacheData_WeekRankData::New() const {
  return new GameCacheData_WeekRankData;
}

void GameCacheData_WeekRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::message::SearchWeeklyScoreResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameCacheData_WeekRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required .message.SearchWeeklyScoreResponse data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameCacheData_WeekRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }
  
  // required .message.SearchWeeklyScoreResponse data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->data(), output);
  }
  
}

int GameCacheData_WeekRankData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }
    
    // required .message.SearchWeeklyScoreResponse data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCacheData_WeekRankData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameCacheData_WeekRankData*>(&from));
}

void GameCacheData_WeekRankData::MergeFrom(const GameCacheData_WeekRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_data()) {
      mutable_data()->::message::SearchWeeklyScoreResponse::MergeFrom(from.data());
    }
  }
}

void GameCacheData_WeekRankData::CopyFrom(const GameCacheData_WeekRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCacheData_WeekRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameCacheData_WeekRankData::Swap(GameCacheData_WeekRankData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameCacheData_WeekRankData::GetTypeName() const {
  return "message.GameCacheData.WeekRankData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameCacheData_PropCacheData::kLastTimeFieldNumber;
const int GameCacheData_PropCacheData::kPropIndexFieldNumber;
const int GameCacheData_PropCacheData::kPropcacheFieldNumber;
#endif  // !_MSC_VER

GameCacheData_PropCacheData::GameCacheData_PropCacheData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameCacheData_PropCacheData::InitAsDefaultInstance() {
}

GameCacheData_PropCacheData::GameCacheData_PropCacheData(const GameCacheData_PropCacheData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameCacheData_PropCacheData::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_ULONGLONG(0);
  propindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameCacheData_PropCacheData::~GameCacheData_PropCacheData() {
  SharedDtor();
}

void GameCacheData_PropCacheData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameCacheData_PropCacheData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameCacheData_PropCacheData& GameCacheData_PropCacheData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameCacheData_2eproto();  return *default_instance_;
}

GameCacheData_PropCacheData* GameCacheData_PropCacheData::default_instance_ = NULL;

GameCacheData_PropCacheData* GameCacheData_PropCacheData::New() const {
  return new GameCacheData_PropCacheData;
}

void GameCacheData_PropCacheData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lasttime_ = GOOGLE_ULONGLONG(0);
    propindex_ = 0u;
  }
  propcache_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameCacheData_PropCacheData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lastTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propIndex;
        break;
      }
      
      // optional uint32 propIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propindex_)));
          set_has_propindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_propcache;
        break;
      }
      
      // repeated .message.GameCacheData.PropCache propcache = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propcache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propcache()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_propcache;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameCacheData_PropCacheData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 lastTime = 1;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lasttime(), output);
  }
  
  // optional uint32 propIndex = 2;
  if (has_propindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propindex(), output);
  }
  
  // repeated .message.GameCacheData.PropCache propcache = 3;
  for (int i = 0; i < this->propcache_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->propcache(i), output);
  }
  
}

int GameCacheData_PropCacheData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lastTime = 1;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }
    
    // optional uint32 propIndex = 2;
    if (has_propindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propindex());
    }
    
  }
  // repeated .message.GameCacheData.PropCache propcache = 3;
  total_size += 1 * this->propcache_size();
  for (int i = 0; i < this->propcache_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propcache(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCacheData_PropCacheData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameCacheData_PropCacheData*>(&from));
}

void GameCacheData_PropCacheData::MergeFrom(const GameCacheData_PropCacheData& from) {
  GOOGLE_CHECK_NE(&from, this);
  propcache_.MergeFrom(from.propcache_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_propindex()) {
      set_propindex(from.propindex());
    }
  }
}

void GameCacheData_PropCacheData::CopyFrom(const GameCacheData_PropCacheData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCacheData_PropCacheData::IsInitialized() const {
  
  return true;
}

void GameCacheData_PropCacheData::Swap(GameCacheData_PropCacheData* other) {
  if (other != this) {
    std::swap(lasttime_, other->lasttime_);
    std::swap(propindex_, other->propindex_);
    propcache_.Swap(&other->propcache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameCacheData_PropCacheData::GetTypeName() const {
  return "message.GameCacheData.PropCacheData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameCacheData_PropCache::kNumberFieldNumber;
const int GameCacheData_PropCache::kUseFrequencyFieldNumber;
const int GameCacheData_PropCache::kLevelFieldNumber;
#endif  // !_MSC_VER

GameCacheData_PropCache::GameCacheData_PropCache()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameCacheData_PropCache::InitAsDefaultInstance() {
}

GameCacheData_PropCache::GameCacheData_PropCache(const GameCacheData_PropCache& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameCacheData_PropCache::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  usefrequency_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameCacheData_PropCache::~GameCacheData_PropCache() {
  SharedDtor();
}

void GameCacheData_PropCache::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameCacheData_PropCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameCacheData_PropCache& GameCacheData_PropCache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameCacheData_2eproto();  return *default_instance_;
}

GameCacheData_PropCache* GameCacheData_PropCache::default_instance_ = NULL;

GameCacheData_PropCache* GameCacheData_PropCache::New() const {
  return new GameCacheData_PropCache;
}

void GameCacheData_PropCache::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
    usefrequency_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameCacheData_PropCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useFrequency;
        break;
      }
      
      // optional uint32 useFrequency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useFrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usefrequency_)));
          set_has_usefrequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameCacheData_PropCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }
  
  // optional uint32 useFrequency = 2;
  if (has_usefrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usefrequency(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
}

int GameCacheData_PropCache::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }
    
    // optional uint32 useFrequency = 2;
    if (has_usefrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usefrequency());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCacheData_PropCache::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameCacheData_PropCache*>(&from));
}

void GameCacheData_PropCache::MergeFrom(const GameCacheData_PropCache& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_usefrequency()) {
      set_usefrequency(from.usefrequency());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void GameCacheData_PropCache::CopyFrom(const GameCacheData_PropCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCacheData_PropCache::IsInitialized() const {
  
  return true;
}

void GameCacheData_PropCache::Swap(GameCacheData_PropCache* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(usefrequency_, other->usefrequency_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameCacheData_PropCache::GetTypeName() const {
  return "message.GameCacheData.PropCache";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameCacheData::kNameFieldNumber;
const int GameCacheData::kUUIDFieldNumber;
const int GameCacheData::kIMEIFieldNumber;
const int GameCacheData::kGoldFieldNumber;
const int GameCacheData::kUsePropListFieldNumber;
const int GameCacheData::kUseBackgroundIDFieldNumber;
const int GameCacheData::kBoughtBackgroundIDFieldNumber;
const int GameCacheData::kHistoryScoreListFieldNumber;
const int GameCacheData::kHistoryFiveHighestScoreListFieldNumber;
const int GameCacheData::kMaxHighestScoreFieldNumber;
const int GameCacheData::kIsBackgroundMusicFieldNumber;
const int GameCacheData::kIsSoundFieldNumber;
const int GameCacheData::kFiveDayScoreListFieldNumber;
const int GameCacheData::kWorldRankDataFieldNumber;
const int GameCacheData::kWeekRankDataFieldNumber;
const int GameCacheData::kIsSendDeviceInfoFieldNumber;
const int GameCacheData::kPropSlotLockFieldNumber;
const int GameCacheData::kLevelLockFieldNumber;
const int GameCacheData::kPropCacheDataFieldNumber;
const int GameCacheData::kIsRunGameGuideFieldNumber;
#endif  // !_MSC_VER

GameCacheData::GameCacheData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameCacheData::InitAsDefaultInstance() {
  worldrankdata_ = const_cast< ::message::GameCacheData_WorldRankData*>(&::message::GameCacheData_WorldRankData::default_instance());
  weekrankdata_ = const_cast< ::message::GameCacheData_WeekRankData*>(&::message::GameCacheData_WeekRankData::default_instance());
  propcachedata_ = const_cast< ::message::GameCacheData_PropCacheData*>(&::message::GameCacheData_PropCacheData::default_instance());
}

GameCacheData::GameCacheData(const GameCacheData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameCacheData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = 500;
  usebackgroundid_ = 2000u;
  maxhighestscore_ = 0u;
  isbackgroundmusic_ = true;
  issound_ = true;
  worldrankdata_ = NULL;
  weekrankdata_ = NULL;
  issenddeviceinfo_ = false;
  propcachedata_ = NULL;
  isrungameguide_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameCacheData::~GameCacheData() {
  SharedDtor();
}

void GameCacheData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (this != default_instance_) {
    delete worldrankdata_;
    delete weekrankdata_;
    delete propcachedata_;
  }
}

void GameCacheData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameCacheData& GameCacheData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameCacheData_2eproto();  return *default_instance_;
}

GameCacheData* GameCacheData::default_instance_ = NULL;

GameCacheData* GameCacheData::New() const {
  return new GameCacheData;
}

void GameCacheData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
    gold_ = 500;
    usebackgroundid_ = 2000u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    maxhighestscore_ = 0u;
    isbackgroundmusic_ = true;
    issound_ = true;
    if (has_worldrankdata()) {
      if (worldrankdata_ != NULL) worldrankdata_->::message::GameCacheData_WorldRankData::Clear();
    }
    if (has_weekrankdata()) {
      if (weekrankdata_ != NULL) weekrankdata_->::message::GameCacheData_WeekRankData::Clear();
    }
    issenddeviceinfo_ = false;
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (has_propcachedata()) {
      if (propcachedata_ != NULL) propcachedata_->::message::GameCacheData_PropCacheData::Clear();
    }
    isrungameguide_ = true;
  }
  useproplist_.Clear();
  boughtbackgroundid_.Clear();
  historyscorelist_.Clear();
  historyfivehighestscorelist_.Clear();
  fivedayscorelist_.Clear();
  propslotlock_.Clear();
  levellock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameCacheData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UUID;
        break;
      }
      
      // optional string UUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_IMEI;
        break;
      }
      
      // optional string IMEI = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IMEI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }
      
      // optional int32 gold = 4 [default = 500];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_usePropList;
        break;
      }
      
      // repeated .message.PropInfo usePropList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usePropList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_useproplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_usePropList;
        if (input->ExpectTag(56)) goto parse_useBackgroundID;
        break;
      }
      
      // optional uint32 useBackgroundID = 7 [default = 2000];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useBackgroundID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usebackgroundid_)));
          set_has_usebackgroundid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boughtBackgroundID;
        break;
      }
      
      // repeated uint32 boughtBackgroundID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boughtBackgroundID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_boughtbackgroundid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_boughtbackgroundid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boughtBackgroundID;
        if (input->ExpectTag(72)) goto parse_historyScoreList;
        break;
      }
      
      // repeated uint32 historyScoreList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyScoreList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_historyscorelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_historyscorelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_historyScoreList;
        if (input->ExpectTag(80)) goto parse_historyFiveHighestScoreList;
        break;
      }
      
      // repeated uint32 historyFiveHighestScoreList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyFiveHighestScoreList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_historyfivehighestscorelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_historyfivehighestscorelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_historyFiveHighestScoreList;
        if (input->ExpectTag(88)) goto parse_maxHighestScore;
        break;
      }
      
      // optional uint32 maxHighestScore = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHighestScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhighestscore_)));
          set_has_maxhighestscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isBackgroundMusic;
        break;
      }
      
      // optional bool isBackgroundMusic = 12 [default = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBackgroundMusic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbackgroundmusic_)));
          set_has_isbackgroundmusic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isSound;
        break;
      }
      
      // optional bool isSound = 13 [default = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issound_)));
          set_has_issound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fiveDayScoreList;
        break;
      }
      
      // repeated .message.GameCacheData.DayScore fiveDayScoreList = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fiveDayScoreList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fivedayscorelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fiveDayScoreList;
        if (input->ExpectTag(122)) goto parse_worldRankData;
        break;
      }
      
      // optional .message.GameCacheData.WorldRankData worldRankData = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldRankData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldrankdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_weekRankData;
        break;
      }
      
      // optional .message.GameCacheData.WeekRankData weekRankData = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekRankData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weekrankdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_isSendDeviceInfo;
        break;
      }
      
      // optional bool isSendDeviceInfo = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSendDeviceInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issenddeviceinfo_)));
          set_has_issenddeviceinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_propSlotLock;
        break;
      }
      
      // repeated bool propSlotLock = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propSlotLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 144, input, this->mutable_propslotlock())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_propslotlock())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_propSlotLock;
        if (input->ExpectTag(152)) goto parse_levelLock;
        break;
      }
      
      // repeated bool levelLock = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 152, input, this->mutable_levellock())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_levellock())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_levelLock;
        if (input->ExpectTag(162)) goto parse_propCacheData;
        break;
      }
      
      // optional .message.GameCacheData.PropCacheData propCacheData = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propCacheData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propcachedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_isRunGameGuide;
        break;
      }
      
      // optional bool isRunGameGuide = 21 [default = true];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRunGameGuide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrungameguide_)));
          set_has_isrungameguide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameCacheData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string UUID = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }
  
  // optional string IMEI = 3;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->imei(), output);
  }
  
  // optional int32 gold = 4 [default = 500];
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }
  
  // repeated .message.PropInfo usePropList = 5;
  for (int i = 0; i < this->useproplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->useproplist(i), output);
  }
  
  // optional uint32 useBackgroundID = 7 [default = 2000];
  if (has_usebackgroundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->usebackgroundid(), output);
  }
  
  // repeated uint32 boughtBackgroundID = 8;
  for (int i = 0; i < this->boughtbackgroundid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->boughtbackgroundid(i), output);
  }
  
  // repeated uint32 historyScoreList = 9;
  for (int i = 0; i < this->historyscorelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->historyscorelist(i), output);
  }
  
  // repeated uint32 historyFiveHighestScoreList = 10;
  for (int i = 0; i < this->historyfivehighestscorelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->historyfivehighestscorelist(i), output);
  }
  
  // optional uint32 maxHighestScore = 11 [default = 0];
  if (has_maxhighestscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->maxhighestscore(), output);
  }
  
  // optional bool isBackgroundMusic = 12 [default = true];
  if (has_isbackgroundmusic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isbackgroundmusic(), output);
  }
  
  // optional bool isSound = 13 [default = true];
  if (has_issound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->issound(), output);
  }
  
  // repeated .message.GameCacheData.DayScore fiveDayScoreList = 14;
  for (int i = 0; i < this->fivedayscorelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->fivedayscorelist(i), output);
  }
  
  // optional .message.GameCacheData.WorldRankData worldRankData = 15;
  if (has_worldrankdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->worldrankdata(), output);
  }
  
  // optional .message.GameCacheData.WeekRankData weekRankData = 16;
  if (has_weekrankdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->weekrankdata(), output);
  }
  
  // optional bool isSendDeviceInfo = 17 [default = false];
  if (has_issenddeviceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->issenddeviceinfo(), output);
  }
  
  // repeated bool propSlotLock = 18;
  for (int i = 0; i < this->propslotlock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      18, this->propslotlock(i), output);
  }
  
  // repeated bool levelLock = 19;
  for (int i = 0; i < this->levellock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      19, this->levellock(i), output);
  }
  
  // optional .message.GameCacheData.PropCacheData propCacheData = 20;
  if (has_propcachedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->propcachedata(), output);
  }
  
  // optional bool isRunGameGuide = 21 [default = true];
  if (has_isrungameguide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isrungameguide(), output);
  }
  
}

int GameCacheData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string UUID = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional string IMEI = 3;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }
    
    // optional int32 gold = 4 [default = 500];
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
    // optional uint32 useBackgroundID = 7 [default = 2000];
    if (has_usebackgroundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usebackgroundid());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 maxHighestScore = 11 [default = 0];
    if (has_maxhighestscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhighestscore());
    }
    
    // optional bool isBackgroundMusic = 12 [default = true];
    if (has_isbackgroundmusic()) {
      total_size += 1 + 1;
    }
    
    // optional bool isSound = 13 [default = true];
    if (has_issound()) {
      total_size += 1 + 1;
    }
    
    // optional .message.GameCacheData.WorldRankData worldRankData = 15;
    if (has_worldrankdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldrankdata());
    }
    
    // optional .message.GameCacheData.WeekRankData weekRankData = 16;
    if (has_weekrankdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weekrankdata());
    }
    
    // optional bool isSendDeviceInfo = 17 [default = false];
    if (has_issenddeviceinfo()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional .message.GameCacheData.PropCacheData propCacheData = 20;
    if (has_propcachedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propcachedata());
    }
    
    // optional bool isRunGameGuide = 21 [default = true];
    if (has_isrungameguide()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .message.PropInfo usePropList = 5;
  total_size += 1 * this->useproplist_size();
  for (int i = 0; i < this->useproplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->useproplist(i));
  }
  
  // repeated uint32 boughtBackgroundID = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->boughtbackgroundid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->boughtbackgroundid(i));
    }
    total_size += 1 * this->boughtbackgroundid_size() + data_size;
  }
  
  // repeated uint32 historyScoreList = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->historyscorelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->historyscorelist(i));
    }
    total_size += 1 * this->historyscorelist_size() + data_size;
  }
  
  // repeated uint32 historyFiveHighestScoreList = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->historyfivehighestscorelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->historyfivehighestscorelist(i));
    }
    total_size += 1 * this->historyfivehighestscorelist_size() + data_size;
  }
  
  // repeated .message.GameCacheData.DayScore fiveDayScoreList = 14;
  total_size += 1 * this->fivedayscorelist_size();
  for (int i = 0; i < this->fivedayscorelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fivedayscorelist(i));
  }
  
  // repeated bool propSlotLock = 18;
  {
    int data_size = 0;
    data_size = 1 * this->propslotlock_size();
    total_size += 2 * this->propslotlock_size() + data_size;
  }
  
  // repeated bool levelLock = 19;
  {
    int data_size = 0;
    data_size = 1 * this->levellock_size();
    total_size += 2 * this->levellock_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCacheData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameCacheData*>(&from));
}

void GameCacheData::MergeFrom(const GameCacheData& from) {
  GOOGLE_CHECK_NE(&from, this);
  useproplist_.MergeFrom(from.useproplist_);
  boughtbackgroundid_.MergeFrom(from.boughtbackgroundid_);
  historyscorelist_.MergeFrom(from.historyscorelist_);
  historyfivehighestscorelist_.MergeFrom(from.historyfivehighestscorelist_);
  fivedayscorelist_.MergeFrom(from.fivedayscorelist_);
  propslotlock_.MergeFrom(from.propslotlock_);
  levellock_.MergeFrom(from.levellock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_usebackgroundid()) {
      set_usebackgroundid(from.usebackgroundid());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_maxhighestscore()) {
      set_maxhighestscore(from.maxhighestscore());
    }
    if (from.has_isbackgroundmusic()) {
      set_isbackgroundmusic(from.isbackgroundmusic());
    }
    if (from.has_issound()) {
      set_issound(from.issound());
    }
    if (from.has_worldrankdata()) {
      mutable_worldrankdata()->::message::GameCacheData_WorldRankData::MergeFrom(from.worldrankdata());
    }
    if (from.has_weekrankdata()) {
      mutable_weekrankdata()->::message::GameCacheData_WeekRankData::MergeFrom(from.weekrankdata());
    }
    if (from.has_issenddeviceinfo()) {
      set_issenddeviceinfo(from.issenddeviceinfo());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_propcachedata()) {
      mutable_propcachedata()->::message::GameCacheData_PropCacheData::MergeFrom(from.propcachedata());
    }
    if (from.has_isrungameguide()) {
      set_isrungameguide(from.isrungameguide());
    }
  }
}

void GameCacheData::CopyFrom(const GameCacheData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCacheData::IsInitialized() const {
  
  for (int i = 0; i < useproplist_size(); i++) {
    if (!this->useproplist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fivedayscorelist_size(); i++) {
    if (!this->fivedayscorelist(i).IsInitialized()) return false;
  }
  if (has_worldrankdata()) {
    if (!this->worldrankdata().IsInitialized()) return false;
  }
  if (has_weekrankdata()) {
    if (!this->weekrankdata().IsInitialized()) return false;
  }
  return true;
}

void GameCacheData::Swap(GameCacheData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(uuid_, other->uuid_);
    std::swap(imei_, other->imei_);
    std::swap(gold_, other->gold_);
    useproplist_.Swap(&other->useproplist_);
    std::swap(usebackgroundid_, other->usebackgroundid_);
    boughtbackgroundid_.Swap(&other->boughtbackgroundid_);
    historyscorelist_.Swap(&other->historyscorelist_);
    historyfivehighestscorelist_.Swap(&other->historyfivehighestscorelist_);
    std::swap(maxhighestscore_, other->maxhighestscore_);
    std::swap(isbackgroundmusic_, other->isbackgroundmusic_);
    std::swap(issound_, other->issound_);
    fivedayscorelist_.Swap(&other->fivedayscorelist_);
    std::swap(worldrankdata_, other->worldrankdata_);
    std::swap(weekrankdata_, other->weekrankdata_);
    std::swap(issenddeviceinfo_, other->issenddeviceinfo_);
    propslotlock_.Swap(&other->propslotlock_);
    levellock_.Swap(&other->levellock_);
    std::swap(propcachedata_, other->propcachedata_);
    std::swap(isrungameguide_, other->isrungameguide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameCacheData::GetTypeName() const {
  return "message.GameCacheData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
