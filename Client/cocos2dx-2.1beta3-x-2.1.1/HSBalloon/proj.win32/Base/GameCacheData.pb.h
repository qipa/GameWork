// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameCacheData.proto

#ifndef PROTOBUF_GameCacheData_2eproto__INCLUDED
#define PROTOBUF_GameCacheData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "PropInfo.pb.h"
#include "SearchRank.pb.h"
#include "SearchWeeklyScore.pb.h"
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameCacheData_2eproto();
void protobuf_AssignDesc_GameCacheData_2eproto();
void protobuf_ShutdownFile_GameCacheData_2eproto();

class GameCacheData;
class GameCacheData_DayScore;
class GameCacheData_WorldRankData;
class GameCacheData_WeekRankData;
class GameCacheData_PropCacheData;
class GameCacheData_PropCache;

// ===================================================================

class GameCacheData_DayScore : public ::google::protobuf::MessageLite {
 public:
  GameCacheData_DayScore();
  virtual ~GameCacheData_DayScore();
  
  GameCacheData_DayScore(const GameCacheData_DayScore& from);
  
  inline GameCacheData_DayScore& operator=(const GameCacheData_DayScore& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const GameCacheData_DayScore& default_instance();
  
  void Swap(GameCacheData_DayScore* other);
  
  // implements Message ----------------------------------------------
  
  GameCacheData_DayScore* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GameCacheData_DayScore& from);
  void MergeFrom(const GameCacheData_DayScore& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);
  
  // required uint64 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint64 score() const;
  inline void set_score(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:message.GameCacheData.DayScore)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_score();
  inline void clear_has_score();
  
  ::google::protobuf::uint64 key_;
  ::google::protobuf::uint64 score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameCacheData_2eproto();
  friend void protobuf_AssignDesc_GameCacheData_2eproto();
  friend void protobuf_ShutdownFile_GameCacheData_2eproto();
  
  void InitAsDefaultInstance();
  static GameCacheData_DayScore* default_instance_;
};
// -------------------------------------------------------------------

class GameCacheData_WorldRankData : public ::google::protobuf::MessageLite {
 public:
  GameCacheData_WorldRankData();
  virtual ~GameCacheData_WorldRankData();
  
  GameCacheData_WorldRankData(const GameCacheData_WorldRankData& from);
  
  inline GameCacheData_WorldRankData& operator=(const GameCacheData_WorldRankData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const GameCacheData_WorldRankData& default_instance();
  
  void Swap(GameCacheData_WorldRankData* other);
  
  // implements Message ----------------------------------------------
  
  GameCacheData_WorldRankData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GameCacheData_WorldRankData& from);
  void MergeFrom(const GameCacheData_WorldRankData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);
  
  // required .message.SearchRankResponse data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::message::SearchRankResponse& data() const;
  inline ::message::SearchRankResponse* mutable_data();
  inline ::message::SearchRankResponse* release_data();
  
  // @@protoc_insertion_point(class_scope:message.GameCacheData.WorldRankData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::uint64 key_;
  ::message::SearchRankResponse* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameCacheData_2eproto();
  friend void protobuf_AssignDesc_GameCacheData_2eproto();
  friend void protobuf_ShutdownFile_GameCacheData_2eproto();
  
  void InitAsDefaultInstance();
  static GameCacheData_WorldRankData* default_instance_;
};
// -------------------------------------------------------------------

class GameCacheData_WeekRankData : public ::google::protobuf::MessageLite {
 public:
  GameCacheData_WeekRankData();
  virtual ~GameCacheData_WeekRankData();
  
  GameCacheData_WeekRankData(const GameCacheData_WeekRankData& from);
  
  inline GameCacheData_WeekRankData& operator=(const GameCacheData_WeekRankData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const GameCacheData_WeekRankData& default_instance();
  
  void Swap(GameCacheData_WeekRankData* other);
  
  // implements Message ----------------------------------------------
  
  GameCacheData_WeekRankData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GameCacheData_WeekRankData& from);
  void MergeFrom(const GameCacheData_WeekRankData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);
  
  // required .message.SearchWeeklyScoreResponse data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::message::SearchWeeklyScoreResponse& data() const;
  inline ::message::SearchWeeklyScoreResponse* mutable_data();
  inline ::message::SearchWeeklyScoreResponse* release_data();
  
  // @@protoc_insertion_point(class_scope:message.GameCacheData.WeekRankData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::uint64 key_;
  ::message::SearchWeeklyScoreResponse* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameCacheData_2eproto();
  friend void protobuf_AssignDesc_GameCacheData_2eproto();
  friend void protobuf_ShutdownFile_GameCacheData_2eproto();
  
  void InitAsDefaultInstance();
  static GameCacheData_WeekRankData* default_instance_;
};
// -------------------------------------------------------------------

class GameCacheData_PropCacheData : public ::google::protobuf::MessageLite {
 public:
  GameCacheData_PropCacheData();
  virtual ~GameCacheData_PropCacheData();
  
  GameCacheData_PropCacheData(const GameCacheData_PropCacheData& from);
  
  inline GameCacheData_PropCacheData& operator=(const GameCacheData_PropCacheData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const GameCacheData_PropCacheData& default_instance();
  
  void Swap(GameCacheData_PropCacheData* other);
  
  // implements Message ----------------------------------------------
  
  GameCacheData_PropCacheData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GameCacheData_PropCacheData& from);
  void MergeFrom(const GameCacheData_PropCacheData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 lastTime = 1;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 lasttime() const;
  inline void set_lasttime(::google::protobuf::uint64 value);
  
  // optional uint32 propIndex = 2;
  inline bool has_propindex() const;
  inline void clear_propindex();
  static const int kPropIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 propindex() const;
  inline void set_propindex(::google::protobuf::uint32 value);
  
  // repeated .message.GameCacheData.PropCache propcache = 3;
  inline int propcache_size() const;
  inline void clear_propcache();
  static const int kPropcacheFieldNumber = 3;
  inline const ::message::GameCacheData_PropCache& propcache(int index) const;
  inline ::message::GameCacheData_PropCache* mutable_propcache(int index);
  inline ::message::GameCacheData_PropCache* add_propcache();
  inline const ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_PropCache >&
      propcache() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_PropCache >*
      mutable_propcache();
  
  // @@protoc_insertion_point(class_scope:message.GameCacheData.PropCacheData)
 private:
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_propindex();
  inline void clear_has_propindex();
  
  ::google::protobuf::uint64 lasttime_;
  ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_PropCache > propcache_;
  ::google::protobuf::uint32 propindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameCacheData_2eproto();
  friend void protobuf_AssignDesc_GameCacheData_2eproto();
  friend void protobuf_ShutdownFile_GameCacheData_2eproto();
  
  void InitAsDefaultInstance();
  static GameCacheData_PropCacheData* default_instance_;
};
// -------------------------------------------------------------------

class GameCacheData_PropCache : public ::google::protobuf::MessageLite {
 public:
  GameCacheData_PropCache();
  virtual ~GameCacheData_PropCache();
  
  GameCacheData_PropCache(const GameCacheData_PropCache& from);
  
  inline GameCacheData_PropCache& operator=(const GameCacheData_PropCache& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const GameCacheData_PropCache& default_instance();
  
  void Swap(GameCacheData_PropCache* other);
  
  // implements Message ----------------------------------------------
  
  GameCacheData_PropCache* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GameCacheData_PropCache& from);
  void MergeFrom(const GameCacheData_PropCache& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);
  
  // optional uint32 useFrequency = 2;
  inline bool has_usefrequency() const;
  inline void clear_usefrequency();
  static const int kUseFrequencyFieldNumber = 2;
  inline ::google::protobuf::uint32 usefrequency() const;
  inline void set_usefrequency(::google::protobuf::uint32 value);
  
  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:message.GameCacheData.PropCache)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_usefrequency();
  inline void clear_has_usefrequency();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::uint32 number_;
  ::google::protobuf::uint32 usefrequency_;
  ::google::protobuf::uint32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameCacheData_2eproto();
  friend void protobuf_AssignDesc_GameCacheData_2eproto();
  friend void protobuf_ShutdownFile_GameCacheData_2eproto();
  
  void InitAsDefaultInstance();
  static GameCacheData_PropCache* default_instance_;
};
// -------------------------------------------------------------------

class GameCacheData : public ::google::protobuf::MessageLite {
 public:
  GameCacheData();
  virtual ~GameCacheData();
  
  GameCacheData(const GameCacheData& from);
  
  inline GameCacheData& operator=(const GameCacheData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const GameCacheData& default_instance();
  
  void Swap(GameCacheData* other);
  
  // implements Message ----------------------------------------------
  
  GameCacheData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GameCacheData& from);
  void MergeFrom(const GameCacheData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef GameCacheData_DayScore DayScore;
  typedef GameCacheData_WorldRankData WorldRankData;
  typedef GameCacheData_WeekRankData WeekRankData;
  typedef GameCacheData_PropCacheData PropCacheData;
  typedef GameCacheData_PropCache PropCache;
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string UUID = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  
  // optional string IMEI = 3;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kIMEIFieldNumber = 3;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  
  // optional int32 gold = 4 [default = 500];
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);
  
  // repeated .message.PropInfo usePropList = 5;
  inline int useproplist_size() const;
  inline void clear_useproplist();
  static const int kUsePropListFieldNumber = 5;
  inline const ::message::PropInfo& useproplist(int index) const;
  inline ::message::PropInfo* mutable_useproplist(int index);
  inline ::message::PropInfo* add_useproplist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::PropInfo >&
      useproplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::PropInfo >*
      mutable_useproplist();
  
  // optional uint32 useBackgroundID = 7 [default = 2000];
  inline bool has_usebackgroundid() const;
  inline void clear_usebackgroundid();
  static const int kUseBackgroundIDFieldNumber = 7;
  inline ::google::protobuf::uint32 usebackgroundid() const;
  inline void set_usebackgroundid(::google::protobuf::uint32 value);
  
  // repeated uint32 boughtBackgroundID = 8;
  inline int boughtbackgroundid_size() const;
  inline void clear_boughtbackgroundid();
  static const int kBoughtBackgroundIDFieldNumber = 8;
  inline ::google::protobuf::uint32 boughtbackgroundid(int index) const;
  inline void set_boughtbackgroundid(int index, ::google::protobuf::uint32 value);
  inline void add_boughtbackgroundid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      boughtbackgroundid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_boughtbackgroundid();
  
  // repeated uint32 historyScoreList = 9;
  inline int historyscorelist_size() const;
  inline void clear_historyscorelist();
  static const int kHistoryScoreListFieldNumber = 9;
  inline ::google::protobuf::uint32 historyscorelist(int index) const;
  inline void set_historyscorelist(int index, ::google::protobuf::uint32 value);
  inline void add_historyscorelist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      historyscorelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_historyscorelist();
  
  // repeated uint32 historyFiveHighestScoreList = 10;
  inline int historyfivehighestscorelist_size() const;
  inline void clear_historyfivehighestscorelist();
  static const int kHistoryFiveHighestScoreListFieldNumber = 10;
  inline ::google::protobuf::uint32 historyfivehighestscorelist(int index) const;
  inline void set_historyfivehighestscorelist(int index, ::google::protobuf::uint32 value);
  inline void add_historyfivehighestscorelist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      historyfivehighestscorelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_historyfivehighestscorelist();
  
  // optional uint32 maxHighestScore = 11 [default = 0];
  inline bool has_maxhighestscore() const;
  inline void clear_maxhighestscore();
  static const int kMaxHighestScoreFieldNumber = 11;
  inline ::google::protobuf::uint32 maxhighestscore() const;
  inline void set_maxhighestscore(::google::protobuf::uint32 value);
  
  // optional bool isBackgroundMusic = 12 [default = true];
  inline bool has_isbackgroundmusic() const;
  inline void clear_isbackgroundmusic();
  static const int kIsBackgroundMusicFieldNumber = 12;
  inline bool isbackgroundmusic() const;
  inline void set_isbackgroundmusic(bool value);
  
  // optional bool isSound = 13 [default = true];
  inline bool has_issound() const;
  inline void clear_issound();
  static const int kIsSoundFieldNumber = 13;
  inline bool issound() const;
  inline void set_issound(bool value);
  
  // repeated .message.GameCacheData.DayScore fiveDayScoreList = 14;
  inline int fivedayscorelist_size() const;
  inline void clear_fivedayscorelist();
  static const int kFiveDayScoreListFieldNumber = 14;
  inline const ::message::GameCacheData_DayScore& fivedayscorelist(int index) const;
  inline ::message::GameCacheData_DayScore* mutable_fivedayscorelist(int index);
  inline ::message::GameCacheData_DayScore* add_fivedayscorelist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_DayScore >&
      fivedayscorelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_DayScore >*
      mutable_fivedayscorelist();
  
  // optional .message.GameCacheData.WorldRankData worldRankData = 15;
  inline bool has_worldrankdata() const;
  inline void clear_worldrankdata();
  static const int kWorldRankDataFieldNumber = 15;
  inline const ::message::GameCacheData_WorldRankData& worldrankdata() const;
  inline ::message::GameCacheData_WorldRankData* mutable_worldrankdata();
  inline ::message::GameCacheData_WorldRankData* release_worldrankdata();
  
  // optional .message.GameCacheData.WeekRankData weekRankData = 16;
  inline bool has_weekrankdata() const;
  inline void clear_weekrankdata();
  static const int kWeekRankDataFieldNumber = 16;
  inline const ::message::GameCacheData_WeekRankData& weekrankdata() const;
  inline ::message::GameCacheData_WeekRankData* mutable_weekrankdata();
  inline ::message::GameCacheData_WeekRankData* release_weekrankdata();
  
  // optional bool isSendDeviceInfo = 17 [default = false];
  inline bool has_issenddeviceinfo() const;
  inline void clear_issenddeviceinfo();
  static const int kIsSendDeviceInfoFieldNumber = 17;
  inline bool issenddeviceinfo() const;
  inline void set_issenddeviceinfo(bool value);
  
  // repeated bool propSlotLock = 18;
  inline int propslotlock_size() const;
  inline void clear_propslotlock();
  static const int kPropSlotLockFieldNumber = 18;
  inline bool propslotlock(int index) const;
  inline void set_propslotlock(int index, bool value);
  inline void add_propslotlock(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      propslotlock() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_propslotlock();
  
  // repeated bool levelLock = 19;
  inline int levellock_size() const;
  inline void clear_levellock();
  static const int kLevelLockFieldNumber = 19;
  inline bool levellock(int index) const;
  inline void set_levellock(int index, bool value);
  inline void add_levellock(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      levellock() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_levellock();
  
  // optional .message.GameCacheData.PropCacheData propCacheData = 20;
  inline bool has_propcachedata() const;
  inline void clear_propcachedata();
  static const int kPropCacheDataFieldNumber = 20;
  inline const ::message::GameCacheData_PropCacheData& propcachedata() const;
  inline ::message::GameCacheData_PropCacheData* mutable_propcachedata();
  inline ::message::GameCacheData_PropCacheData* release_propcachedata();
  
  // optional bool isRunGameGuide = 21 [default = true];
  inline bool has_isrungameguide() const;
  inline void clear_isrungameguide();
  static const int kIsRunGameGuideFieldNumber = 21;
  inline bool isrungameguide() const;
  inline void set_isrungameguide(bool value);
  
  // @@protoc_insertion_point(class_scope:message.GameCacheData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_usebackgroundid();
  inline void clear_has_usebackgroundid();
  inline void set_has_maxhighestscore();
  inline void clear_has_maxhighestscore();
  inline void set_has_isbackgroundmusic();
  inline void clear_has_isbackgroundmusic();
  inline void set_has_issound();
  inline void clear_has_issound();
  inline void set_has_worldrankdata();
  inline void clear_has_worldrankdata();
  inline void set_has_weekrankdata();
  inline void clear_has_weekrankdata();
  inline void set_has_issenddeviceinfo();
  inline void clear_has_issenddeviceinfo();
  inline void set_has_propcachedata();
  inline void clear_has_propcachedata();
  inline void set_has_isrungameguide();
  inline void clear_has_isrungameguide();
  
  ::std::string* name_;
  ::std::string* uuid_;
  ::std::string* imei_;
  ::google::protobuf::RepeatedPtrField< ::message::PropInfo > useproplist_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::uint32 usebackgroundid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > boughtbackgroundid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > historyscorelist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > historyfivehighestscorelist_;
  ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_DayScore > fivedayscorelist_;
  ::google::protobuf::uint32 maxhighestscore_;
  bool isbackgroundmusic_;
  bool issound_;
  bool issenddeviceinfo_;
  bool isrungameguide_;
  ::message::GameCacheData_WorldRankData* worldrankdata_;
  ::message::GameCacheData_WeekRankData* weekrankdata_;
  ::google::protobuf::RepeatedField< bool > propslotlock_;
  ::google::protobuf::RepeatedField< bool > levellock_;
  ::message::GameCacheData_PropCacheData* propcachedata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameCacheData_2eproto();
  friend void protobuf_AssignDesc_GameCacheData_2eproto();
  friend void protobuf_ShutdownFile_GameCacheData_2eproto();
  
  void InitAsDefaultInstance();
  static GameCacheData* default_instance_;
};
// ===================================================================


// ===================================================================

// GameCacheData_DayScore

// required uint64 key = 1;
inline bool GameCacheData_DayScore::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameCacheData_DayScore::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameCacheData_DayScore::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameCacheData_DayScore::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 GameCacheData_DayScore::key() const {
  return key_;
}
inline void GameCacheData_DayScore::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
}

// required uint64 score = 2;
inline bool GameCacheData_DayScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameCacheData_DayScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameCacheData_DayScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameCacheData_DayScore::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::uint64 GameCacheData_DayScore::score() const {
  return score_;
}
inline void GameCacheData_DayScore::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// GameCacheData_WorldRankData

// required uint64 key = 1;
inline bool GameCacheData_WorldRankData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameCacheData_WorldRankData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameCacheData_WorldRankData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameCacheData_WorldRankData::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 GameCacheData_WorldRankData::key() const {
  return key_;
}
inline void GameCacheData_WorldRankData::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
}

// required .message.SearchRankResponse data = 2;
inline bool GameCacheData_WorldRankData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameCacheData_WorldRankData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameCacheData_WorldRankData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameCacheData_WorldRankData::clear_data() {
  if (data_ != NULL) data_->::message::SearchRankResponse::Clear();
  clear_has_data();
}
inline const ::message::SearchRankResponse& GameCacheData_WorldRankData::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::message::SearchRankResponse* GameCacheData_WorldRankData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::message::SearchRankResponse;
  return data_;
}
inline ::message::SearchRankResponse* GameCacheData_WorldRankData::release_data() {
  clear_has_data();
  ::message::SearchRankResponse* temp = data_;
  data_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GameCacheData_WeekRankData

// required uint64 key = 1;
inline bool GameCacheData_WeekRankData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameCacheData_WeekRankData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameCacheData_WeekRankData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameCacheData_WeekRankData::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 GameCacheData_WeekRankData::key() const {
  return key_;
}
inline void GameCacheData_WeekRankData::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
}

// required .message.SearchWeeklyScoreResponse data = 2;
inline bool GameCacheData_WeekRankData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameCacheData_WeekRankData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameCacheData_WeekRankData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameCacheData_WeekRankData::clear_data() {
  if (data_ != NULL) data_->::message::SearchWeeklyScoreResponse::Clear();
  clear_has_data();
}
inline const ::message::SearchWeeklyScoreResponse& GameCacheData_WeekRankData::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::message::SearchWeeklyScoreResponse* GameCacheData_WeekRankData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::message::SearchWeeklyScoreResponse;
  return data_;
}
inline ::message::SearchWeeklyScoreResponse* GameCacheData_WeekRankData::release_data() {
  clear_has_data();
  ::message::SearchWeeklyScoreResponse* temp = data_;
  data_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GameCacheData_PropCacheData

// optional uint64 lastTime = 1;
inline bool GameCacheData_PropCacheData::has_lasttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameCacheData_PropCacheData::set_has_lasttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameCacheData_PropCacheData::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameCacheData_PropCacheData::clear_lasttime() {
  lasttime_ = GOOGLE_ULONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::uint64 GameCacheData_PropCacheData::lasttime() const {
  return lasttime_;
}
inline void GameCacheData_PropCacheData::set_lasttime(::google::protobuf::uint64 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// optional uint32 propIndex = 2;
inline bool GameCacheData_PropCacheData::has_propindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameCacheData_PropCacheData::set_has_propindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameCacheData_PropCacheData::clear_has_propindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameCacheData_PropCacheData::clear_propindex() {
  propindex_ = 0u;
  clear_has_propindex();
}
inline ::google::protobuf::uint32 GameCacheData_PropCacheData::propindex() const {
  return propindex_;
}
inline void GameCacheData_PropCacheData::set_propindex(::google::protobuf::uint32 value) {
  set_has_propindex();
  propindex_ = value;
}

// repeated .message.GameCacheData.PropCache propcache = 3;
inline int GameCacheData_PropCacheData::propcache_size() const {
  return propcache_.size();
}
inline void GameCacheData_PropCacheData::clear_propcache() {
  propcache_.Clear();
}
inline const ::message::GameCacheData_PropCache& GameCacheData_PropCacheData::propcache(int index) const {
  return propcache_.Get(index);
}
inline ::message::GameCacheData_PropCache* GameCacheData_PropCacheData::mutable_propcache(int index) {
  return propcache_.Mutable(index);
}
inline ::message::GameCacheData_PropCache* GameCacheData_PropCacheData::add_propcache() {
  return propcache_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_PropCache >&
GameCacheData_PropCacheData::propcache() const {
  return propcache_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_PropCache >*
GameCacheData_PropCacheData::mutable_propcache() {
  return &propcache_;
}

// -------------------------------------------------------------------

// GameCacheData_PropCache

// optional uint32 number = 1;
inline bool GameCacheData_PropCache::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameCacheData_PropCache::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameCacheData_PropCache::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameCacheData_PropCache::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 GameCacheData_PropCache::number() const {
  return number_;
}
inline void GameCacheData_PropCache::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// optional uint32 useFrequency = 2;
inline bool GameCacheData_PropCache::has_usefrequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameCacheData_PropCache::set_has_usefrequency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameCacheData_PropCache::clear_has_usefrequency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameCacheData_PropCache::clear_usefrequency() {
  usefrequency_ = 0u;
  clear_has_usefrequency();
}
inline ::google::protobuf::uint32 GameCacheData_PropCache::usefrequency() const {
  return usefrequency_;
}
inline void GameCacheData_PropCache::set_usefrequency(::google::protobuf::uint32 value) {
  set_has_usefrequency();
  usefrequency_ = value;
}

// optional uint32 level = 3;
inline bool GameCacheData_PropCache::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameCacheData_PropCache::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameCacheData_PropCache::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameCacheData_PropCache::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 GameCacheData_PropCache::level() const {
  return level_;
}
inline void GameCacheData_PropCache::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// GameCacheData

// optional string name = 1;
inline bool GameCacheData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameCacheData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameCacheData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameCacheData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GameCacheData::name() const {
  return *name_;
}
inline void GameCacheData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameCacheData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameCacheData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameCacheData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GameCacheData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string UUID = 2;
inline bool GameCacheData::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameCacheData::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameCacheData::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameCacheData::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& GameCacheData::uuid() const {
  return *uuid_;
}
inline void GameCacheData::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void GameCacheData::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void GameCacheData::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameCacheData::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* GameCacheData::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string IMEI = 3;
inline bool GameCacheData::has_imei() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameCacheData::set_has_imei() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameCacheData::clear_has_imei() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameCacheData::clear_imei() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& GameCacheData::imei() const {
  return *imei_;
}
inline void GameCacheData::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void GameCacheData::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void GameCacheData::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameCacheData::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  return imei_;
}
inline ::std::string* GameCacheData::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 gold = 4 [default = 500];
inline bool GameCacheData::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameCacheData::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameCacheData::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameCacheData::clear_gold() {
  gold_ = 500;
  clear_has_gold();
}
inline ::google::protobuf::int32 GameCacheData::gold() const {
  return gold_;
}
inline void GameCacheData::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// repeated .message.PropInfo usePropList = 5;
inline int GameCacheData::useproplist_size() const {
  return useproplist_.size();
}
inline void GameCacheData::clear_useproplist() {
  useproplist_.Clear();
}
inline const ::message::PropInfo& GameCacheData::useproplist(int index) const {
  return useproplist_.Get(index);
}
inline ::message::PropInfo* GameCacheData::mutable_useproplist(int index) {
  return useproplist_.Mutable(index);
}
inline ::message::PropInfo* GameCacheData::add_useproplist() {
  return useproplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::PropInfo >&
GameCacheData::useproplist() const {
  return useproplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::PropInfo >*
GameCacheData::mutable_useproplist() {
  return &useproplist_;
}

// optional uint32 useBackgroundID = 7 [default = 2000];
inline bool GameCacheData::has_usebackgroundid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameCacheData::set_has_usebackgroundid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameCacheData::clear_has_usebackgroundid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameCacheData::clear_usebackgroundid() {
  usebackgroundid_ = 2000u;
  clear_has_usebackgroundid();
}
inline ::google::protobuf::uint32 GameCacheData::usebackgroundid() const {
  return usebackgroundid_;
}
inline void GameCacheData::set_usebackgroundid(::google::protobuf::uint32 value) {
  set_has_usebackgroundid();
  usebackgroundid_ = value;
}

// repeated uint32 boughtBackgroundID = 8;
inline int GameCacheData::boughtbackgroundid_size() const {
  return boughtbackgroundid_.size();
}
inline void GameCacheData::clear_boughtbackgroundid() {
  boughtbackgroundid_.Clear();
}
inline ::google::protobuf::uint32 GameCacheData::boughtbackgroundid(int index) const {
  return boughtbackgroundid_.Get(index);
}
inline void GameCacheData::set_boughtbackgroundid(int index, ::google::protobuf::uint32 value) {
  boughtbackgroundid_.Set(index, value);
}
inline void GameCacheData::add_boughtbackgroundid(::google::protobuf::uint32 value) {
  boughtbackgroundid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameCacheData::boughtbackgroundid() const {
  return boughtbackgroundid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameCacheData::mutable_boughtbackgroundid() {
  return &boughtbackgroundid_;
}

// repeated uint32 historyScoreList = 9;
inline int GameCacheData::historyscorelist_size() const {
  return historyscorelist_.size();
}
inline void GameCacheData::clear_historyscorelist() {
  historyscorelist_.Clear();
}
inline ::google::protobuf::uint32 GameCacheData::historyscorelist(int index) const {
  return historyscorelist_.Get(index);
}
inline void GameCacheData::set_historyscorelist(int index, ::google::protobuf::uint32 value) {
  historyscorelist_.Set(index, value);
}
inline void GameCacheData::add_historyscorelist(::google::protobuf::uint32 value) {
  historyscorelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameCacheData::historyscorelist() const {
  return historyscorelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameCacheData::mutable_historyscorelist() {
  return &historyscorelist_;
}

// repeated uint32 historyFiveHighestScoreList = 10;
inline int GameCacheData::historyfivehighestscorelist_size() const {
  return historyfivehighestscorelist_.size();
}
inline void GameCacheData::clear_historyfivehighestscorelist() {
  historyfivehighestscorelist_.Clear();
}
inline ::google::protobuf::uint32 GameCacheData::historyfivehighestscorelist(int index) const {
  return historyfivehighestscorelist_.Get(index);
}
inline void GameCacheData::set_historyfivehighestscorelist(int index, ::google::protobuf::uint32 value) {
  historyfivehighestscorelist_.Set(index, value);
}
inline void GameCacheData::add_historyfivehighestscorelist(::google::protobuf::uint32 value) {
  historyfivehighestscorelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameCacheData::historyfivehighestscorelist() const {
  return historyfivehighestscorelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameCacheData::mutable_historyfivehighestscorelist() {
  return &historyfivehighestscorelist_;
}

// optional uint32 maxHighestScore = 11 [default = 0];
inline bool GameCacheData::has_maxhighestscore() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameCacheData::set_has_maxhighestscore() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameCacheData::clear_has_maxhighestscore() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameCacheData::clear_maxhighestscore() {
  maxhighestscore_ = 0u;
  clear_has_maxhighestscore();
}
inline ::google::protobuf::uint32 GameCacheData::maxhighestscore() const {
  return maxhighestscore_;
}
inline void GameCacheData::set_maxhighestscore(::google::protobuf::uint32 value) {
  set_has_maxhighestscore();
  maxhighestscore_ = value;
}

// optional bool isBackgroundMusic = 12 [default = true];
inline bool GameCacheData::has_isbackgroundmusic() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameCacheData::set_has_isbackgroundmusic() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameCacheData::clear_has_isbackgroundmusic() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameCacheData::clear_isbackgroundmusic() {
  isbackgroundmusic_ = true;
  clear_has_isbackgroundmusic();
}
inline bool GameCacheData::isbackgroundmusic() const {
  return isbackgroundmusic_;
}
inline void GameCacheData::set_isbackgroundmusic(bool value) {
  set_has_isbackgroundmusic();
  isbackgroundmusic_ = value;
}

// optional bool isSound = 13 [default = true];
inline bool GameCacheData::has_issound() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameCacheData::set_has_issound() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameCacheData::clear_has_issound() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameCacheData::clear_issound() {
  issound_ = true;
  clear_has_issound();
}
inline bool GameCacheData::issound() const {
  return issound_;
}
inline void GameCacheData::set_issound(bool value) {
  set_has_issound();
  issound_ = value;
}

// repeated .message.GameCacheData.DayScore fiveDayScoreList = 14;
inline int GameCacheData::fivedayscorelist_size() const {
  return fivedayscorelist_.size();
}
inline void GameCacheData::clear_fivedayscorelist() {
  fivedayscorelist_.Clear();
}
inline const ::message::GameCacheData_DayScore& GameCacheData::fivedayscorelist(int index) const {
  return fivedayscorelist_.Get(index);
}
inline ::message::GameCacheData_DayScore* GameCacheData::mutable_fivedayscorelist(int index) {
  return fivedayscorelist_.Mutable(index);
}
inline ::message::GameCacheData_DayScore* GameCacheData::add_fivedayscorelist() {
  return fivedayscorelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_DayScore >&
GameCacheData::fivedayscorelist() const {
  return fivedayscorelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::GameCacheData_DayScore >*
GameCacheData::mutable_fivedayscorelist() {
  return &fivedayscorelist_;
}

// optional .message.GameCacheData.WorldRankData worldRankData = 15;
inline bool GameCacheData::has_worldrankdata() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GameCacheData::set_has_worldrankdata() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GameCacheData::clear_has_worldrankdata() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GameCacheData::clear_worldrankdata() {
  if (worldrankdata_ != NULL) worldrankdata_->::message::GameCacheData_WorldRankData::Clear();
  clear_has_worldrankdata();
}
inline const ::message::GameCacheData_WorldRankData& GameCacheData::worldrankdata() const {
  return worldrankdata_ != NULL ? *worldrankdata_ : *default_instance_->worldrankdata_;
}
inline ::message::GameCacheData_WorldRankData* GameCacheData::mutable_worldrankdata() {
  set_has_worldrankdata();
  if (worldrankdata_ == NULL) worldrankdata_ = new ::message::GameCacheData_WorldRankData;
  return worldrankdata_;
}
inline ::message::GameCacheData_WorldRankData* GameCacheData::release_worldrankdata() {
  clear_has_worldrankdata();
  ::message::GameCacheData_WorldRankData* temp = worldrankdata_;
  worldrankdata_ = NULL;
  return temp;
}

// optional .message.GameCacheData.WeekRankData weekRankData = 16;
inline bool GameCacheData::has_weekrankdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GameCacheData::set_has_weekrankdata() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GameCacheData::clear_has_weekrankdata() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GameCacheData::clear_weekrankdata() {
  if (weekrankdata_ != NULL) weekrankdata_->::message::GameCacheData_WeekRankData::Clear();
  clear_has_weekrankdata();
}
inline const ::message::GameCacheData_WeekRankData& GameCacheData::weekrankdata() const {
  return weekrankdata_ != NULL ? *weekrankdata_ : *default_instance_->weekrankdata_;
}
inline ::message::GameCacheData_WeekRankData* GameCacheData::mutable_weekrankdata() {
  set_has_weekrankdata();
  if (weekrankdata_ == NULL) weekrankdata_ = new ::message::GameCacheData_WeekRankData;
  return weekrankdata_;
}
inline ::message::GameCacheData_WeekRankData* GameCacheData::release_weekrankdata() {
  clear_has_weekrankdata();
  ::message::GameCacheData_WeekRankData* temp = weekrankdata_;
  weekrankdata_ = NULL;
  return temp;
}

// optional bool isSendDeviceInfo = 17 [default = false];
inline bool GameCacheData::has_issenddeviceinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GameCacheData::set_has_issenddeviceinfo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GameCacheData::clear_has_issenddeviceinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GameCacheData::clear_issenddeviceinfo() {
  issenddeviceinfo_ = false;
  clear_has_issenddeviceinfo();
}
inline bool GameCacheData::issenddeviceinfo() const {
  return issenddeviceinfo_;
}
inline void GameCacheData::set_issenddeviceinfo(bool value) {
  set_has_issenddeviceinfo();
  issenddeviceinfo_ = value;
}

// repeated bool propSlotLock = 18;
inline int GameCacheData::propslotlock_size() const {
  return propslotlock_.size();
}
inline void GameCacheData::clear_propslotlock() {
  propslotlock_.Clear();
}
inline bool GameCacheData::propslotlock(int index) const {
  return propslotlock_.Get(index);
}
inline void GameCacheData::set_propslotlock(int index, bool value) {
  propslotlock_.Set(index, value);
}
inline void GameCacheData::add_propslotlock(bool value) {
  propslotlock_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
GameCacheData::propslotlock() const {
  return propslotlock_;
}
inline ::google::protobuf::RepeatedField< bool >*
GameCacheData::mutable_propslotlock() {
  return &propslotlock_;
}

// repeated bool levelLock = 19;
inline int GameCacheData::levellock_size() const {
  return levellock_.size();
}
inline void GameCacheData::clear_levellock() {
  levellock_.Clear();
}
inline bool GameCacheData::levellock(int index) const {
  return levellock_.Get(index);
}
inline void GameCacheData::set_levellock(int index, bool value) {
  levellock_.Set(index, value);
}
inline void GameCacheData::add_levellock(bool value) {
  levellock_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
GameCacheData::levellock() const {
  return levellock_;
}
inline ::google::protobuf::RepeatedField< bool >*
GameCacheData::mutable_levellock() {
  return &levellock_;
}

// optional .message.GameCacheData.PropCacheData propCacheData = 20;
inline bool GameCacheData::has_propcachedata() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GameCacheData::set_has_propcachedata() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GameCacheData::clear_has_propcachedata() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GameCacheData::clear_propcachedata() {
  if (propcachedata_ != NULL) propcachedata_->::message::GameCacheData_PropCacheData::Clear();
  clear_has_propcachedata();
}
inline const ::message::GameCacheData_PropCacheData& GameCacheData::propcachedata() const {
  return propcachedata_ != NULL ? *propcachedata_ : *default_instance_->propcachedata_;
}
inline ::message::GameCacheData_PropCacheData* GameCacheData::mutable_propcachedata() {
  set_has_propcachedata();
  if (propcachedata_ == NULL) propcachedata_ = new ::message::GameCacheData_PropCacheData;
  return propcachedata_;
}
inline ::message::GameCacheData_PropCacheData* GameCacheData::release_propcachedata() {
  clear_has_propcachedata();
  ::message::GameCacheData_PropCacheData* temp = propcachedata_;
  propcachedata_ = NULL;
  return temp;
}

// optional bool isRunGameGuide = 21 [default = true];
inline bool GameCacheData::has_isrungameguide() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GameCacheData::set_has_isrungameguide() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GameCacheData::clear_has_isrungameguide() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GameCacheData::clear_isrungameguide() {
  isrungameguide_ = true;
  clear_has_isrungameguide();
}
inline bool GameCacheData::isrungameguide() const {
  return isrungameguide_;
}
inline void GameCacheData::set_isrungameguide(bool value) {
  set_has_isrungameguide();
  isrungameguide_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameCacheData_2eproto__INCLUDED
