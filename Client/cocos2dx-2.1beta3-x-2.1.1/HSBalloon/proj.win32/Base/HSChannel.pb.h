// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HSChannel.proto

#ifndef PROTOBUF_HSChannel_2eproto__INCLUDED
#define PROTOBUF_HSChannel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HSChannel_2eproto();
void protobuf_AssignDesc_HSChannel_2eproto();
void protobuf_ShutdownFile_HSChannel_2eproto();

class Channel;
class Channel_Tom;

// ===================================================================

class Channel_Tom : public ::google::protobuf::MessageLite {
 public:
  Channel_Tom();
  virtual ~Channel_Tom();
  
  Channel_Tom(const Channel_Tom& from);
  
  inline Channel_Tom& operator=(const Channel_Tom& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Channel_Tom& default_instance();
  
  void Swap(Channel_Tom* other);
  
  // implements Message ----------------------------------------------
  
  Channel_Tom* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Channel_Tom& from);
  void MergeFrom(const Channel_Tom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 gameMoney = 1;
  inline bool has_gamemoney() const;
  inline void clear_gamemoney();
  static const int kGameMoneyFieldNumber = 1;
  inline ::google::protobuf::int32 gamemoney() const;
  inline void set_gamemoney(::google::protobuf::int32 value);
  
  // required uint32 propID = 2;
  inline bool has_propid() const;
  inline void clear_propid();
  static const int kPropIDFieldNumber = 2;
  inline ::google::protobuf::uint32 propid() const;
  inline void set_propid(::google::protobuf::uint32 value);
  
  // required string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required string describe = 4;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 4;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  
  // @@protoc_insertion_point(class_scope:message.Channel.Tom)
 private:
  inline void set_has_gamemoney();
  inline void clear_has_gamemoney();
  inline void set_has_propid();
  inline void clear_has_propid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_describe();
  inline void clear_has_describe();
  
  ::google::protobuf::int32 gamemoney_;
  ::google::protobuf::uint32 propid_;
  ::std::string* title_;
  ::std::string* describe_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSChannel_2eproto();
  friend void protobuf_AssignDesc_HSChannel_2eproto();
  friend void protobuf_ShutdownFile_HSChannel_2eproto();
  
  void InitAsDefaultInstance();
  static Channel_Tom* default_instance_;
};
// -------------------------------------------------------------------

class Channel : public ::google::protobuf::MessageLite {
 public:
  Channel();
  virtual ~Channel();
  
  Channel(const Channel& from);
  
  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Channel& default_instance();
  
  void Swap(Channel* other);
  
  // implements Message ----------------------------------------------
  
  Channel* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef Channel_Tom Tom;
  
  // accessors -------------------------------------------------------
  
  // optional .message.Channel.Tom tom = 1;
  inline bool has_tom() const;
  inline void clear_tom();
  static const int kTomFieldNumber = 1;
  inline const ::message::Channel_Tom& tom() const;
  inline ::message::Channel_Tom* mutable_tom();
  inline ::message::Channel_Tom* release_tom();
  
  // @@protoc_insertion_point(class_scope:message.Channel)
 private:
  inline void set_has_tom();
  inline void clear_has_tom();
  
  ::message::Channel_Tom* tom_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSChannel_2eproto();
  friend void protobuf_AssignDesc_HSChannel_2eproto();
  friend void protobuf_ShutdownFile_HSChannel_2eproto();
  
  void InitAsDefaultInstance();
  static Channel* default_instance_;
};
// ===================================================================


// ===================================================================

// Channel_Tom

// required int32 gameMoney = 1;
inline bool Channel_Tom::has_gamemoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Channel_Tom::set_has_gamemoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Channel_Tom::clear_has_gamemoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Channel_Tom::clear_gamemoney() {
  gamemoney_ = 0;
  clear_has_gamemoney();
}
inline ::google::protobuf::int32 Channel_Tom::gamemoney() const {
  return gamemoney_;
}
inline void Channel_Tom::set_gamemoney(::google::protobuf::int32 value) {
  set_has_gamemoney();
  gamemoney_ = value;
}

// required uint32 propID = 2;
inline bool Channel_Tom::has_propid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Channel_Tom::set_has_propid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Channel_Tom::clear_has_propid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Channel_Tom::clear_propid() {
  propid_ = 0u;
  clear_has_propid();
}
inline ::google::protobuf::uint32 Channel_Tom::propid() const {
  return propid_;
}
inline void Channel_Tom::set_propid(::google::protobuf::uint32 value) {
  set_has_propid();
  propid_ = value;
}

// required string title = 3;
inline bool Channel_Tom::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Channel_Tom::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Channel_Tom::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Channel_Tom::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Channel_Tom::title() const {
  return *title_;
}
inline void Channel_Tom::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Channel_Tom::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Channel_Tom::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Channel_Tom::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Channel_Tom::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string describe = 4;
inline bool Channel_Tom::has_describe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Channel_Tom::set_has_describe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Channel_Tom::clear_has_describe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Channel_Tom::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& Channel_Tom::describe() const {
  return *describe_;
}
inline void Channel_Tom::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void Channel_Tom::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void Channel_Tom::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Channel_Tom::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* Channel_Tom::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Channel

// optional .message.Channel.Tom tom = 1;
inline bool Channel::has_tom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Channel::set_has_tom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Channel::clear_has_tom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Channel::clear_tom() {
  if (tom_ != NULL) tom_->::message::Channel_Tom::Clear();
  clear_has_tom();
}
inline const ::message::Channel_Tom& Channel::tom() const {
  return tom_ != NULL ? *tom_ : *default_instance_->tom_;
}
inline ::message::Channel_Tom* Channel::mutable_tom() {
  set_has_tom();
  if (tom_ == NULL) tom_ = new ::message::Channel_Tom;
  return tom_;
}
inline ::message::Channel_Tom* Channel::release_tom() {
  clear_has_tom();
  ::message::Channel_Tom* temp = tom_;
  tom_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HSChannel_2eproto__INCLUDED
