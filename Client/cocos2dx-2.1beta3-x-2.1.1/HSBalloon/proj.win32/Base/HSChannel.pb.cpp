// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HSChannel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_HSChannel_2eproto() {
  delete Channel::default_instance_;
  delete Channel_Tom::default_instance_;
}

void protobuf_AddDesc_HSChannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Channel::default_instance_ = new Channel();
  Channel_Tom::default_instance_ = new Channel_Tom();
  Channel::default_instance_->InitAsDefaultInstance();
  Channel_Tom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HSChannel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HSChannel_2eproto {
  StaticDescriptorInitializer_HSChannel_2eproto() {
    protobuf_AddDesc_HSChannel_2eproto();
  }
} static_descriptor_initializer_HSChannel_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Channel_Tom::kGameMoneyFieldNumber;
const int Channel_Tom::kPropIDFieldNumber;
const int Channel_Tom::kTitleFieldNumber;
const int Channel_Tom::kDescribeFieldNumber;
#endif  // !_MSC_VER

Channel_Tom::Channel_Tom()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Channel_Tom::InitAsDefaultInstance() {
}

Channel_Tom::Channel_Tom(const Channel_Tom& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Channel_Tom::SharedCtor() {
  _cached_size_ = 0;
  gamemoney_ = 0;
  propid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Channel_Tom::~Channel_Tom() {
  SharedDtor();
}

void Channel_Tom::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void Channel_Tom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Channel_Tom& Channel_Tom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSChannel_2eproto();  return *default_instance_;
}

Channel_Tom* Channel_Tom::default_instance_ = NULL;

Channel_Tom* Channel_Tom::New() const {
  return new Channel_Tom;
}

void Channel_Tom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamemoney_ = 0;
    propid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Channel_Tom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemoney_)));
          set_has_gamemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propID;
        break;
      }
      
      // required uint32 propID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_describe;
        break;
      }
      
      // required string describe = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Channel_Tom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameMoney = 1;
  if (has_gamemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamemoney(), output);
  }
  
  // required uint32 propID = 2;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propid(), output);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // required string describe = 4;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->describe(), output);
  }
  
}

int Channel_Tom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameMoney = 1;
    if (has_gamemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamemoney());
    }
    
    // required uint32 propID = 2;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propid());
    }
    
    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // required string describe = 4;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel_Tom::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Channel_Tom*>(&from));
}

void Channel_Tom::MergeFrom(const Channel_Tom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamemoney()) {
      set_gamemoney(from.gamemoney());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
  }
}

void Channel_Tom::CopyFrom(const Channel_Tom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel_Tom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Channel_Tom::Swap(Channel_Tom* other) {
  if (other != this) {
    std::swap(gamemoney_, other->gamemoney_);
    std::swap(propid_, other->propid_);
    std::swap(title_, other->title_);
    std::swap(describe_, other->describe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Channel_Tom::GetTypeName() const {
  return "message.Channel.Tom";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Channel::kTomFieldNumber;
#endif  // !_MSC_VER

Channel::Channel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Channel::InitAsDefaultInstance() {
  tom_ = const_cast< ::message::Channel_Tom*>(&::message::Channel_Tom::default_instance());
}

Channel::Channel(const Channel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Channel::SharedCtor() {
  _cached_size_ = 0;
  tom_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Channel::~Channel() {
  SharedDtor();
}

void Channel::SharedDtor() {
  if (this != default_instance_) {
    delete tom_;
  }
}

void Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Channel& Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSChannel_2eproto();  return *default_instance_;
}

Channel* Channel::default_instance_ = NULL;

Channel* Channel::New() const {
  return new Channel;
}

void Channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tom()) {
      if (tom_ != NULL) tom_->::message::Channel_Tom::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.Channel.Tom tom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .message.Channel.Tom tom = 1;
  if (has_tom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tom(), output);
  }
  
}

int Channel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .message.Channel.Tom tom = 1;
    if (has_tom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tom());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Channel*>(&from));
}

void Channel::MergeFrom(const Channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tom()) {
      mutable_tom()->::message::Channel_Tom::MergeFrom(from.tom());
    }
  }
}

void Channel::CopyFrom(const Channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  
  if (has_tom()) {
    if (!this->tom().IsInitialized()) return false;
  }
  return true;
}

void Channel::Swap(Channel* other) {
  if (other != this) {
    std::swap(tom_, other->tom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Channel::GetTypeName() const {
  return "message.Channel";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
