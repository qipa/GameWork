// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PropInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_PropInfo_2eproto() {
  delete PropInfo::default_instance_;
  delete PropInfo_IncludePropInfo::default_instance_;
}

void protobuf_AddDesc_PropInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  PropInfo::default_instance_ = new PropInfo();
  PropInfo_IncludePropInfo::default_instance_ = new PropInfo_IncludePropInfo();
  PropInfo::default_instance_->InitAsDefaultInstance();
  PropInfo_IncludePropInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PropInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PropInfo_2eproto {
  StaticDescriptorInitializer_PropInfo_2eproto() {
    protobuf_AddDesc_PropInfo_2eproto();
  }
} static_descriptor_initializer_PropInfo_2eproto_;


// ===================================================================

bool PropInfo_ManualPropType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PropInfo_ManualPropType PropInfo::BALLOON_PROPS_Unknow;
const PropInfo_ManualPropType PropInfo::BALLOON_PROPS_ChangeColorFullScreen;
const PropInfo_ManualPropType PropInfo::BALLOON_PROPS_Lightning;
const PropInfo_ManualPropType PropInfo::BALLOON_PROPS_KingTime;
const PropInfo_ManualPropType PropInfo::BALLOON_PROPS_StratagemLevelByZero;
const PropInfo_ManualPropType PropInfo::ManualPropType_MIN;
const PropInfo_ManualPropType PropInfo::ManualPropType_MAX;
const int PropInfo::ManualPropType_ARRAYSIZE;
#endif  // _MSC_VER
bool PropInfo_PropType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PropInfo_PropType PropInfo::Unknow;
const PropInfo_PropType PropInfo::ManualProp;
const PropInfo_PropType PropInfo::BufferProp;
const PropInfo_PropType PropInfo::PropType_MIN;
const PropInfo_PropType PropInfo::PropType_MAX;
const int PropInfo::PropType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PropInfo_IncludePropInfo::kPropInfoFieldNumber;
const int PropInfo_IncludePropInfo::kCountFieldNumber;
#endif  // !_MSC_VER

PropInfo_IncludePropInfo::PropInfo_IncludePropInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PropInfo_IncludePropInfo::InitAsDefaultInstance() {
  propinfo_ = const_cast< ::message::PropInfo*>(&::message::PropInfo::default_instance());
}

PropInfo_IncludePropInfo::PropInfo_IncludePropInfo(const PropInfo_IncludePropInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PropInfo_IncludePropInfo::SharedCtor() {
  _cached_size_ = 0;
  propinfo_ = NULL;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropInfo_IncludePropInfo::~PropInfo_IncludePropInfo() {
  SharedDtor();
}

void PropInfo_IncludePropInfo::SharedDtor() {
  if (this != default_instance_) {
    delete propinfo_;
  }
}

void PropInfo_IncludePropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropInfo_IncludePropInfo& PropInfo_IncludePropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropInfo_2eproto();  return *default_instance_;
}

PropInfo_IncludePropInfo* PropInfo_IncludePropInfo::default_instance_ = NULL;

PropInfo_IncludePropInfo* PropInfo_IncludePropInfo::New() const {
  return new PropInfo_IncludePropInfo;
}

void PropInfo_IncludePropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_propinfo()) {
      if (propinfo_ != NULL) propinfo_->::message::PropInfo::Clear();
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PropInfo_IncludePropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.PropInfo propInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropInfo_IncludePropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .message.PropInfo propInfo = 1;
  if (has_propinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->propinfo(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
}

int PropInfo_IncludePropInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message.PropInfo propInfo = 1;
    if (has_propinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propinfo());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropInfo_IncludePropInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropInfo_IncludePropInfo*>(&from));
}

void PropInfo_IncludePropInfo::MergeFrom(const PropInfo_IncludePropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propinfo()) {
      mutable_propinfo()->::message::PropInfo::MergeFrom(from.propinfo());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void PropInfo_IncludePropInfo::CopyFrom(const PropInfo_IncludePropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropInfo_IncludePropInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_propinfo()) {
    if (!this->propinfo().IsInitialized()) return false;
  }
  return true;
}

void PropInfo_IncludePropInfo::Swap(PropInfo_IncludePropInfo* other) {
  if (other != this) {
    std::swap(propinfo_, other->propinfo_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropInfo_IncludePropInfo::GetTypeName() const {
  return "message.PropInfo.IncludePropInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PropInfo::kNameFieldNumber;
const int PropInfo::kIdFieldNumber;
const int PropInfo::kBuyMoneyFieldNumber;
const int PropInfo::kPosFieldNumber;
const int PropInfo::kIsBuyFieldNumber;
const int PropInfo::kDescribeFieldNumber;
const int PropInfo::kManualPropTypeFieldNumber;
const int PropInfo::kPropTypeFieldNumber;
const int PropInfo::kCheapMoneyFieldNumber;
const int PropInfo::kGiftBagFieldNumber;
const int PropInfo::kDurationFieldNumber;
#endif  // !_MSC_VER

PropInfo::PropInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PropInfo::InitAsDefaultInstance() {
}

PropInfo::PropInfo(const PropInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PropInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  buymoney_ = 0;
  pos_ = 0u;
  isbuy_ = false;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manualproptype_ = 0;
  proptype_ = 0;
  cheapmoney_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropInfo::~PropInfo() {
  SharedDtor();
}

void PropInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void PropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropInfo& PropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropInfo_2eproto();  return *default_instance_;
}

PropInfo* PropInfo::default_instance_ = NULL;

PropInfo* PropInfo::New() const {
  return new PropInfo;
}

void PropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0u;
    buymoney_ = 0;
    pos_ = 0u;
    isbuy_ = false;
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    manualproptype_ = 0;
    proptype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cheapmoney_ = 0;
    duration_ = 0;
  }
  giftbag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyMoney;
        break;
      }
      
      // optional int32 buyMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buymoney_)));
          set_has_buymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }
      
      // optional uint32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isBuy;
        break;
      }
      
      // optional bool isBuy = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbuy_)));
          set_has_isbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_describe;
        break;
      }
      
      // optional string describe = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_manualPropType;
        break;
      }
      
      // optional .message.PropInfo.ManualPropType manualPropType = 7 [default = BALLOON_PROPS_Unknow];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manualPropType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PropInfo_ManualPropType_IsValid(value)) {
            set_manualproptype(static_cast< ::message::PropInfo_ManualPropType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_propType;
        break;
      }
      
      // optional .message.PropInfo.PropType propType = 8 [default = Unknow];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PropInfo_PropType_IsValid(value)) {
            set_proptype(static_cast< ::message::PropInfo_PropType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cheapMoney;
        break;
      }
      
      // optional int32 cheapMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cheapMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cheapmoney_)));
          set_has_cheapmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_giftBag;
        break;
      }
      
      // repeated .message.PropInfo.IncludePropInfo giftBag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftbag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_giftBag;
        if (input->ExpectTag(93)) goto parse_duration;
        break;
      }
      
      // optional float duration = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional int32 buyMoney = 3;
  if (has_buymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buymoney(), output);
  }
  
  // optional uint32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos(), output);
  }
  
  // optional bool isBuy = 5 [default = false];
  if (has_isbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isbuy(), output);
  }
  
  // optional string describe = 6 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->describe(), output);
  }
  
  // optional .message.PropInfo.ManualPropType manualPropType = 7 [default = BALLOON_PROPS_Unknow];
  if (has_manualproptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->manualproptype(), output);
  }
  
  // optional .message.PropInfo.PropType propType = 8 [default = Unknow];
  if (has_proptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->proptype(), output);
  }
  
  // optional int32 cheapMoney = 9;
  if (has_cheapmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cheapmoney(), output);
  }
  
  // repeated .message.PropInfo.IncludePropInfo giftBag = 10;
  for (int i = 0; i < this->giftbag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->giftbag(i), output);
  }
  
  // optional float duration = 11;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->duration(), output);
  }
  
}

int PropInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional int32 buyMoney = 3;
    if (has_buymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buymoney());
    }
    
    // optional uint32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }
    
    // optional bool isBuy = 5 [default = false];
    if (has_isbuy()) {
      total_size += 1 + 1;
    }
    
    // optional string describe = 6 [default = ""];
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }
    
    // optional .message.PropInfo.ManualPropType manualPropType = 7 [default = BALLOON_PROPS_Unknow];
    if (has_manualproptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualproptype());
    }
    
    // optional .message.PropInfo.PropType propType = 8 [default = Unknow];
    if (has_proptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proptype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cheapMoney = 9;
    if (has_cheapmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cheapmoney());
    }
    
    // optional float duration = 11;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .message.PropInfo.IncludePropInfo giftBag = 10;
  total_size += 1 * this->giftbag_size();
  for (int i = 0; i < this->giftbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftbag(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropInfo*>(&from));
}

void PropInfo::MergeFrom(const PropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  giftbag_.MergeFrom(from.giftbag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buymoney()) {
      set_buymoney(from.buymoney());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_isbuy()) {
      set_isbuy(from.isbuy());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_manualproptype()) {
      set_manualproptype(from.manualproptype());
    }
    if (from.has_proptype()) {
      set_proptype(from.proptype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cheapmoney()) {
      set_cheapmoney(from.cheapmoney());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
}

void PropInfo::CopyFrom(const PropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropInfo::IsInitialized() const {
  
  for (int i = 0; i < giftbag_size(); i++) {
    if (!this->giftbag(i).IsInitialized()) return false;
  }
  return true;
}

void PropInfo::Swap(PropInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(buymoney_, other->buymoney_);
    std::swap(pos_, other->pos_);
    std::swap(isbuy_, other->isbuy_);
    std::swap(describe_, other->describe_);
    std::swap(manualproptype_, other->manualproptype_);
    std::swap(proptype_, other->proptype_);
    std::swap(cheapmoney_, other->cheapmoney_);
    giftbag_.Swap(&other->giftbag_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropInfo::GetTypeName() const {
  return "message.PropInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
