// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PropInfo.proto

#ifndef PROTOBUF_PropInfo_2eproto__INCLUDED
#define PROTOBUF_PropInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PropInfo_2eproto();
void protobuf_AssignDesc_PropInfo_2eproto();
void protobuf_ShutdownFile_PropInfo_2eproto();

class PropInfo;
class PropInfo_IncludePropInfo;

enum PropInfo_ManualPropType {
  PropInfo_ManualPropType_BALLOON_PROPS_Unknow = 0,
  PropInfo_ManualPropType_BALLOON_PROPS_ChangeColorFullScreen = 1,
  PropInfo_ManualPropType_BALLOON_PROPS_Lightning = 2,
  PropInfo_ManualPropType_BALLOON_PROPS_KingTime = 3,
  PropInfo_ManualPropType_BALLOON_PROPS_StratagemLevelByZero = 4
};
bool PropInfo_ManualPropType_IsValid(int value);
const PropInfo_ManualPropType PropInfo_ManualPropType_ManualPropType_MIN = PropInfo_ManualPropType_BALLOON_PROPS_Unknow;
const PropInfo_ManualPropType PropInfo_ManualPropType_ManualPropType_MAX = PropInfo_ManualPropType_BALLOON_PROPS_StratagemLevelByZero;
const int PropInfo_ManualPropType_ManualPropType_ARRAYSIZE = PropInfo_ManualPropType_ManualPropType_MAX + 1;

enum PropInfo_PropType {
  PropInfo_PropType_Unknow = 0,
  PropInfo_PropType_ManualProp = 1,
  PropInfo_PropType_BufferProp = 2
};
bool PropInfo_PropType_IsValid(int value);
const PropInfo_PropType PropInfo_PropType_PropType_MIN = PropInfo_PropType_Unknow;
const PropInfo_PropType PropInfo_PropType_PropType_MAX = PropInfo_PropType_BufferProp;
const int PropInfo_PropType_PropType_ARRAYSIZE = PropInfo_PropType_PropType_MAX + 1;

// ===================================================================

class PropInfo_IncludePropInfo : public ::google::protobuf::MessageLite {
 public:
  PropInfo_IncludePropInfo();
  virtual ~PropInfo_IncludePropInfo();
  
  PropInfo_IncludePropInfo(const PropInfo_IncludePropInfo& from);
  
  inline PropInfo_IncludePropInfo& operator=(const PropInfo_IncludePropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PropInfo_IncludePropInfo& default_instance();
  
  void Swap(PropInfo_IncludePropInfo* other);
  
  // implements Message ----------------------------------------------
  
  PropInfo_IncludePropInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PropInfo_IncludePropInfo& from);
  void MergeFrom(const PropInfo_IncludePropInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .message.PropInfo propInfo = 1;
  inline bool has_propinfo() const;
  inline void clear_propinfo();
  static const int kPropInfoFieldNumber = 1;
  inline const ::message::PropInfo& propinfo() const;
  inline ::message::PropInfo* mutable_propinfo();
  inline ::message::PropInfo* release_propinfo();
  
  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:message.PropInfo.IncludePropInfo)
 private:
  inline void set_has_propinfo();
  inline void clear_has_propinfo();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::message::PropInfo* propinfo_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PropInfo_2eproto();
  friend void protobuf_AssignDesc_PropInfo_2eproto();
  friend void protobuf_ShutdownFile_PropInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PropInfo_IncludePropInfo* default_instance_;
};
// -------------------------------------------------------------------

class PropInfo : public ::google::protobuf::MessageLite {
 public:
  PropInfo();
  virtual ~PropInfo();
  
  PropInfo(const PropInfo& from);
  
  inline PropInfo& operator=(const PropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PropInfo& default_instance();
  
  void Swap(PropInfo* other);
  
  // implements Message ----------------------------------------------
  
  PropInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PropInfo& from);
  void MergeFrom(const PropInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef PropInfo_IncludePropInfo IncludePropInfo;
  
  typedef PropInfo_ManualPropType ManualPropType;
  static const ManualPropType BALLOON_PROPS_Unknow = PropInfo_ManualPropType_BALLOON_PROPS_Unknow;
  static const ManualPropType BALLOON_PROPS_ChangeColorFullScreen = PropInfo_ManualPropType_BALLOON_PROPS_ChangeColorFullScreen;
  static const ManualPropType BALLOON_PROPS_Lightning = PropInfo_ManualPropType_BALLOON_PROPS_Lightning;
  static const ManualPropType BALLOON_PROPS_KingTime = PropInfo_ManualPropType_BALLOON_PROPS_KingTime;
  static const ManualPropType BALLOON_PROPS_StratagemLevelByZero = PropInfo_ManualPropType_BALLOON_PROPS_StratagemLevelByZero;
  static inline bool ManualPropType_IsValid(int value) {
    return PropInfo_ManualPropType_IsValid(value);
  }
  static const ManualPropType ManualPropType_MIN =
    PropInfo_ManualPropType_ManualPropType_MIN;
  static const ManualPropType ManualPropType_MAX =
    PropInfo_ManualPropType_ManualPropType_MAX;
  static const int ManualPropType_ARRAYSIZE =
    PropInfo_ManualPropType_ManualPropType_ARRAYSIZE;
  
  typedef PropInfo_PropType PropType;
  static const PropType Unknow = PropInfo_PropType_Unknow;
  static const PropType ManualProp = PropInfo_PropType_ManualProp;
  static const PropType BufferProp = PropInfo_PropType_BufferProp;
  static inline bool PropType_IsValid(int value) {
    return PropInfo_PropType_IsValid(value);
  }
  static const PropType PropType_MIN =
    PropInfo_PropType_PropType_MIN;
  static const PropType PropType_MAX =
    PropInfo_PropType_PropType_MAX;
  static const int PropType_ARRAYSIZE =
    PropInfo_PropType_PropType_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional int32 buyMoney = 3;
  inline bool has_buymoney() const;
  inline void clear_buymoney();
  static const int kBuyMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 buymoney() const;
  inline void set_buymoney(::google::protobuf::int32 value);
  
  // optional uint32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);
  
  // optional bool isBuy = 5 [default = false];
  inline bool has_isbuy() const;
  inline void clear_isbuy();
  static const int kIsBuyFieldNumber = 5;
  inline bool isbuy() const;
  inline void set_isbuy(bool value);
  
  // optional string describe = 6 [default = ""];
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 6;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  
  // optional .message.PropInfo.ManualPropType manualPropType = 7 [default = BALLOON_PROPS_Unknow];
  inline bool has_manualproptype() const;
  inline void clear_manualproptype();
  static const int kManualPropTypeFieldNumber = 7;
  inline ::message::PropInfo_ManualPropType manualproptype() const;
  inline void set_manualproptype(::message::PropInfo_ManualPropType value);
  
  // optional .message.PropInfo.PropType propType = 8 [default = Unknow];
  inline bool has_proptype() const;
  inline void clear_proptype();
  static const int kPropTypeFieldNumber = 8;
  inline ::message::PropInfo_PropType proptype() const;
  inline void set_proptype(::message::PropInfo_PropType value);
  
  // optional int32 cheapMoney = 9;
  inline bool has_cheapmoney() const;
  inline void clear_cheapmoney();
  static const int kCheapMoneyFieldNumber = 9;
  inline ::google::protobuf::int32 cheapmoney() const;
  inline void set_cheapmoney(::google::protobuf::int32 value);
  
  // repeated .message.PropInfo.IncludePropInfo giftBag = 10;
  inline int giftbag_size() const;
  inline void clear_giftbag();
  static const int kGiftBagFieldNumber = 10;
  inline const ::message::PropInfo_IncludePropInfo& giftbag(int index) const;
  inline ::message::PropInfo_IncludePropInfo* mutable_giftbag(int index);
  inline ::message::PropInfo_IncludePropInfo* add_giftbag();
  inline const ::google::protobuf::RepeatedPtrField< ::message::PropInfo_IncludePropInfo >&
      giftbag() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::PropInfo_IncludePropInfo >*
      mutable_giftbag();
  
  // optional float duration = 11;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 11;
  inline float duration() const;
  inline void set_duration(float value);
  
  // @@protoc_insertion_point(class_scope:message.PropInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buymoney();
  inline void clear_has_buymoney();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_isbuy();
  inline void clear_has_isbuy();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_manualproptype();
  inline void clear_has_manualproptype();
  inline void set_has_proptype();
  inline void clear_has_proptype();
  inline void set_has_cheapmoney();
  inline void clear_has_cheapmoney();
  inline void set_has_duration();
  inline void clear_has_duration();
  
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 buymoney_;
  ::google::protobuf::uint32 pos_;
  bool isbuy_;
  ::std::string* describe_;
  int manualproptype_;
  int proptype_;
  ::google::protobuf::RepeatedPtrField< ::message::PropInfo_IncludePropInfo > giftbag_;
  ::google::protobuf::int32 cheapmoney_;
  float duration_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_PropInfo_2eproto();
  friend void protobuf_AssignDesc_PropInfo_2eproto();
  friend void protobuf_ShutdownFile_PropInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PropInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PropInfo_IncludePropInfo

// required .message.PropInfo propInfo = 1;
inline bool PropInfo_IncludePropInfo::has_propinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropInfo_IncludePropInfo::set_has_propinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropInfo_IncludePropInfo::clear_has_propinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropInfo_IncludePropInfo::clear_propinfo() {
  if (propinfo_ != NULL) propinfo_->::message::PropInfo::Clear();
  clear_has_propinfo();
}
inline const ::message::PropInfo& PropInfo_IncludePropInfo::propinfo() const {
  return propinfo_ != NULL ? *propinfo_ : *default_instance_->propinfo_;
}
inline ::message::PropInfo* PropInfo_IncludePropInfo::mutable_propinfo() {
  set_has_propinfo();
  if (propinfo_ == NULL) propinfo_ = new ::message::PropInfo;
  return propinfo_;
}
inline ::message::PropInfo* PropInfo_IncludePropInfo::release_propinfo() {
  clear_has_propinfo();
  ::message::PropInfo* temp = propinfo_;
  propinfo_ = NULL;
  return temp;
}

// required int32 count = 2;
inline bool PropInfo_IncludePropInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropInfo_IncludePropInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropInfo_IncludePropInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropInfo_IncludePropInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PropInfo_IncludePropInfo::count() const {
  return count_;
}
inline void PropInfo_IncludePropInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// PropInfo

// optional string name = 1;
inline bool PropInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PropInfo::name() const {
  return *name_;
}
inline void PropInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PropInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PropInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PropInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 id = 2;
inline bool PropInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PropInfo::id() const {
  return id_;
}
inline void PropInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 buyMoney = 3;
inline bool PropInfo::has_buymoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropInfo::set_has_buymoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropInfo::clear_has_buymoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropInfo::clear_buymoney() {
  buymoney_ = 0;
  clear_has_buymoney();
}
inline ::google::protobuf::int32 PropInfo::buymoney() const {
  return buymoney_;
}
inline void PropInfo::set_buymoney(::google::protobuf::int32 value) {
  set_has_buymoney();
  buymoney_ = value;
}

// optional uint32 pos = 4;
inline bool PropInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 PropInfo::pos() const {
  return pos_;
}
inline void PropInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional bool isBuy = 5 [default = false];
inline bool PropInfo::has_isbuy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PropInfo::set_has_isbuy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PropInfo::clear_has_isbuy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PropInfo::clear_isbuy() {
  isbuy_ = false;
  clear_has_isbuy();
}
inline bool PropInfo::isbuy() const {
  return isbuy_;
}
inline void PropInfo::set_isbuy(bool value) {
  set_has_isbuy();
  isbuy_ = value;
}

// optional string describe = 6 [default = ""];
inline bool PropInfo::has_describe() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PropInfo::set_has_describe() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PropInfo::clear_has_describe() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PropInfo::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& PropInfo::describe() const {
  return *describe_;
}
inline void PropInfo::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void PropInfo::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void PropInfo::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropInfo::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* PropInfo::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .message.PropInfo.ManualPropType manualPropType = 7 [default = BALLOON_PROPS_Unknow];
inline bool PropInfo::has_manualproptype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PropInfo::set_has_manualproptype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PropInfo::clear_has_manualproptype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PropInfo::clear_manualproptype() {
  manualproptype_ = 0;
  clear_has_manualproptype();
}
inline ::message::PropInfo_ManualPropType PropInfo::manualproptype() const {
  return static_cast< ::message::PropInfo_ManualPropType >(manualproptype_);
}
inline void PropInfo::set_manualproptype(::message::PropInfo_ManualPropType value) {
  GOOGLE_DCHECK(::message::PropInfo_ManualPropType_IsValid(value));
  set_has_manualproptype();
  manualproptype_ = value;
}

// optional .message.PropInfo.PropType propType = 8 [default = Unknow];
inline bool PropInfo::has_proptype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PropInfo::set_has_proptype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PropInfo::clear_has_proptype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PropInfo::clear_proptype() {
  proptype_ = 0;
  clear_has_proptype();
}
inline ::message::PropInfo_PropType PropInfo::proptype() const {
  return static_cast< ::message::PropInfo_PropType >(proptype_);
}
inline void PropInfo::set_proptype(::message::PropInfo_PropType value) {
  GOOGLE_DCHECK(::message::PropInfo_PropType_IsValid(value));
  set_has_proptype();
  proptype_ = value;
}

// optional int32 cheapMoney = 9;
inline bool PropInfo::has_cheapmoney() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PropInfo::set_has_cheapmoney() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PropInfo::clear_has_cheapmoney() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PropInfo::clear_cheapmoney() {
  cheapmoney_ = 0;
  clear_has_cheapmoney();
}
inline ::google::protobuf::int32 PropInfo::cheapmoney() const {
  return cheapmoney_;
}
inline void PropInfo::set_cheapmoney(::google::protobuf::int32 value) {
  set_has_cheapmoney();
  cheapmoney_ = value;
}

// repeated .message.PropInfo.IncludePropInfo giftBag = 10;
inline int PropInfo::giftbag_size() const {
  return giftbag_.size();
}
inline void PropInfo::clear_giftbag() {
  giftbag_.Clear();
}
inline const ::message::PropInfo_IncludePropInfo& PropInfo::giftbag(int index) const {
  return giftbag_.Get(index);
}
inline ::message::PropInfo_IncludePropInfo* PropInfo::mutable_giftbag(int index) {
  return giftbag_.Mutable(index);
}
inline ::message::PropInfo_IncludePropInfo* PropInfo::add_giftbag() {
  return giftbag_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::PropInfo_IncludePropInfo >&
PropInfo::giftbag() const {
  return giftbag_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::PropInfo_IncludePropInfo >*
PropInfo::mutable_giftbag() {
  return &giftbag_;
}

// optional float duration = 11;
inline bool PropInfo::has_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PropInfo::set_has_duration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PropInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PropInfo::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float PropInfo::duration() const {
  return duration_;
}
inline void PropInfo::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PropInfo_2eproto__INCLUDED
