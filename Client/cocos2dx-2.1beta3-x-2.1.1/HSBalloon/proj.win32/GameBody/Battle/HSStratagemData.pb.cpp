// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HSStratagemData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_HSStratagemData_2eproto() {
  delete StratagemData::default_instance_;
  delete StratagemData_StratagemConfig::default_instance_;
  delete StratagemData_StratagemAction::default_instance_;
  delete StratagemData_StratagemStep::default_instance_;
  delete StratagemData_StratagemBase::default_instance_;
}

void protobuf_AddDesc_HSStratagemData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  StratagemData::default_instance_ = new StratagemData();
  StratagemData_StratagemConfig::default_instance_ = new StratagemData_StratagemConfig();
  StratagemData_StratagemAction::default_instance_ = new StratagemData_StratagemAction();
  StratagemData_StratagemStep::default_instance_ = new StratagemData_StratagemStep();
  StratagemData_StratagemBase::default_instance_ = new StratagemData_StratagemBase();
  StratagemData::default_instance_->InitAsDefaultInstance();
  StratagemData_StratagemConfig::default_instance_->InitAsDefaultInstance();
  StratagemData_StratagemAction::default_instance_->InitAsDefaultInstance();
  StratagemData_StratagemStep::default_instance_->InitAsDefaultInstance();
  StratagemData_StratagemBase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HSStratagemData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HSStratagemData_2eproto {
  StaticDescriptorInitializer_HSStratagemData_2eproto() {
    protobuf_AddDesc_HSStratagemData_2eproto();
  }
} static_descriptor_initializer_HSStratagemData_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int StratagemData_StratagemConfig::kIdFieldNumber;
const int StratagemData_StratagemConfig::kBodyShapePlistNameFieldNumber;
const int StratagemData_StratagemConfig::kStratagemBaseListFieldNumber;
const int StratagemData_StratagemConfig::kActionListFieldNumber;
#endif  // !_MSC_VER

StratagemData_StratagemConfig::StratagemData_StratagemConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StratagemData_StratagemConfig::InitAsDefaultInstance() {
}

StratagemData_StratagemConfig::StratagemData_StratagemConfig(const StratagemData_StratagemConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StratagemData_StratagemConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  bodyshapeplistname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StratagemData_StratagemConfig::~StratagemData_StratagemConfig() {
  SharedDtor();
}

void StratagemData_StratagemConfig::SharedDtor() {
  if (bodyshapeplistname_ != &::google::protobuf::internal::kEmptyString) {
    delete bodyshapeplistname_;
  }
  if (this != default_instance_) {
  }
}

void StratagemData_StratagemConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StratagemData_StratagemConfig& StratagemData_StratagemConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSStratagemData_2eproto();  return *default_instance_;
}

StratagemData_StratagemConfig* StratagemData_StratagemConfig::default_instance_ = NULL;

StratagemData_StratagemConfig* StratagemData_StratagemConfig::New() const {
  return new StratagemData_StratagemConfig;
}

void StratagemData_StratagemConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_bodyshapeplistname()) {
      if (bodyshapeplistname_ != &::google::protobuf::internal::kEmptyString) {
        bodyshapeplistname_->clear();
      }
    }
  }
  stratagembaselist_.Clear();
  actionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StratagemData_StratagemConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bodyShapePlistName;
        break;
      }
      
      // required string bodyShapePlistName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyShapePlistName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodyshapeplistname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stratagemBaseList;
        break;
      }
      
      // repeated .message.StratagemData.StratagemBase stratagemBaseList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stratagemBaseList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stratagembaselist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stratagemBaseList;
        if (input->ExpectTag(34)) goto parse_actionList;
        break;
      }
      
      // repeated .message.StratagemData.StratagemAction actionList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actionList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StratagemData_StratagemConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required string bodyShapePlistName = 2;
  if (has_bodyshapeplistname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bodyshapeplistname(), output);
  }
  
  // repeated .message.StratagemData.StratagemBase stratagemBaseList = 3;
  for (int i = 0; i < this->stratagembaselist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->stratagembaselist(i), output);
  }
  
  // repeated .message.StratagemData.StratagemAction actionList = 4;
  for (int i = 0; i < this->actionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->actionlist(i), output);
  }
  
}

int StratagemData_StratagemConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required string bodyShapePlistName = 2;
    if (has_bodyshapeplistname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodyshapeplistname());
    }
    
  }
  // repeated .message.StratagemData.StratagemBase stratagemBaseList = 3;
  total_size += 1 * this->stratagembaselist_size();
  for (int i = 0; i < this->stratagembaselist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stratagembaselist(i));
  }
  
  // repeated .message.StratagemData.StratagemAction actionList = 4;
  total_size += 1 * this->actionlist_size();
  for (int i = 0; i < this->actionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actionlist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StratagemData_StratagemConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StratagemData_StratagemConfig*>(&from));
}

void StratagemData_StratagemConfig::MergeFrom(const StratagemData_StratagemConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  stratagembaselist_.MergeFrom(from.stratagembaselist_);
  actionlist_.MergeFrom(from.actionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bodyshapeplistname()) {
      set_bodyshapeplistname(from.bodyshapeplistname());
    }
  }
}

void StratagemData_StratagemConfig::CopyFrom(const StratagemData_StratagemConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StratagemData_StratagemConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < stratagembaselist_size(); i++) {
    if (!this->stratagembaselist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < actionlist_size(); i++) {
    if (!this->actionlist(i).IsInitialized()) return false;
  }
  return true;
}

void StratagemData_StratagemConfig::Swap(StratagemData_StratagemConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bodyshapeplistname_, other->bodyshapeplistname_);
    stratagembaselist_.Swap(&other->stratagembaselist_);
    actionlist_.Swap(&other->actionlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StratagemData_StratagemConfig::GetTypeName() const {
  return "message.StratagemData.StratagemConfig";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StratagemData_StratagemAction::kIdFieldNumber;
const int StratagemData_StratagemAction::kTogetherMoveListFieldNumber;
const int StratagemData_StratagemAction::kSequenceMovesListFieldNumber;
#endif  // !_MSC_VER

StratagemData_StratagemAction::StratagemData_StratagemAction()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StratagemData_StratagemAction::InitAsDefaultInstance() {
}

StratagemData_StratagemAction::StratagemData_StratagemAction(const StratagemData_StratagemAction& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StratagemData_StratagemAction::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StratagemData_StratagemAction::~StratagemData_StratagemAction() {
  SharedDtor();
}

void StratagemData_StratagemAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StratagemData_StratagemAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StratagemData_StratagemAction& StratagemData_StratagemAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSStratagemData_2eproto();  return *default_instance_;
}

StratagemData_StratagemAction* StratagemData_StratagemAction::default_instance_ = NULL;

StratagemData_StratagemAction* StratagemData_StratagemAction::New() const {
  return new StratagemData_StratagemAction;
}

void StratagemData_StratagemAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  togethermovelist_.Clear();
  sequencemoveslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StratagemData_StratagemAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_togetherMoveList;
        break;
      }
      
      // repeated .message.StratagemData.StratagemStep togetherMoveList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_togetherMoveList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_togethermovelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_togetherMoveList;
        if (input->ExpectTag(26)) goto parse_sequenceMovesList;
        break;
      }
      
      // repeated .message.StratagemData.StratagemStep sequenceMovesList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sequenceMovesList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sequencemoveslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sequenceMovesList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StratagemData_StratagemAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .message.StratagemData.StratagemStep togetherMoveList = 2;
  for (int i = 0; i < this->togethermovelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->togethermovelist(i), output);
  }
  
  // repeated .message.StratagemData.StratagemStep sequenceMovesList = 3;
  for (int i = 0; i < this->sequencemoveslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->sequencemoveslist(i), output);
  }
  
}

int StratagemData_StratagemAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .message.StratagemData.StratagemStep togetherMoveList = 2;
  total_size += 1 * this->togethermovelist_size();
  for (int i = 0; i < this->togethermovelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->togethermovelist(i));
  }
  
  // repeated .message.StratagemData.StratagemStep sequenceMovesList = 3;
  total_size += 1 * this->sequencemoveslist_size();
  for (int i = 0; i < this->sequencemoveslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sequencemoveslist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StratagemData_StratagemAction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StratagemData_StratagemAction*>(&from));
}

void StratagemData_StratagemAction::MergeFrom(const StratagemData_StratagemAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  togethermovelist_.MergeFrom(from.togethermovelist_);
  sequencemoveslist_.MergeFrom(from.sequencemoveslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void StratagemData_StratagemAction::CopyFrom(const StratagemData_StratagemAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StratagemData_StratagemAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < togethermovelist_size(); i++) {
    if (!this->togethermovelist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sequencemoveslist_size(); i++) {
    if (!this->sequencemoveslist(i).IsInitialized()) return false;
  }
  return true;
}

void StratagemData_StratagemAction::Swap(StratagemData_StratagemAction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    togethermovelist_.Swap(&other->togethermovelist_);
    sequencemoveslist_.Swap(&other->sequencemoveslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StratagemData_StratagemAction::GetTypeName() const {
  return "message.StratagemData.StratagemAction";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StratagemData_StratagemStep::kStepIdFieldNumber;
const int StratagemData_StratagemStep::kStratagemIdFieldNumber;
const int StratagemData_StratagemStep::kXFieldNumber;
const int StratagemData_StratagemStep::kYFieldNumber;
const int StratagemData_StratagemStep::kDurationFieldNumber;
#endif  // !_MSC_VER

StratagemData_StratagemStep::StratagemData_StratagemStep()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StratagemData_StratagemStep::InitAsDefaultInstance() {
}

StratagemData_StratagemStep::StratagemData_StratagemStep(const StratagemData_StratagemStep& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StratagemData_StratagemStep::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  stratagemid_ = 0u;
  x_ = 0;
  y_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StratagemData_StratagemStep::~StratagemData_StratagemStep() {
  SharedDtor();
}

void StratagemData_StratagemStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StratagemData_StratagemStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StratagemData_StratagemStep& StratagemData_StratagemStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSStratagemData_2eproto();  return *default_instance_;
}

StratagemData_StratagemStep* StratagemData_StratagemStep::default_instance_ = NULL;

StratagemData_StratagemStep* StratagemData_StratagemStep::New() const {
  return new StratagemData_StratagemStep;
}

void StratagemData_StratagemStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stepid_ = 0u;
    stratagemid_ = 0u;
    x_ = 0;
    y_ = 0;
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StratagemData_StratagemStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stepId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stratagemId;
        break;
      }
      
      // required uint32 stratagemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stratagemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stratagemid_)));
          set_has_stratagemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }
      
      // required int32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }
      
      // required int32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_duration;
        break;
      }
      
      // required float duration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StratagemData_StratagemStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stepId = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }
  
  // required uint32 stratagemId = 2;
  if (has_stratagemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stratagemid(), output);
  }
  
  // required int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }
  
  // required int32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }
  
  // required float duration = 5;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->duration(), output);
  }
  
}

int StratagemData_StratagemStep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stepId = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }
    
    // required uint32 stratagemId = 2;
    if (has_stratagemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stratagemid());
    }
    
    // required int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // required float duration = 5;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StratagemData_StratagemStep::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StratagemData_StratagemStep*>(&from));
}

void StratagemData_StratagemStep::MergeFrom(const StratagemData_StratagemStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_stratagemid()) {
      set_stratagemid(from.stratagemid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
}

void StratagemData_StratagemStep::CopyFrom(const StratagemData_StratagemStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StratagemData_StratagemStep::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void StratagemData_StratagemStep::Swap(StratagemData_StratagemStep* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(stratagemid_, other->stratagemid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StratagemData_StratagemStep::GetTypeName() const {
  return "message.StratagemData.StratagemStep";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StratagemData_StratagemBase::kTextureNameFieldNumber;
const int StratagemData_StratagemBase::kIdFieldNumber;
const int StratagemData_StratagemBase::kSourceXFieldNumber;
const int StratagemData_StratagemBase::kSourceYFieldNumber;
#endif  // !_MSC_VER

StratagemData_StratagemBase::StratagemData_StratagemBase()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StratagemData_StratagemBase::InitAsDefaultInstance() {
}

StratagemData_StratagemBase::StratagemData_StratagemBase(const StratagemData_StratagemBase& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StratagemData_StratagemBase::SharedCtor() {
  _cached_size_ = 0;
  texturename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  sourcex_ = 0;
  sourcey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StratagemData_StratagemBase::~StratagemData_StratagemBase() {
  SharedDtor();
}

void StratagemData_StratagemBase::SharedDtor() {
  if (texturename_ != &::google::protobuf::internal::kEmptyString) {
    delete texturename_;
  }
  if (this != default_instance_) {
  }
}

void StratagemData_StratagemBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StratagemData_StratagemBase& StratagemData_StratagemBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSStratagemData_2eproto();  return *default_instance_;
}

StratagemData_StratagemBase* StratagemData_StratagemBase::default_instance_ = NULL;

StratagemData_StratagemBase* StratagemData_StratagemBase::New() const {
  return new StratagemData_StratagemBase;
}

void StratagemData_StratagemBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_texturename()) {
      if (texturename_ != &::google::protobuf::internal::kEmptyString) {
        texturename_->clear();
      }
    }
    id_ = 0u;
    sourcex_ = 0;
    sourcey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StratagemData_StratagemBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string textureName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texturename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sourceX;
        break;
      }
      
      // required float sourceX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sourceX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sourcex_)));
          set_has_sourcex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sourceY;
        break;
      }
      
      // required float sourceY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sourceY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sourcey_)));
          set_has_sourcey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StratagemData_StratagemBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string textureName = 1;
  if (has_texturename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->texturename(), output);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // required float sourceX = 3;
  if (has_sourcex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sourcex(), output);
  }
  
  // required float sourceY = 4;
  if (has_sourcey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sourcey(), output);
  }
  
}

int StratagemData_StratagemBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string textureName = 1;
    if (has_texturename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texturename());
    }
    
    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required float sourceX = 3;
    if (has_sourcex()) {
      total_size += 1 + 4;
    }
    
    // required float sourceY = 4;
    if (has_sourcey()) {
      total_size += 1 + 4;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StratagemData_StratagemBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StratagemData_StratagemBase*>(&from));
}

void StratagemData_StratagemBase::MergeFrom(const StratagemData_StratagemBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_texturename()) {
      set_texturename(from.texturename());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sourcex()) {
      set_sourcex(from.sourcex());
    }
    if (from.has_sourcey()) {
      set_sourcey(from.sourcey());
    }
  }
}

void StratagemData_StratagemBase::CopyFrom(const StratagemData_StratagemBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StratagemData_StratagemBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StratagemData_StratagemBase::Swap(StratagemData_StratagemBase* other) {
  if (other != this) {
    std::swap(texturename_, other->texturename_);
    std::swap(id_, other->id_);
    std::swap(sourcex_, other->sourcex_);
    std::swap(sourcey_, other->sourcey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StratagemData_StratagemBase::GetTypeName() const {
  return "message.StratagemData.StratagemBase";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StratagemData::kIdFieldNumber;
const int StratagemData::kConfigFieldNumber;
#endif  // !_MSC_VER

StratagemData::StratagemData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StratagemData::InitAsDefaultInstance() {
}

StratagemData::StratagemData(const StratagemData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StratagemData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StratagemData::~StratagemData() {
  SharedDtor();
}

void StratagemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StratagemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StratagemData& StratagemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSStratagemData_2eproto();  return *default_instance_;
}

StratagemData* StratagemData::default_instance_ = NULL;

StratagemData* StratagemData::New() const {
  return new StratagemData;
}

void StratagemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StratagemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }
      
      // repeated .message.StratagemData.StratagemConfig config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StratagemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .message.StratagemData.StratagemConfig config = 2;
  for (int i = 0; i < this->config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->config(i), output);
  }
  
}

int StratagemData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .message.StratagemData.StratagemConfig config = 2;
  total_size += 1 * this->config_size();
  for (int i = 0; i < this->config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StratagemData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StratagemData*>(&from));
}

void StratagemData::MergeFrom(const StratagemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_.MergeFrom(from.config_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void StratagemData::CopyFrom(const StratagemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StratagemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < config_size(); i++) {
    if (!this->config(i).IsInitialized()) return false;
  }
  return true;
}

void StratagemData::Swap(StratagemData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    config_.Swap(&other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StratagemData::GetTypeName() const {
  return "message.StratagemData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
