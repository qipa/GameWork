// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HSGameGuide.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HSGameGuide.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_HSGameGuide_2eproto() {
  delete GameGuide::default_instance_;
  delete GameGuide_Guide::default_instance_;
  delete GameGuide_Guide_Point::default_instance_;
  delete GameGuide_BattleLayout::default_instance_;
  delete GameGuide_BattleLayout_BalloonInfo::default_instance_;
  delete GameGuide_BattleLayout_Move::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_HSGameGuide_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_HSGameGuide_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GameGuide::default_instance_ = new GameGuide();
  GameGuide_Guide::default_instance_ = new GameGuide_Guide();
  GameGuide_Guide_Point::default_instance_ = new GameGuide_Guide_Point();
  GameGuide_BattleLayout::default_instance_ = new GameGuide_BattleLayout();
  GameGuide_BattleLayout_BalloonInfo::default_instance_ = new GameGuide_BattleLayout_BalloonInfo();
  GameGuide_BattleLayout_Move::default_instance_ = new GameGuide_BattleLayout_Move();
  GameGuide::default_instance_->InitAsDefaultInstance();
  GameGuide_Guide::default_instance_->InitAsDefaultInstance();
  GameGuide_Guide_Point::default_instance_->InitAsDefaultInstance();
  GameGuide_BattleLayout::default_instance_->InitAsDefaultInstance();
  GameGuide_BattleLayout_BalloonInfo::default_instance_->InitAsDefaultInstance();
  GameGuide_BattleLayout_Move::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HSGameGuide_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_HSGameGuide_2eproto_once_);
void protobuf_AddDesc_HSGameGuide_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_HSGameGuide_2eproto_once_,
                 &protobuf_AddDesc_HSGameGuide_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HSGameGuide_2eproto {
  StaticDescriptorInitializer_HSGameGuide_2eproto() {
    protobuf_AddDesc_HSGameGuide_2eproto();
  }
} static_descriptor_initializer_HSGameGuide_2eproto_;
#endif

// ===================================================================

bool GameGuide_Guide_ModeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameGuide_Guide_ModeType GameGuide_Guide::ModeType_Rect;
const GameGuide_Guide_ModeType GameGuide_Guide::ModeType_Round;
const GameGuide_Guide_ModeType GameGuide_Guide::ModeType_NULL;
const GameGuide_Guide_ModeType GameGuide_Guide::ModeType_MIN;
const GameGuide_Guide_ModeType GameGuide_Guide::ModeType_MAX;
const int GameGuide_Guide::ModeType_ARRAYSIZE;
#endif  // _MSC_VER
bool GameGuide_Guide_MirrorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameGuide_Guide_MirrorType GameGuide_Guide::MirrorType_X;
const GameGuide_Guide_MirrorType GameGuide_Guide::MirrorType_Y;
const GameGuide_Guide_MirrorType GameGuide_Guide::MirrorType_MIN;
const GameGuide_Guide_MirrorType GameGuide_Guide::MirrorType_MAX;
const int GameGuide_Guide::MirrorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameGuide_Guide_Point::kXFieldNumber;
const int GameGuide_Guide_Point::kYFieldNumber;
#endif  // !_MSC_VER

GameGuide_Guide_Point::GameGuide_Guide_Point()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameGuide_Guide_Point::InitAsDefaultInstance() {
}

GameGuide_Guide_Point::GameGuide_Guide_Point(const GameGuide_Guide_Point& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameGuide_Guide_Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameGuide_Guide_Point::~GameGuide_Guide_Point() {
  SharedDtor();
}

void GameGuide_Guide_Point::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameGuide_Guide_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameGuide_Guide_Point& GameGuide_Guide_Point::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_HSGameGuide_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_HSGameGuide_2eproto();
#endif
  return *default_instance_;
}

GameGuide_Guide_Point* GameGuide_Guide_Point::default_instance_ = NULL;

GameGuide_Guide_Point* GameGuide_Guide_Point::New() const {
  return new GameGuide_Guide_Point;
}

void GameGuide_Guide_Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameGuide_Guide_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameGuide_Guide_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

}

int GameGuide_Guide_Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameGuide_Guide_Point::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameGuide_Guide_Point*>(&from));
}

void GameGuide_Guide_Point::MergeFrom(const GameGuide_Guide_Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void GameGuide_Guide_Point::CopyFrom(const GameGuide_Guide_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGuide_Guide_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameGuide_Guide_Point::Swap(GameGuide_Guide_Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameGuide_Guide_Point::GetTypeName() const {
  return "message.GameGuide.Guide.Point";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameGuide_Guide::kIdFieldNumber;
const int GameGuide_Guide::kIsInterceptTouchFieldNumber;
const int GameGuide_Guide::kIsShowMaskFieldNumber;
const int GameGuide_Guide::kIsShowHoleFieldNumber;
const int GameGuide_Guide::kIsPauseFieldNumber;
const int GameGuide_Guide::kModeTypeFieldNumber;
const int GameGuide_Guide::kModePosFieldNumber;
const int GameGuide_Guide::kWFieldNumber;
const int GameGuide_Guide::kHFieldNumber;
const int GameGuide_Guide::kIndicationSignPosFieldNumber;
const int GameGuide_Guide::kMirrorFieldNumber;
const int GameGuide_Guide::kRotateFieldNumber;
const int GameGuide_Guide::kDescribeFramePosFieldNumber;
const int GameGuide_Guide::kDescribeFieldNumber;
#endif  // !_MSC_VER

GameGuide_Guide::GameGuide_Guide()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameGuide_Guide::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  modepos_ = const_cast< ::message::GameGuide_Guide_Point*>(
      ::message::GameGuide_Guide_Point::internal_default_instance());
#else
  modepos_ = const_cast< ::message::GameGuide_Guide_Point*>(&::message::GameGuide_Guide_Point::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  indicationsignpos_ = const_cast< ::message::GameGuide_Guide_Point*>(
      ::message::GameGuide_Guide_Point::internal_default_instance());
#else
  indicationsignpos_ = const_cast< ::message::GameGuide_Guide_Point*>(&::message::GameGuide_Guide_Point::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  describeframepos_ = const_cast< ::message::GameGuide_Guide_Point*>(
      ::message::GameGuide_Guide_Point::internal_default_instance());
#else
  describeframepos_ = const_cast< ::message::GameGuide_Guide_Point*>(&::message::GameGuide_Guide_Point::default_instance());
#endif
}

GameGuide_Guide::GameGuide_Guide(const GameGuide_Guide& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameGuide_Guide::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  isintercepttouch_ = false;
  isshowmask_ = false;
  isshowhole_ = false;
  ispause_ = false;
  modetype_ = 0;
  modepos_ = NULL;
  w_ = 0;
  h_ = 0;
  indicationsignpos_ = NULL;
  mirror_ = 0;
  rotate_ = 0;
  describeframepos_ = NULL;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameGuide_Guide::~GameGuide_Guide() {
  SharedDtor();
}

void GameGuide_Guide::SharedDtor() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete modepos_;
    delete indicationsignpos_;
    delete describeframepos_;
  }
}

void GameGuide_Guide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameGuide_Guide& GameGuide_Guide::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_HSGameGuide_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_HSGameGuide_2eproto();
#endif
  return *default_instance_;
}

GameGuide_Guide* GameGuide_Guide::default_instance_ = NULL;

GameGuide_Guide* GameGuide_Guide::New() const {
  return new GameGuide_Guide;
}

void GameGuide_Guide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    isintercepttouch_ = false;
    isshowmask_ = false;
    isshowhole_ = false;
    ispause_ = false;
    modetype_ = 0;
    if (has_modepos()) {
      if (modepos_ != NULL) modepos_->::message::GameGuide_Guide_Point::Clear();
    }
    w_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    h_ = 0;
    if (has_indicationsignpos()) {
      if (indicationsignpos_ != NULL) indicationsignpos_->::message::GameGuide_Guide_Point::Clear();
    }
    mirror_ = 0;
    rotate_ = 0;
    if (has_describeframepos()) {
      if (describeframepos_ != NULL) describeframepos_->::message::GameGuide_Guide_Point::Clear();
    }
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameGuide_Guide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isInterceptTouch;
        break;
      }

      // required bool isInterceptTouch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInterceptTouch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isintercepttouch_)));
          set_has_isintercepttouch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isShowMask;
        break;
      }

      // required bool isShowMask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShowMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshowmask_)));
          set_has_isshowmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isShowHole;
        break;
      }

      // required bool isShowHole = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShowHole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshowhole_)));
          set_has_isshowhole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isPause;
        break;
      }

      // required bool isPause = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispause_)));
          set_has_ispause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_modeType;
        break;
      }

      // optional .message.GameGuide.Guide.ModeType modeType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::GameGuide_Guide_ModeType_IsValid(value)) {
            set_modetype(static_cast< ::message::GameGuide_Guide_ModeType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_modePos;
        break;
      }

      // optional .message.GameGuide.Guide.Point modePos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modePos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modepos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_w;
        break;
      }

      // optional float w = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_h;
        break;
      }

      // optional float h = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_indicationSignPos;
        break;
      }

      // optional .message.GameGuide.Guide.Point indicationSignPos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indicationSignPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indicationsignpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mirror;
        break;
      }

      // optional .message.GameGuide.Guide.MirrorType mirror = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirror:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::GameGuide_Guide_MirrorType_IsValid(value)) {
            set_mirror(static_cast< ::message::GameGuide_Guide_MirrorType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_rotate;
        break;
      }

      // optional float rotate = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_describeFramePos;
        break;
      }

      // optional .message.GameGuide.Guide.Point describeFramePos = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describeFramePos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_describeframepos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_describe;
        break;
      }

      // optional string describe = 14 [default = ""];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameGuide_Guide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool isInterceptTouch = 2;
  if (has_isintercepttouch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isintercepttouch(), output);
  }

  // required bool isShowMask = 3;
  if (has_isshowmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isshowmask(), output);
  }

  // required bool isShowHole = 4;
  if (has_isshowhole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isshowhole(), output);
  }

  // required bool isPause = 5;
  if (has_ispause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ispause(), output);
  }

  // optional .message.GameGuide.Guide.ModeType modeType = 6;
  if (has_modetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->modetype(), output);
  }

  // optional .message.GameGuide.Guide.Point modePos = 7;
  if (has_modepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->modepos(), output);
  }

  // optional float w = 8;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->w(), output);
  }

  // optional float h = 9;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->h(), output);
  }

  // optional .message.GameGuide.Guide.Point indicationSignPos = 10;
  if (has_indicationsignpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->indicationsignpos(), output);
  }

  // optional .message.GameGuide.Guide.MirrorType mirror = 11;
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->mirror(), output);
  }

  // optional float rotate = 12 [default = 0];
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->rotate(), output);
  }

  // optional .message.GameGuide.Guide.Point describeFramePos = 13;
  if (has_describeframepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->describeframepos(), output);
  }

  // optional string describe = 14 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->describe(), output);
  }

}

int GameGuide_Guide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool isInterceptTouch = 2;
    if (has_isintercepttouch()) {
      total_size += 1 + 1;
    }

    // required bool isShowMask = 3;
    if (has_isshowmask()) {
      total_size += 1 + 1;
    }

    // required bool isShowHole = 4;
    if (has_isshowhole()) {
      total_size += 1 + 1;
    }

    // required bool isPause = 5;
    if (has_ispause()) {
      total_size += 1 + 1;
    }

    // optional .message.GameGuide.Guide.ModeType modeType = 6;
    if (has_modetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modetype());
    }

    // optional .message.GameGuide.Guide.Point modePos = 7;
    if (has_modepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modepos());
    }

    // optional float w = 8;
    if (has_w()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float h = 9;
    if (has_h()) {
      total_size += 1 + 4;
    }

    // optional .message.GameGuide.Guide.Point indicationSignPos = 10;
    if (has_indicationsignpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indicationsignpos());
    }

    // optional .message.GameGuide.Guide.MirrorType mirror = 11;
    if (has_mirror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mirror());
    }

    // optional float rotate = 12 [default = 0];
    if (has_rotate()) {
      total_size += 1 + 4;
    }

    // optional .message.GameGuide.Guide.Point describeFramePos = 13;
    if (has_describeframepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->describeframepos());
    }

    // optional string describe = 14 [default = ""];
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameGuide_Guide::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameGuide_Guide*>(&from));
}

void GameGuide_Guide::MergeFrom(const GameGuide_Guide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isintercepttouch()) {
      set_isintercepttouch(from.isintercepttouch());
    }
    if (from.has_isshowmask()) {
      set_isshowmask(from.isshowmask());
    }
    if (from.has_isshowhole()) {
      set_isshowhole(from.isshowhole());
    }
    if (from.has_ispause()) {
      set_ispause(from.ispause());
    }
    if (from.has_modetype()) {
      set_modetype(from.modetype());
    }
    if (from.has_modepos()) {
      mutable_modepos()->::message::GameGuide_Guide_Point::MergeFrom(from.modepos());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_indicationsignpos()) {
      mutable_indicationsignpos()->::message::GameGuide_Guide_Point::MergeFrom(from.indicationsignpos());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
    if (from.has_describeframepos()) {
      mutable_describeframepos()->::message::GameGuide_Guide_Point::MergeFrom(from.describeframepos());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
  }
}

void GameGuide_Guide::CopyFrom(const GameGuide_Guide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGuide_Guide::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_modepos()) {
    if (!this->modepos().IsInitialized()) return false;
  }
  if (has_indicationsignpos()) {
    if (!this->indicationsignpos().IsInitialized()) return false;
  }
  if (has_describeframepos()) {
    if (!this->describeframepos().IsInitialized()) return false;
  }
  return true;
}

void GameGuide_Guide::Swap(GameGuide_Guide* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isintercepttouch_, other->isintercepttouch_);
    std::swap(isshowmask_, other->isshowmask_);
    std::swap(isshowhole_, other->isshowhole_);
    std::swap(ispause_, other->ispause_);
    std::swap(modetype_, other->modetype_);
    std::swap(modepos_, other->modepos_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(indicationsignpos_, other->indicationsignpos_);
    std::swap(mirror_, other->mirror_);
    std::swap(rotate_, other->rotate_);
    std::swap(describeframepos_, other->describeframepos_);
    std::swap(describe_, other->describe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameGuide_Guide::GetTypeName() const {
  return "message.GameGuide.Guide";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameGuide_BattleLayout_BalloonInfo::kIdFieldNumber;
const int GameGuide_BattleLayout_BalloonInfo::kXFieldNumber;
const int GameGuide_BattleLayout_BalloonInfo::kYFieldNumber;
const int GameGuide_BattleLayout_BalloonInfo::kColorFieldNumber;
#endif  // !_MSC_VER

GameGuide_BattleLayout_BalloonInfo::GameGuide_BattleLayout_BalloonInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameGuide_BattleLayout_BalloonInfo::InitAsDefaultInstance() {
}

GameGuide_BattleLayout_BalloonInfo::GameGuide_BattleLayout_BalloonInfo(const GameGuide_BattleLayout_BalloonInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameGuide_BattleLayout_BalloonInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameGuide_BattleLayout_BalloonInfo::~GameGuide_BattleLayout_BalloonInfo() {
  SharedDtor();
}

void GameGuide_BattleLayout_BalloonInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameGuide_BattleLayout_BalloonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameGuide_BattleLayout_BalloonInfo& GameGuide_BattleLayout_BalloonInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_HSGameGuide_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_HSGameGuide_2eproto();
#endif
  return *default_instance_;
}

GameGuide_BattleLayout_BalloonInfo* GameGuide_BattleLayout_BalloonInfo::default_instance_ = NULL;

GameGuide_BattleLayout_BalloonInfo* GameGuide_BattleLayout_BalloonInfo::New() const {
  return new GameGuide_BattleLayout_BalloonInfo;
}

void GameGuide_BattleLayout_BalloonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
    color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameGuide_BattleLayout_BalloonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // required int32 color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameGuide_BattleLayout_BalloonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required int32 color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->color(), output);
  }

}

int GameGuide_BattleLayout_BalloonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required int32 color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameGuide_BattleLayout_BalloonInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameGuide_BattleLayout_BalloonInfo*>(&from));
}

void GameGuide_BattleLayout_BalloonInfo::MergeFrom(const GameGuide_BattleLayout_BalloonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
}

void GameGuide_BattleLayout_BalloonInfo::CopyFrom(const GameGuide_BattleLayout_BalloonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGuide_BattleLayout_BalloonInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GameGuide_BattleLayout_BalloonInfo::Swap(GameGuide_BattleLayout_BalloonInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameGuide_BattleLayout_BalloonInfo::GetTypeName() const {
  return "message.GameGuide.BattleLayout.BalloonInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameGuide_BattleLayout_Move::kBeginIDFieldNumber;
const int GameGuide_BattleLayout_Move::kEndIDFieldNumber;
#endif  // !_MSC_VER

GameGuide_BattleLayout_Move::GameGuide_BattleLayout_Move()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameGuide_BattleLayout_Move::InitAsDefaultInstance() {
}

GameGuide_BattleLayout_Move::GameGuide_BattleLayout_Move(const GameGuide_BattleLayout_Move& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameGuide_BattleLayout_Move::SharedCtor() {
  _cached_size_ = 0;
  beginid_ = 0;
  endid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameGuide_BattleLayout_Move::~GameGuide_BattleLayout_Move() {
  SharedDtor();
}

void GameGuide_BattleLayout_Move::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameGuide_BattleLayout_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameGuide_BattleLayout_Move& GameGuide_BattleLayout_Move::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_HSGameGuide_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_HSGameGuide_2eproto();
#endif
  return *default_instance_;
}

GameGuide_BattleLayout_Move* GameGuide_BattleLayout_Move::default_instance_ = NULL;

GameGuide_BattleLayout_Move* GameGuide_BattleLayout_Move::New() const {
  return new GameGuide_BattleLayout_Move;
}

void GameGuide_BattleLayout_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginid_ = 0;
    endid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameGuide_BattleLayout_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 beginID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beginid_)));
          set_has_beginid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endID;
        break;
      }

      // required int32 endID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endid_)));
          set_has_endid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameGuide_BattleLayout_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 beginID = 1;
  if (has_beginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->beginid(), output);
  }

  // required int32 endID = 2;
  if (has_endid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endid(), output);
  }

}

int GameGuide_BattleLayout_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 beginID = 1;
    if (has_beginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beginid());
    }

    // required int32 endID = 2;
    if (has_endid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameGuide_BattleLayout_Move::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameGuide_BattleLayout_Move*>(&from));
}

void GameGuide_BattleLayout_Move::MergeFrom(const GameGuide_BattleLayout_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginid()) {
      set_beginid(from.beginid());
    }
    if (from.has_endid()) {
      set_endid(from.endid());
    }
  }
}

void GameGuide_BattleLayout_Move::CopyFrom(const GameGuide_BattleLayout_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGuide_BattleLayout_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameGuide_BattleLayout_Move::Swap(GameGuide_BattleLayout_Move* other) {
  if (other != this) {
    std::swap(beginid_, other->beginid_);
    std::swap(endid_, other->endid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameGuide_BattleLayout_Move::GetTypeName() const {
  return "message.GameGuide.BattleLayout.Move";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameGuide_BattleLayout::kIdFieldNumber;
const int GameGuide_BattleLayout::kBalloonInfoListFieldNumber;
const int GameGuide_BattleLayout::kDestroyBalloonIDListFieldNumber;
const int GameGuide_BattleLayout::kMoveListFieldNumber;
#endif  // !_MSC_VER

GameGuide_BattleLayout::GameGuide_BattleLayout()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameGuide_BattleLayout::InitAsDefaultInstance() {
}

GameGuide_BattleLayout::GameGuide_BattleLayout(const GameGuide_BattleLayout& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameGuide_BattleLayout::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameGuide_BattleLayout::~GameGuide_BattleLayout() {
  SharedDtor();
}

void GameGuide_BattleLayout::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameGuide_BattleLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameGuide_BattleLayout& GameGuide_BattleLayout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_HSGameGuide_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_HSGameGuide_2eproto();
#endif
  return *default_instance_;
}

GameGuide_BattleLayout* GameGuide_BattleLayout::default_instance_ = NULL;

GameGuide_BattleLayout* GameGuide_BattleLayout::New() const {
  return new GameGuide_BattleLayout;
}

void GameGuide_BattleLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ballooninfolist_.Clear();
  destroyballoonidlist_.Clear();
  movelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameGuide_BattleLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_balloonInfoList;
        break;
      }

      // repeated .message.GameGuide.BattleLayout.BalloonInfo balloonInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_balloonInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ballooninfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_balloonInfoList;
        if (input->ExpectTag(24)) goto parse_destroyBalloonIDList;
        break;
      }

      // repeated int32 destroyBalloonIDList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destroyBalloonIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_destroyballoonidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_destroyballoonidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destroyBalloonIDList;
        if (input->ExpectTag(34)) goto parse_moveList;
        break;
      }

      // repeated .message.GameGuide.BattleLayout.Move moveList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moveList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_movelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_moveList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameGuide_BattleLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .message.GameGuide.BattleLayout.BalloonInfo balloonInfoList = 2;
  for (int i = 0; i < this->ballooninfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ballooninfolist(i), output);
  }

  // repeated int32 destroyBalloonIDList = 3;
  for (int i = 0; i < this->destroyballoonidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->destroyballoonidlist(i), output);
  }

  // repeated .message.GameGuide.BattleLayout.Move moveList = 4;
  for (int i = 0; i < this->movelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->movelist(i), output);
  }

}

int GameGuide_BattleLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .message.GameGuide.BattleLayout.BalloonInfo balloonInfoList = 2;
  total_size += 1 * this->ballooninfolist_size();
  for (int i = 0; i < this->ballooninfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ballooninfolist(i));
  }

  // repeated int32 destroyBalloonIDList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->destroyballoonidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->destroyballoonidlist(i));
    }
    total_size += 1 * this->destroyballoonidlist_size() + data_size;
  }

  // repeated .message.GameGuide.BattleLayout.Move moveList = 4;
  total_size += 1 * this->movelist_size();
  for (int i = 0; i < this->movelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->movelist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameGuide_BattleLayout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameGuide_BattleLayout*>(&from));
}

void GameGuide_BattleLayout::MergeFrom(const GameGuide_BattleLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  ballooninfolist_.MergeFrom(from.ballooninfolist_);
  destroyballoonidlist_.MergeFrom(from.destroyballoonidlist_);
  movelist_.MergeFrom(from.movelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void GameGuide_BattleLayout::CopyFrom(const GameGuide_BattleLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGuide_BattleLayout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ballooninfolist_size(); i++) {
    if (!this->ballooninfolist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < movelist_size(); i++) {
    if (!this->movelist(i).IsInitialized()) return false;
  }
  return true;
}

void GameGuide_BattleLayout::Swap(GameGuide_BattleLayout* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    ballooninfolist_.Swap(&other->ballooninfolist_);
    destroyballoonidlist_.Swap(&other->destroyballoonidlist_);
    movelist_.Swap(&other->movelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameGuide_BattleLayout::GetTypeName() const {
  return "message.GameGuide.BattleLayout";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameGuide::kGuideListFieldNumber;
const int GameGuide::kBattleLayoutListFieldNumber;
#endif  // !_MSC_VER

GameGuide::GameGuide()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameGuide::InitAsDefaultInstance() {
}

GameGuide::GameGuide(const GameGuide& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameGuide::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameGuide::~GameGuide() {
  SharedDtor();
}

void GameGuide::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameGuide& GameGuide::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_HSGameGuide_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_HSGameGuide_2eproto();
#endif
  return *default_instance_;
}

GameGuide* GameGuide::default_instance_ = NULL;

GameGuide* GameGuide::New() const {
  return new GameGuide;
}

void GameGuide::Clear() {
  guidelist_.Clear();
  battlelayoutlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.GameGuide.Guide guideList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guideList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guidelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guideList;
        if (input->ExpectTag(18)) goto parse_battleLayoutList;
        break;
      }

      // repeated .message.GameGuide.BattleLayout battleLayoutList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleLayoutList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlelayoutlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battleLayoutList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.GameGuide.Guide guideList = 1;
  for (int i = 0; i < this->guidelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guidelist(i), output);
  }

  // repeated .message.GameGuide.BattleLayout battleLayoutList = 2;
  for (int i = 0; i < this->battlelayoutlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->battlelayoutlist(i), output);
  }

}

int GameGuide::ByteSize() const {
  int total_size = 0;

  // repeated .message.GameGuide.Guide guideList = 1;
  total_size += 1 * this->guidelist_size();
  for (int i = 0; i < this->guidelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guidelist(i));
  }

  // repeated .message.GameGuide.BattleLayout battleLayoutList = 2;
  total_size += 1 * this->battlelayoutlist_size();
  for (int i = 0; i < this->battlelayoutlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlelayoutlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameGuide::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameGuide*>(&from));
}

void GameGuide::MergeFrom(const GameGuide& from) {
  GOOGLE_CHECK_NE(&from, this);
  guidelist_.MergeFrom(from.guidelist_);
  battlelayoutlist_.MergeFrom(from.battlelayoutlist_);
}

void GameGuide::CopyFrom(const GameGuide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGuide::IsInitialized() const {

  for (int i = 0; i < guidelist_size(); i++) {
    if (!this->guidelist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < battlelayoutlist_size(); i++) {
    if (!this->battlelayoutlist(i).IsInitialized()) return false;
  }
  return true;
}

void GameGuide::Swap(GameGuide* other) {
  if (other != this) {
    guidelist_.Swap(&other->guidelist_);
    battlelayoutlist_.Swap(&other->battlelayoutlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameGuide::GetTypeName() const {
  return "message.GameGuide";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
