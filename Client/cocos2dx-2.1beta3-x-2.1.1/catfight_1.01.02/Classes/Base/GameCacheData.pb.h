// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameCacheData.proto

#ifndef PROTOBUF_GameCacheData_2eproto__INCLUDED
#define PROTOBUF_GameCacheData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "UserInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameCacheData_2eproto();
void protobuf_AssignDesc_GameCacheData_2eproto();
void protobuf_ShutdownFile_GameCacheData_2eproto();

class GameCacheData;

// ===================================================================

class GameCacheData : public ::google::protobuf::MessageLite {
 public:
  GameCacheData();
  virtual ~GameCacheData();

  GameCacheData(const GameCacheData& from);

  inline GameCacheData& operator=(const GameCacheData& from) {
    CopyFrom(from);
    return *this;
  }

  static const GameCacheData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GameCacheData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GameCacheData* other);

  // implements Message ----------------------------------------------

  GameCacheData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GameCacheData& from);
  void MergeFrom(const GameCacheData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1 [default = "0"];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string IMEI = 2;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kIMEIFieldNumber = 2;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // optional bool isBackgroundMusic = 3 [default = true];
  inline bool has_isbackgroundmusic() const;
  inline void clear_isbackgroundmusic();
  static const int kIsBackgroundMusicFieldNumber = 3;
  inline bool isbackgroundmusic() const;
  inline void set_isbackgroundmusic(bool value);

  // optional bool isSound = 4 [default = true];
  inline bool has_issound() const;
  inline void clear_issound();
  static const int kIsSoundFieldNumber = 4;
  inline bool issound() const;
  inline void set_issound(bool value);

  // repeated int32 finishedAchievementID = 5;
  inline int finishedachievementid_size() const;
  inline void clear_finishedachievementid();
  static const int kFinishedAchievementIDFieldNumber = 5;
  inline ::google::protobuf::int32 finishedachievementid(int index) const;
  inline void set_finishedachievementid(int index, ::google::protobuf::int32 value);
  inline void add_finishedachievementid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finishedachievementid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finishedachievementid();

  // optional .message.UserBasicInfo userInfo = 6;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 6;
  inline const ::message::UserBasicInfo& userinfo() const;
  inline ::message::UserBasicInfo* mutable_userinfo();
  inline ::message::UserBasicInfo* release_userinfo();
  inline void set_allocated_userinfo(::message::UserBasicInfo* userinfo);

  // optional bool isRunGameGuide = 7 [default = true];
  inline bool has_isrungameguide() const;
  inline void clear_isrungameguide();
  static const int kIsRunGameGuideFieldNumber = 7;
  inline bool isrungameguide() const;
  inline void set_isrungameguide(bool value);

  // optional bool isAlreadyRunGameGuide = 8 [default = false];
  inline bool has_isalreadyrungameguide() const;
  inline void clear_isalreadyrungameguide();
  static const int kIsAlreadyRunGameGuideFieldNumber = 8;
  inline bool isalreadyrungameguide() const;
  inline void set_isalreadyrungameguide(bool value);

  // optional string nickname = 9 [default = ""];
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 9;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bool isSendNickname = 10;
  inline bool has_issendnickname() const;
  inline void clear_issendnickname();
  static const int kIsSendNicknameFieldNumber = 10;
  inline bool issendnickname() const;
  inline void set_issendnickname(bool value);

  // optional string WeiBo_Name = 11;
  inline bool has_weibo_name() const;
  inline void clear_weibo_name();
  static const int kWeiBoNameFieldNumber = 11;
  inline const ::std::string& weibo_name() const;
  inline void set_weibo_name(const ::std::string& value);
  inline void set_weibo_name(const char* value);
  inline void set_weibo_name(const char* value, size_t size);
  inline ::std::string* mutable_weibo_name();
  inline ::std::string* release_weibo_name();
  inline void set_allocated_weibo_name(::std::string* weibo_name);

  // optional string WeiBo_ID = 12;
  inline bool has_weibo_id() const;
  inline void clear_weibo_id();
  static const int kWeiBoIDFieldNumber = 12;
  inline const ::std::string& weibo_id() const;
  inline void set_weibo_id(const ::std::string& value);
  inline void set_weibo_id(const char* value);
  inline void set_weibo_id(const char* value, size_t size);
  inline ::std::string* mutable_weibo_id();
  inline ::std::string* release_weibo_id();
  inline void set_allocated_weibo_id(::std::string* weibo_id);

  // @@protoc_insertion_point(class_scope:message.GameCacheData)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_isbackgroundmusic();
  inline void clear_has_isbackgroundmusic();
  inline void set_has_issound();
  inline void clear_has_issound();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_isrungameguide();
  inline void clear_has_isrungameguide();
  inline void set_has_isalreadyrungameguide();
  inline void clear_has_isalreadyrungameguide();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_issendnickname();
  inline void clear_has_issendnickname();
  inline void set_has_weibo_name();
  inline void clear_has_weibo_name();
  inline void set_has_weibo_id();
  inline void clear_has_weibo_id();

  ::std::string* uid_;
  static ::std::string* _default_uid_;
  ::std::string* imei_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finishedachievementid_;
  ::message::UserBasicInfo* userinfo_;
  bool isbackgroundmusic_;
  bool issound_;
  bool isrungameguide_;
  bool isalreadyrungameguide_;
  bool issendnickname_;
  ::std::string* nickname_;
  ::std::string* weibo_name_;
  ::std::string* weibo_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GameCacheData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GameCacheData_2eproto();
  #endif
  friend void protobuf_AssignDesc_GameCacheData_2eproto();
  friend void protobuf_ShutdownFile_GameCacheData_2eproto();

  void InitAsDefaultInstance();
  static GameCacheData* default_instance_;
};
// ===================================================================


// ===================================================================

// GameCacheData

// optional string uid = 1 [default = "0"];
inline bool GameCacheData::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameCacheData::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameCacheData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameCacheData::clear_uid() {
  if (uid_ != _default_uid_) {
    uid_->assign(*_default_uid_);
  }
  clear_has_uid();
}
inline const ::std::string& GameCacheData::uid() const {
  return *uid_;
}
inline void GameCacheData::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == _default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void GameCacheData::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == _default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void GameCacheData::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == _default_uid_) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameCacheData::mutable_uid() {
  set_has_uid();
  if (uid_ == _default_uid_) {
    uid_ = new ::std::string(*_default_uid_);
  }
  return uid_;
}
inline ::std::string* GameCacheData::release_uid() {
  clear_has_uid();
  if (uid_ == _default_uid_) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(_default_uid_);
    return temp;
  }
}
inline void GameCacheData::set_allocated_uid(::std::string* uid) {
  if (uid_ != _default_uid_) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(_default_uid_);
  }
}

// optional string IMEI = 2;
inline bool GameCacheData::has_imei() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameCacheData::set_has_imei() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameCacheData::clear_has_imei() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameCacheData::clear_imei() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& GameCacheData::imei() const {
  return *imei_;
}
inline void GameCacheData::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void GameCacheData::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void GameCacheData::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameCacheData::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  return imei_;
}
inline ::std::string* GameCacheData::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameCacheData::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isBackgroundMusic = 3 [default = true];
inline bool GameCacheData::has_isbackgroundmusic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameCacheData::set_has_isbackgroundmusic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameCacheData::clear_has_isbackgroundmusic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameCacheData::clear_isbackgroundmusic() {
  isbackgroundmusic_ = true;
  clear_has_isbackgroundmusic();
}
inline bool GameCacheData::isbackgroundmusic() const {
  return isbackgroundmusic_;
}
inline void GameCacheData::set_isbackgroundmusic(bool value) {
  set_has_isbackgroundmusic();
  isbackgroundmusic_ = value;
}

// optional bool isSound = 4 [default = true];
inline bool GameCacheData::has_issound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameCacheData::set_has_issound() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameCacheData::clear_has_issound() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameCacheData::clear_issound() {
  issound_ = true;
  clear_has_issound();
}
inline bool GameCacheData::issound() const {
  return issound_;
}
inline void GameCacheData::set_issound(bool value) {
  set_has_issound();
  issound_ = value;
}

// repeated int32 finishedAchievementID = 5;
inline int GameCacheData::finishedachievementid_size() const {
  return finishedachievementid_.size();
}
inline void GameCacheData::clear_finishedachievementid() {
  finishedachievementid_.Clear();
}
inline ::google::protobuf::int32 GameCacheData::finishedachievementid(int index) const {
  return finishedachievementid_.Get(index);
}
inline void GameCacheData::set_finishedachievementid(int index, ::google::protobuf::int32 value) {
  finishedachievementid_.Set(index, value);
}
inline void GameCacheData::add_finishedachievementid(::google::protobuf::int32 value) {
  finishedachievementid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameCacheData::finishedachievementid() const {
  return finishedachievementid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameCacheData::mutable_finishedachievementid() {
  return &finishedachievementid_;
}

// optional .message.UserBasicInfo userInfo = 6;
inline bool GameCacheData::has_userinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameCacheData::set_has_userinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameCacheData::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameCacheData::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::message::UserBasicInfo::Clear();
  clear_has_userinfo();
}
inline const ::message::UserBasicInfo& GameCacheData::userinfo() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return userinfo_ != NULL ? *userinfo_ : *default_instance().userinfo_;
#else
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
#endif
}
inline ::message::UserBasicInfo* GameCacheData::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::message::UserBasicInfo;
  return userinfo_;
}
inline ::message::UserBasicInfo* GameCacheData::release_userinfo() {
  clear_has_userinfo();
  ::message::UserBasicInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void GameCacheData::set_allocated_userinfo(::message::UserBasicInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// optional bool isRunGameGuide = 7 [default = true];
inline bool GameCacheData::has_isrungameguide() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameCacheData::set_has_isrungameguide() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameCacheData::clear_has_isrungameguide() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameCacheData::clear_isrungameguide() {
  isrungameguide_ = true;
  clear_has_isrungameguide();
}
inline bool GameCacheData::isrungameguide() const {
  return isrungameguide_;
}
inline void GameCacheData::set_isrungameguide(bool value) {
  set_has_isrungameguide();
  isrungameguide_ = value;
}

// optional bool isAlreadyRunGameGuide = 8 [default = false];
inline bool GameCacheData::has_isalreadyrungameguide() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameCacheData::set_has_isalreadyrungameguide() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameCacheData::clear_has_isalreadyrungameguide() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameCacheData::clear_isalreadyrungameguide() {
  isalreadyrungameguide_ = false;
  clear_has_isalreadyrungameguide();
}
inline bool GameCacheData::isalreadyrungameguide() const {
  return isalreadyrungameguide_;
}
inline void GameCacheData::set_isalreadyrungameguide(bool value) {
  set_has_isalreadyrungameguide();
  isalreadyrungameguide_ = value;
}

// optional string nickname = 9 [default = ""];
inline bool GameCacheData::has_nickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameCacheData::set_has_nickname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameCacheData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameCacheData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& GameCacheData::nickname() const {
  return *nickname_;
}
inline void GameCacheData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void GameCacheData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void GameCacheData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameCacheData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* GameCacheData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameCacheData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isSendNickname = 10;
inline bool GameCacheData::has_issendnickname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameCacheData::set_has_issendnickname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameCacheData::clear_has_issendnickname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameCacheData::clear_issendnickname() {
  issendnickname_ = false;
  clear_has_issendnickname();
}
inline bool GameCacheData::issendnickname() const {
  return issendnickname_;
}
inline void GameCacheData::set_issendnickname(bool value) {
  set_has_issendnickname();
  issendnickname_ = value;
}

// optional string WeiBo_Name = 11;
inline bool GameCacheData::has_weibo_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameCacheData::set_has_weibo_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameCacheData::clear_has_weibo_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameCacheData::clear_weibo_name() {
  if (weibo_name_ != &::google::protobuf::internal::kEmptyString) {
    weibo_name_->clear();
  }
  clear_has_weibo_name();
}
inline const ::std::string& GameCacheData::weibo_name() const {
  return *weibo_name_;
}
inline void GameCacheData::set_weibo_name(const ::std::string& value) {
  set_has_weibo_name();
  if (weibo_name_ == &::google::protobuf::internal::kEmptyString) {
    weibo_name_ = new ::std::string;
  }
  weibo_name_->assign(value);
}
inline void GameCacheData::set_weibo_name(const char* value) {
  set_has_weibo_name();
  if (weibo_name_ == &::google::protobuf::internal::kEmptyString) {
    weibo_name_ = new ::std::string;
  }
  weibo_name_->assign(value);
}
inline void GameCacheData::set_weibo_name(const char* value, size_t size) {
  set_has_weibo_name();
  if (weibo_name_ == &::google::protobuf::internal::kEmptyString) {
    weibo_name_ = new ::std::string;
  }
  weibo_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameCacheData::mutable_weibo_name() {
  set_has_weibo_name();
  if (weibo_name_ == &::google::protobuf::internal::kEmptyString) {
    weibo_name_ = new ::std::string;
  }
  return weibo_name_;
}
inline ::std::string* GameCacheData::release_weibo_name() {
  clear_has_weibo_name();
  if (weibo_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weibo_name_;
    weibo_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameCacheData::set_allocated_weibo_name(::std::string* weibo_name) {
  if (weibo_name_ != &::google::protobuf::internal::kEmptyString) {
    delete weibo_name_;
  }
  if (weibo_name) {
    set_has_weibo_name();
    weibo_name_ = weibo_name;
  } else {
    clear_has_weibo_name();
    weibo_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string WeiBo_ID = 12;
inline bool GameCacheData::has_weibo_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameCacheData::set_has_weibo_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameCacheData::clear_has_weibo_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameCacheData::clear_weibo_id() {
  if (weibo_id_ != &::google::protobuf::internal::kEmptyString) {
    weibo_id_->clear();
  }
  clear_has_weibo_id();
}
inline const ::std::string& GameCacheData::weibo_id() const {
  return *weibo_id_;
}
inline void GameCacheData::set_weibo_id(const ::std::string& value) {
  set_has_weibo_id();
  if (weibo_id_ == &::google::protobuf::internal::kEmptyString) {
    weibo_id_ = new ::std::string;
  }
  weibo_id_->assign(value);
}
inline void GameCacheData::set_weibo_id(const char* value) {
  set_has_weibo_id();
  if (weibo_id_ == &::google::protobuf::internal::kEmptyString) {
    weibo_id_ = new ::std::string;
  }
  weibo_id_->assign(value);
}
inline void GameCacheData::set_weibo_id(const char* value, size_t size) {
  set_has_weibo_id();
  if (weibo_id_ == &::google::protobuf::internal::kEmptyString) {
    weibo_id_ = new ::std::string;
  }
  weibo_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameCacheData::mutable_weibo_id() {
  set_has_weibo_id();
  if (weibo_id_ == &::google::protobuf::internal::kEmptyString) {
    weibo_id_ = new ::std::string;
  }
  return weibo_id_;
}
inline ::std::string* GameCacheData::release_weibo_id() {
  clear_has_weibo_id();
  if (weibo_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weibo_id_;
    weibo_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameCacheData::set_allocated_weibo_id(::std::string* weibo_id) {
  if (weibo_id_ != &::google::protobuf::internal::kEmptyString) {
    delete weibo_id_;
  }
  if (weibo_id) {
    set_has_weibo_id();
    weibo_id_ = weibo_id;
  } else {
    clear_has_weibo_id();
    weibo_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameCacheData_2eproto__INCLUDED
