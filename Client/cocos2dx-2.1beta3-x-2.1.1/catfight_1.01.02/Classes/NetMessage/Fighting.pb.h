// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fighting.proto

#ifndef PROTOBUF_Fighting_2eproto__INCLUDED
#define PROTOBUF_Fighting_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "Address.pb.h"
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Fighting_2eproto();
void protobuf_AssignDesc_Fighting_2eproto();
void protobuf_ShutdownFile_Fighting_2eproto();

class FightingRequest;
class FightingResponse;

enum FightingResponse_RequestStatus {
  FightingResponse_RequestStatus_SUCCESS = 1,
  FightingResponse_RequestStatus_FAIL = 0
};
bool FightingResponse_RequestStatus_IsValid(int value);
const FightingResponse_RequestStatus FightingResponse_RequestStatus_RequestStatus_MIN = FightingResponse_RequestStatus_FAIL;
const FightingResponse_RequestStatus FightingResponse_RequestStatus_RequestStatus_MAX = FightingResponse_RequestStatus_SUCCESS;
const int FightingResponse_RequestStatus_RequestStatus_ARRAYSIZE = FightingResponse_RequestStatus_RequestStatus_MAX + 1;

// ===================================================================

class FightingRequest : public ::google::protobuf::MessageLite {
 public:
  FightingRequest();
  virtual ~FightingRequest();

  FightingRequest(const FightingRequest& from);

  inline FightingRequest& operator=(const FightingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const FightingRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FightingRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FightingRequest* other);

  // implements Message ----------------------------------------------

  FightingRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FightingRequest& from);
  void MergeFrom(const FightingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:message.FightingRequest)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Fighting_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Fighting_2eproto();
  #endif
  friend void protobuf_AssignDesc_Fighting_2eproto();
  friend void protobuf_ShutdownFile_Fighting_2eproto();

  void InitAsDefaultInstance();
  static FightingRequest* default_instance_;
};
// -------------------------------------------------------------------

class FightingResponse : public ::google::protobuf::MessageLite {
 public:
  FightingResponse();
  virtual ~FightingResponse();

  FightingResponse(const FightingResponse& from);

  inline FightingResponse& operator=(const FightingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const FightingResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FightingResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FightingResponse* other);

  // implements Message ----------------------------------------------

  FightingResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FightingResponse& from);
  void MergeFrom(const FightingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef FightingResponse_RequestStatus RequestStatus;
  static const RequestStatus SUCCESS = FightingResponse_RequestStatus_SUCCESS;
  static const RequestStatus FAIL = FightingResponse_RequestStatus_FAIL;
  static inline bool RequestStatus_IsValid(int value) {
    return FightingResponse_RequestStatus_IsValid(value);
  }
  static const RequestStatus RequestStatus_MIN =
    FightingResponse_RequestStatus_RequestStatus_MIN;
  static const RequestStatus RequestStatus_MAX =
    FightingResponse_RequestStatus_RequestStatus_MAX;
  static const int RequestStatus_ARRAYSIZE =
    FightingResponse_RequestStatus_RequestStatus_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .message.FightingResponse.RequestStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::message::FightingResponse_RequestStatus status() const;
  inline void set_status(::message::FightingResponse_RequestStatus value);

  // optional .message.NetAddress address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::message::NetAddress& address() const;
  inline ::message::NetAddress* mutable_address();
  inline ::message::NetAddress* release_address();
  inline void set_allocated_address(::message::NetAddress* address);

  // @@protoc_insertion_point(class_scope:message.FightingResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_address();
  inline void clear_has_address();

  ::message::NetAddress* address_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Fighting_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Fighting_2eproto();
  #endif
  friend void protobuf_AssignDesc_Fighting_2eproto();
  friend void protobuf_ShutdownFile_Fighting_2eproto();

  void InitAsDefaultInstance();
  static FightingResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// FightingRequest

// -------------------------------------------------------------------

// FightingResponse

// required .message.FightingResponse.RequestStatus status = 1;
inline bool FightingResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightingResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightingResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightingResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::message::FightingResponse_RequestStatus FightingResponse::status() const {
  return static_cast< ::message::FightingResponse_RequestStatus >(status_);
}
inline void FightingResponse::set_status(::message::FightingResponse_RequestStatus value) {
  assert(::message::FightingResponse_RequestStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .message.NetAddress address = 2;
inline bool FightingResponse::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightingResponse::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightingResponse::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightingResponse::clear_address() {
  if (address_ != NULL) address_->::message::NetAddress::Clear();
  clear_has_address();
}
inline const ::message::NetAddress& FightingResponse::address() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return address_ != NULL ? *address_ : *default_instance().address_;
#else
  return address_ != NULL ? *address_ : *default_instance_->address_;
#endif
}
inline ::message::NetAddress* FightingResponse::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::message::NetAddress;
  return address_;
}
inline ::message::NetAddress* FightingResponse::release_address() {
  clear_has_address();
  ::message::NetAddress* temp = address_;
  address_ = NULL;
  return temp;
}
inline void FightingResponse::set_allocated_address(::message::NetAddress* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Fighting_2eproto__INCLUDED
