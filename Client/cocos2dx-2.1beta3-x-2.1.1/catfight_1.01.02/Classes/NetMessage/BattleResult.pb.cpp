// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleResult.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleResult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_BattleResult_2eproto() {
  delete BattleResultRequest::default_instance_;
  delete BattleResultResponse::default_instance_;
  delete UpdateUserInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_BattleResult_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_BattleResult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BattleResultRequest::default_instance_ = new BattleResultRequest();
  BattleResultResponse::default_instance_ = new BattleResultResponse();
  UpdateUserInfo::default_instance_ = new UpdateUserInfo();
  BattleResultRequest::default_instance_->InitAsDefaultInstance();
  BattleResultResponse::default_instance_->InitAsDefaultInstance();
  UpdateUserInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleResult_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BattleResult_2eproto_once_);
void protobuf_AddDesc_BattleResult_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_BattleResult_2eproto_once_,
                 &protobuf_AddDesc_BattleResult_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleResult_2eproto {
  StaticDescriptorInitializer_BattleResult_2eproto() {
    protobuf_AddDesc_BattleResult_2eproto();
  }
} static_descriptor_initializer_BattleResult_2eproto_;
#endif

// ===================================================================

bool BattleResultRequest_GameStatus_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BattleResultRequest_GameStatus BattleResultRequest::OVER;
const BattleResultRequest_GameStatus BattleResultRequest::GameStatus_MIN;
const BattleResultRequest_GameStatus BattleResultRequest::GameStatus_MAX;
const int BattleResultRequest::GameStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BattleResultRequest::kDidFieldNumber;
const int BattleResultRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

BattleResultRequest::BattleResultRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleResultRequest::InitAsDefaultInstance() {
}

BattleResultRequest::BattleResultRequest(const BattleResultRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleResultRequest::SharedCtor() {
  _cached_size_ = 0;
  did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleResultRequest::~BattleResultRequest() {
  SharedDtor();
}

void BattleResultRequest::SharedDtor() {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    delete did_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleResultRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleResultRequest& BattleResultRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleResult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleResult_2eproto();
#endif
  return *default_instance_;
}

BattleResultRequest* BattleResultRequest::default_instance_ = NULL;

BattleResultRequest* BattleResultRequest::New() const {
  return new BattleResultRequest;
}

void BattleResultRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_did()) {
      if (did_ != &::google::protobuf::internal::kEmptyString) {
        did_->clear();
      }
    }
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleResultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string did = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .message.BattleResultRequest.GameStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::BattleResultRequest_GameStatus_IsValid(value)) {
            set_status(static_cast< ::message::BattleResultRequest_GameStatus >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleResultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string did = 1;
  if (has_did()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->did(), output);
  }

  // required .message.BattleResultRequest.GameStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int BattleResultRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string did = 1;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->did());
    }

    // required .message.BattleResultRequest.GameStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleResultRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleResultRequest*>(&from));
}

void BattleResultRequest::MergeFrom(const BattleResultRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_did()) {
      set_did(from.did());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void BattleResultRequest::CopyFrom(const BattleResultRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResultRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BattleResultRequest::Swap(BattleResultRequest* other) {
  if (other != this) {
    std::swap(did_, other->did_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleResultRequest::GetTypeName() const {
  return "message.BattleResultRequest";
}


// ===================================================================

bool BattleResultResponse_PlayerMatchResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BattleResultResponse_PlayerMatchResult BattleResultResponse::WIN;
const BattleResultResponse_PlayerMatchResult BattleResultResponse::LOST;
const BattleResultResponse_PlayerMatchResult BattleResultResponse::DRAW;
const BattleResultResponse_PlayerMatchResult BattleResultResponse::PlayerMatchResult_MIN;
const BattleResultResponse_PlayerMatchResult BattleResultResponse::PlayerMatchResult_MAX;
const int BattleResultResponse::PlayerMatchResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BattleResultResponse::kResultFieldNumber;
const int BattleResultResponse::kSelfInfoFieldNumber;
const int BattleResultResponse::kTageterInfoFieldNumber;
#endif  // !_MSC_VER

BattleResultResponse::BattleResultResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleResultResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  selfinfo_ = const_cast< ::message::UpdateUserInfo*>(
      ::message::UpdateUserInfo::internal_default_instance());
#else
  selfinfo_ = const_cast< ::message::UpdateUserInfo*>(&::message::UpdateUserInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tageterinfo_ = const_cast< ::message::UpdateUserInfo*>(
      ::message::UpdateUserInfo::internal_default_instance());
#else
  tageterinfo_ = const_cast< ::message::UpdateUserInfo*>(&::message::UpdateUserInfo::default_instance());
#endif
}

BattleResultResponse::BattleResultResponse(const BattleResultResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleResultResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  selfinfo_ = NULL;
  tageterinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleResultResponse::~BattleResultResponse() {
  SharedDtor();
}

void BattleResultResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete selfinfo_;
    delete tageterinfo_;
  }
}

void BattleResultResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleResultResponse& BattleResultResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleResult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleResult_2eproto();
#endif
  return *default_instance_;
}

BattleResultResponse* BattleResultResponse::default_instance_ = NULL;

BattleResultResponse* BattleResultResponse::New() const {
  return new BattleResultResponse;
}

void BattleResultResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_selfinfo()) {
      if (selfinfo_ != NULL) selfinfo_->::message::UpdateUserInfo::Clear();
    }
    if (has_tageterinfo()) {
      if (tageterinfo_ != NULL) tageterinfo_->::message::UpdateUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.BattleResultResponse.PlayerMatchResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::BattleResultResponse_PlayerMatchResult_IsValid(value)) {
            set_result(static_cast< ::message::BattleResultResponse_PlayerMatchResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfInfo;
        break;
      }

      // optional .message.UpdateUserInfo selfInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tageterInfo;
        break;
      }

      // optional .message.UpdateUserInfo tageterInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tageterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tageterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .message.BattleResultResponse.PlayerMatchResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .message.UpdateUserInfo selfInfo = 2;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->selfinfo(), output);
  }

  // optional .message.UpdateUserInfo tageterInfo = 3;
  if (has_tageterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->tageterinfo(), output);
  }

}

int BattleResultResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message.BattleResultResponse.PlayerMatchResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .message.UpdateUserInfo selfInfo = 2;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

    // optional .message.UpdateUserInfo tageterInfo = 3;
    if (has_tageterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tageterinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleResultResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleResultResponse*>(&from));
}

void BattleResultResponse::MergeFrom(const BattleResultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::message::UpdateUserInfo::MergeFrom(from.selfinfo());
    }
    if (from.has_tageterinfo()) {
      mutable_tageterinfo()->::message::UpdateUserInfo::MergeFrom(from.tageterinfo());
    }
  }
}

void BattleResultResponse::CopyFrom(const BattleResultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResultResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BattleResultResponse::Swap(BattleResultResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(selfinfo_, other->selfinfo_);
    std::swap(tageterinfo_, other->tageterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleResultResponse::GetTypeName() const {
  return "message.BattleResultResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfo::kLevelFieldNumber;
const int UpdateUserInfo::kExperienceFieldNumber;
const int UpdateUserInfo::kWinCountFieldNumber;
const int UpdateUserInfo::kWinRateFieldNumber;
const int UpdateUserInfo::kSuccessionWinCountFieldNumber;
const int UpdateUserInfo::kIncomGoldsFieldNumber;
const int UpdateUserInfo::kBureauExperienceFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfo::UpdateUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpdateUserInfo::InitAsDefaultInstance() {
}

UpdateUserInfo::UpdateUserInfo(const UpdateUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  experience_ = 0u;
  wincount_ = 1u;
  winrate_ = 1;
  successionwincount_ = 0u;
  incomgolds_ = 0;
  bureauexperience_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfo::~UpdateUserInfo() {
  SharedDtor();
}

void UpdateUserInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserInfo& UpdateUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleResult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleResult_2eproto();
#endif
  return *default_instance_;
}

UpdateUserInfo* UpdateUserInfo::default_instance_ = NULL;

UpdateUserInfo* UpdateUserInfo::New() const {
  return new UpdateUserInfo;
}

void UpdateUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    experience_ = 0u;
    wincount_ = 1u;
    winrate_ = 1;
    successionwincount_ = 0u;
    incomgolds_ = 0;
    bureauexperience_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpdateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_experience;
        break;
      }

      // optional uint32 experience = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winCount;
        break;
      }

      // optional uint32 winCount = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_winRate;
        break;
      }

      // optional float winRate = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_winRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winrate_)));
          set_has_winrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_successionWinCount;
        break;
      }

      // optional uint32 successionWinCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_successionWinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &successionwincount_)));
          set_has_successionwincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_incomGolds;
        break;
      }

      // optional int32 incomGolds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incomGolds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incomgolds_)));
          set_has_incomgolds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bureauExperience;
        break;
      }

      // optional int32 bureauExperience = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bureauExperience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bureauexperience_)));
          set_has_bureauexperience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 experience = 2;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->experience(), output);
  }

  // optional uint32 winCount = 3 [default = 1];
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wincount(), output);
  }

  // optional float winRate = 4 [default = 1];
  if (has_winrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->winrate(), output);
  }

  // optional uint32 successionWinCount = 5;
  if (has_successionwincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->successionwincount(), output);
  }

  // optional int32 incomGolds = 6;
  if (has_incomgolds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->incomgolds(), output);
  }

  // optional int32 bureauExperience = 7;
  if (has_bureauexperience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bureauexperience(), output);
  }

}

int UpdateUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 experience = 2;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }

    // optional uint32 winCount = 3 [default = 1];
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wincount());
    }

    // optional float winRate = 4 [default = 1];
    if (has_winrate()) {
      total_size += 1 + 4;
    }

    // optional uint32 successionWinCount = 5;
    if (has_successionwincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->successionwincount());
    }

    // optional int32 incomGolds = 6;
    if (has_incomgolds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->incomgolds());
    }

    // optional int32 bureauExperience = 7;
    if (has_bureauexperience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bureauexperience());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateUserInfo*>(&from));
}

void UpdateUserInfo::MergeFrom(const UpdateUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_winrate()) {
      set_winrate(from.winrate());
    }
    if (from.has_successionwincount()) {
      set_successionwincount(from.successionwincount());
    }
    if (from.has_incomgolds()) {
      set_incomgolds(from.incomgolds());
    }
    if (from.has_bureauexperience()) {
      set_bureauexperience(from.bureauexperience());
    }
  }
}

void UpdateUserInfo::CopyFrom(const UpdateUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfo::IsInitialized() const {

  return true;
}

void UpdateUserInfo::Swap(UpdateUserInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(experience_, other->experience_);
    std::swap(wincount_, other->wincount_);
    std::swap(winrate_, other->winrate_);
    std::swap(successionwincount_, other->successionwincount_);
    std::swap(incomgolds_, other->incomgolds_);
    std::swap(bureauexperience_, other->bureauexperience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateUserInfo::GetTypeName() const {
  return "message.UpdateUserInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
