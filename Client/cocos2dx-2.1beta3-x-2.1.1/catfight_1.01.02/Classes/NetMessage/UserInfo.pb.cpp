// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_UserInfo_2eproto() {
  delete UserBasicInfo::default_instance_;
  delete UserBasicInfo_EffectData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_UserInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_UserInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::message::protobuf_AddDesc_PropInfo_2eproto();
  UserBasicInfo::default_instance_ = new UserBasicInfo();
  UserBasicInfo_EffectData::default_instance_ = new UserBasicInfo_EffectData();
  UserBasicInfo::default_instance_->InitAsDefaultInstance();
  UserBasicInfo_EffectData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserInfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_UserInfo_2eproto_once_);
void protobuf_AddDesc_UserInfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_UserInfo_2eproto_once_,
                 &protobuf_AddDesc_UserInfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserInfo_2eproto {
  StaticDescriptorInitializer_UserInfo_2eproto() {
    protobuf_AddDesc_UserInfo_2eproto();
  }
} static_descriptor_initializer_UserInfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int UserBasicInfo_EffectData::kRefrashFieldNumber;
const int UserBasicInfo_EffectData::kTargetUidFieldNumber;
const int UserBasicInfo_EffectData::kAttackerFieldNumber;
const int UserBasicInfo_EffectData::kPropidFieldNumber;
#endif  // !_MSC_VER

UserBasicInfo_EffectData::UserBasicInfo_EffectData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserBasicInfo_EffectData::InitAsDefaultInstance() {
}

UserBasicInfo_EffectData::UserBasicInfo_EffectData(const UserBasicInfo_EffectData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserBasicInfo_EffectData::SharedCtor() {
  _cached_size_ = 0;
  refrash_ = false;
  targetuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  propid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBasicInfo_EffectData::~UserBasicInfo_EffectData() {
  SharedDtor();
}

void UserBasicInfo_EffectData::SharedDtor() {
  if (targetuid_ != &::google::protobuf::internal::kEmptyString) {
    delete targetuid_;
  }
  if (attacker_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserBasicInfo_EffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserBasicInfo_EffectData& UserBasicInfo_EffectData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

UserBasicInfo_EffectData* UserBasicInfo_EffectData::default_instance_ = NULL;

UserBasicInfo_EffectData* UserBasicInfo_EffectData::New() const {
  return new UserBasicInfo_EffectData;
}

void UserBasicInfo_EffectData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refrash_ = false;
    if (has_targetuid()) {
      if (targetuid_ != &::google::protobuf::internal::kEmptyString) {
        targetuid_->clear();
      }
    }
    if (has_attacker()) {
      if (attacker_ != &::google::protobuf::internal::kEmptyString) {
        attacker_->clear();
      }
    }
    propid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserBasicInfo_EffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool refrash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refrash_)));
          set_has_refrash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetUid;
        break;
      }

      // required string targetUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attacker;
        break;
      }

      // optional string attacker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_propid;
        break;
      }

      // required uint32 propid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBasicInfo_EffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool refrash = 1;
  if (has_refrash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->refrash(), output);
  }

  // required string targetUid = 2;
  if (has_targetuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->targetuid(), output);
  }

  // optional string attacker = 3;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->attacker(), output);
  }

  // required uint32 propid = 4;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->propid(), output);
  }

}

int UserBasicInfo_EffectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool refrash = 1;
    if (has_refrash()) {
      total_size += 1 + 1;
    }

    // required string targetUid = 2;
    if (has_targetuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetuid());
    }

    // optional string attacker = 3;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker());
    }

    // required uint32 propid = 4;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBasicInfo_EffectData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserBasicInfo_EffectData*>(&from));
}

void UserBasicInfo_EffectData::MergeFrom(const UserBasicInfo_EffectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refrash()) {
      set_refrash(from.refrash());
    }
    if (from.has_targetuid()) {
      set_targetuid(from.targetuid());
    }
    if (from.has_attacker()) {
      set_attacker(from.attacker());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
  }
}

void UserBasicInfo_EffectData::CopyFrom(const UserBasicInfo_EffectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBasicInfo_EffectData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  return true;
}

void UserBasicInfo_EffectData::Swap(UserBasicInfo_EffectData* other) {
  if (other != this) {
    std::swap(refrash_, other->refrash_);
    std::swap(targetuid_, other->targetuid_);
    std::swap(attacker_, other->attacker_);
    std::swap(propid_, other->propid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserBasicInfo_EffectData::GetTypeName() const {
  return "message.UserBasicInfo.EffectData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserBasicInfo::kUidFieldNumber;
const int UserBasicInfo::kNameFieldNumber;
const int UserBasicInfo::kLevelFieldNumber;
const int UserBasicInfo::kStyleFieldNumber;
const int UserBasicInfo::kWinCountFieldNumber;
const int UserBasicInfo::kLoseCountFieldNumber;
const int UserBasicInfo::kWinRateFieldNumber;
const int UserBasicInfo::kEffectFieldNumber;
const int UserBasicInfo::kIconIdFieldNumber;
const int UserBasicInfo::kSuccessionWinCountFieldNumber;
const int UserBasicInfo::kOnceLongFieldNumber;
const int UserBasicInfo::kMaximumFieldNumber;
const int UserBasicInfo::kTotalTimeFieldNumber;
const int UserBasicInfo::kRoundsPlayedFieldNumber;
const int UserBasicInfo::kThrowStonesFieldNumber;
const int UserBasicInfo::kThrownStonesFieldNumber;
const int UserBasicInfo::kColorCatsFieldNumber;
const int UserBasicInfo::kConsumeGoldsFieldNumber;
const int UserBasicInfo::kConsumeItems1FieldNumber;
const int UserBasicInfo::kConsumeItems2FieldNumber;
const int UserBasicInfo::kConsumeItems3FieldNumber;
const int UserBasicInfo::kConsumeItems4FieldNumber;
const int UserBasicInfo::kGoldsFieldNumber;
const int UserBasicInfo::kExperienceFieldNumber;
const int UserBasicInfo::kMaxExperienceFieldNumber;
const int UserBasicInfo::kBuyEquipFrameFieldNumber;
const int UserBasicInfo::kGameScoreFieldNumber;
#endif  // !_MSC_VER

UserBasicInfo::UserBasicInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserBasicInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  effect_ = const_cast< ::message::UserBasicInfo_EffectData*>(
      ::message::UserBasicInfo_EffectData::internal_default_instance());
#else
  effect_ = const_cast< ::message::UserBasicInfo_EffectData*>(&::message::UserBasicInfo_EffectData::default_instance());
#endif
}

UserBasicInfo::UserBasicInfo(const UserBasicInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserBasicInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 1u;
  style_ = 0u;
  wincount_ = 0u;
  losecount_ = 0u;
  winrate_ = 0;
  effect_ = NULL;
  iconid_ = 6000u;
  successionwincount_ = 0u;
  oncelong_ = 0u;
  maximum_ = GOOGLE_ULONGLONG(0);
  totaltime_ = GOOGLE_ULONGLONG(0);
  roundsplayed_ = 0u;
  throwstones_ = 0u;
  thrownstones_ = 0u;
  colorcats_ = 0u;
  consumegolds_ = 0u;
  consumeitems1_ = 0u;
  consumeitems2_ = 0u;
  consumeitems3_ = 0u;
  consumeitems4_ = 0u;
  golds_ = 0u;
  experience_ = 0u;
  maxexperience_ = 1u;
  gamescore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBasicInfo::~UserBasicInfo() {
  SharedDtor();
}

void UserBasicInfo::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete effect_;
  }
}

void UserBasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserBasicInfo& UserBasicInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

UserBasicInfo* UserBasicInfo::default_instance_ = NULL;

UserBasicInfo* UserBasicInfo::New() const {
  return new UserBasicInfo;
}

void UserBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 1u;
    style_ = 0u;
    wincount_ = 0u;
    losecount_ = 0u;
    winrate_ = 0;
    if (has_effect()) {
      if (effect_ != NULL) effect_->::message::UserBasicInfo_EffectData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    iconid_ = 6000u;
    successionwincount_ = 0u;
    oncelong_ = 0u;
    maximum_ = GOOGLE_ULONGLONG(0);
    totaltime_ = GOOGLE_ULONGLONG(0);
    roundsplayed_ = 0u;
    throwstones_ = 0u;
    thrownstones_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    colorcats_ = 0u;
    consumegolds_ = 0u;
    consumeitems1_ = 0u;
    consumeitems2_ = 0u;
    consumeitems3_ = 0u;
    consumeitems4_ = 0u;
    golds_ = 0u;
    experience_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    maxexperience_ = 1u;
    gamescore_ = 0u;
  }
  buyequipframe_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_style;
        break;
      }

      // optional uint32 style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winCount;
        break;
      }

      // optional uint32 winCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loseCount;
        break;
      }

      // optional uint32 loseCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losecount_)));
          set_has_losecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_winRate;
        break;
      }

      // optional float winRate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_winRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winrate_)));
          set_has_winrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_effect;
        break;
      }

      // optional .message.UserBasicInfo.EffectData effect = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_iconId;
        break;
      }

      // optional uint32 iconId = 9 [default = 6000];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_successionWinCount;
        break;
      }

      // optional uint32 successionWinCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_successionWinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &successionwincount_)));
          set_has_successionwincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_onceLong;
        break;
      }

      // optional uint32 onceLong = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onceLong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oncelong_)));
          set_has_oncelong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_maximum;
        break;
      }

      // optional uint64 maximum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maximum_)));
          set_has_maximum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_totalTime;
        break;
      }

      // optional uint64 totalTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_roundsPlayed;
        break;
      }

      // optional uint32 roundsPlayed = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundsPlayed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roundsplayed_)));
          set_has_roundsplayed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_throwStones;
        break;
      }

      // optional uint32 throwStones = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_throwStones:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &throwstones_)));
          set_has_throwstones();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_thrownStones;
        break;
      }

      // optional uint32 thrownStones = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thrownStones:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thrownstones_)));
          set_has_thrownstones();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_colorCats;
        break;
      }

      // optional uint32 colorCats = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorCats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &colorcats_)));
          set_has_colorcats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_consumeGolds;
        break;
      }

      // optional uint32 consumeGolds = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumeGolds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumegolds_)));
          set_has_consumegolds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_consumeItems1;
        break;
      }

      // optional uint32 consumeItems1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumeItems1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumeitems1_)));
          set_has_consumeitems1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_consumeItems2;
        break;
      }

      // optional uint32 consumeItems2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumeItems2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumeitems2_)));
          set_has_consumeitems2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_consumeItems3;
        break;
      }

      // optional uint32 consumeItems3 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumeItems3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumeitems3_)));
          set_has_consumeitems3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_consumeItems4;
        break;
      }

      // optional uint32 consumeItems4 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumeItems4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumeitems4_)));
          set_has_consumeitems4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_golds;
        break;
      }

      // optional uint32 golds = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &golds_)));
          set_has_golds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_experience;
        break;
      }

      // optional uint32 experience = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_maxExperience;
        break;
      }

      // optional uint32 maxExperience = 25 [default = 1];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxExperience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxexperience_)));
          set_has_maxexperience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_buyEquipFrame;
        break;
      }

      // repeated uint32 buyEquipFrame = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyEquipFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208, input, this->mutable_buyequipframe())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buyequipframe())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_buyEquipFrame;
        if (input->ExpectTag(216)) goto parse_gameScore;
        break;
      }

      // optional uint32 gameScore = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamescore_)));
          set_has_gamescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 style = 4;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style(), output);
  }

  // optional uint32 winCount = 5;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wincount(), output);
  }

  // optional uint32 loseCount = 6;
  if (has_losecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->losecount(), output);
  }

  // optional float winRate = 7;
  if (has_winrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->winrate(), output);
  }

  // optional .message.UserBasicInfo.EffectData effect = 8;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->effect(), output);
  }

  // optional uint32 iconId = 9 [default = 6000];
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->iconid(), output);
  }

  // optional uint32 successionWinCount = 10;
  if (has_successionwincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->successionwincount(), output);
  }

  // optional uint32 onceLong = 11;
  if (has_oncelong()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->oncelong(), output);
  }

  // optional uint64 maximum = 12;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->maximum(), output);
  }

  // optional uint64 totalTime = 13;
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->totaltime(), output);
  }

  // optional uint32 roundsPlayed = 14;
  if (has_roundsplayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->roundsplayed(), output);
  }

  // optional uint32 throwStones = 15;
  if (has_throwstones()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->throwstones(), output);
  }

  // optional uint32 thrownStones = 16;
  if (has_thrownstones()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->thrownstones(), output);
  }

  // optional uint32 colorCats = 17;
  if (has_colorcats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->colorcats(), output);
  }

  // optional uint32 consumeGolds = 18;
  if (has_consumegolds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->consumegolds(), output);
  }

  // optional uint32 consumeItems1 = 19;
  if (has_consumeitems1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->consumeitems1(), output);
  }

  // optional uint32 consumeItems2 = 20;
  if (has_consumeitems2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->consumeitems2(), output);
  }

  // optional uint32 consumeItems3 = 21;
  if (has_consumeitems3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->consumeitems3(), output);
  }

  // optional uint32 consumeItems4 = 22;
  if (has_consumeitems4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->consumeitems4(), output);
  }

  // optional uint32 golds = 23;
  if (has_golds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->golds(), output);
  }

  // optional uint32 experience = 24;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->experience(), output);
  }

  // optional uint32 maxExperience = 25 [default = 1];
  if (has_maxexperience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->maxexperience(), output);
  }

  // repeated uint32 buyEquipFrame = 26;
  for (int i = 0; i < this->buyequipframe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->buyequipframe(i), output);
  }

  // optional uint32 gameScore = 27;
  if (has_gamescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->gamescore(), output);
  }

}

int UserBasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 style = 4;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style());
    }

    // optional uint32 winCount = 5;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wincount());
    }

    // optional uint32 loseCount = 6;
    if (has_losecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losecount());
    }

    // optional float winRate = 7;
    if (has_winrate()) {
      total_size += 1 + 4;
    }

    // optional .message.UserBasicInfo.EffectData effect = 8;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effect());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 iconId = 9 [default = 6000];
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iconid());
    }

    // optional uint32 successionWinCount = 10;
    if (has_successionwincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->successionwincount());
    }

    // optional uint32 onceLong = 11;
    if (has_oncelong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oncelong());
    }

    // optional uint64 maximum = 12;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maximum());
    }

    // optional uint64 totalTime = 13;
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totaltime());
    }

    // optional uint32 roundsPlayed = 14;
    if (has_roundsplayed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roundsplayed());
    }

    // optional uint32 throwStones = 15;
    if (has_throwstones()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->throwstones());
    }

    // optional uint32 thrownStones = 16;
    if (has_thrownstones()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thrownstones());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 colorCats = 17;
    if (has_colorcats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->colorcats());
    }

    // optional uint32 consumeGolds = 18;
    if (has_consumegolds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumegolds());
    }

    // optional uint32 consumeItems1 = 19;
    if (has_consumeitems1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumeitems1());
    }

    // optional uint32 consumeItems2 = 20;
    if (has_consumeitems2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumeitems2());
    }

    // optional uint32 consumeItems3 = 21;
    if (has_consumeitems3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumeitems3());
    }

    // optional uint32 consumeItems4 = 22;
    if (has_consumeitems4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumeitems4());
    }

    // optional uint32 golds = 23;
    if (has_golds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->golds());
    }

    // optional uint32 experience = 24;
    if (has_experience()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 maxExperience = 25 [default = 1];
    if (has_maxexperience()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxexperience());
    }

    // optional uint32 gameScore = 27;
    if (has_gamescore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamescore());
    }

  }
  // repeated uint32 buyEquipFrame = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->buyequipframe_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buyequipframe(i));
    }
    total_size += 2 * this->buyequipframe_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBasicInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserBasicInfo*>(&from));
}

void UserBasicInfo::MergeFrom(const UserBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buyequipframe_.MergeFrom(from.buyequipframe_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_losecount()) {
      set_losecount(from.losecount());
    }
    if (from.has_winrate()) {
      set_winrate(from.winrate());
    }
    if (from.has_effect()) {
      mutable_effect()->::message::UserBasicInfo_EffectData::MergeFrom(from.effect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_successionwincount()) {
      set_successionwincount(from.successionwincount());
    }
    if (from.has_oncelong()) {
      set_oncelong(from.oncelong());
    }
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
    if (from.has_roundsplayed()) {
      set_roundsplayed(from.roundsplayed());
    }
    if (from.has_throwstones()) {
      set_throwstones(from.throwstones());
    }
    if (from.has_thrownstones()) {
      set_thrownstones(from.thrownstones());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_colorcats()) {
      set_colorcats(from.colorcats());
    }
    if (from.has_consumegolds()) {
      set_consumegolds(from.consumegolds());
    }
    if (from.has_consumeitems1()) {
      set_consumeitems1(from.consumeitems1());
    }
    if (from.has_consumeitems2()) {
      set_consumeitems2(from.consumeitems2());
    }
    if (from.has_consumeitems3()) {
      set_consumeitems3(from.consumeitems3());
    }
    if (from.has_consumeitems4()) {
      set_consumeitems4(from.consumeitems4());
    }
    if (from.has_golds()) {
      set_golds(from.golds());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_maxexperience()) {
      set_maxexperience(from.maxexperience());
    }
    if (from.has_gamescore()) {
      set_gamescore(from.gamescore());
    }
  }
}

void UserBasicInfo::CopyFrom(const UserBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBasicInfo::IsInitialized() const {

  if (has_effect()) {
    if (!this->effect().IsInitialized()) return false;
  }
  return true;
}

void UserBasicInfo::Swap(UserBasicInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(style_, other->style_);
    std::swap(wincount_, other->wincount_);
    std::swap(losecount_, other->losecount_);
    std::swap(winrate_, other->winrate_);
    std::swap(effect_, other->effect_);
    std::swap(iconid_, other->iconid_);
    std::swap(successionwincount_, other->successionwincount_);
    std::swap(oncelong_, other->oncelong_);
    std::swap(maximum_, other->maximum_);
    std::swap(totaltime_, other->totaltime_);
    std::swap(roundsplayed_, other->roundsplayed_);
    std::swap(throwstones_, other->throwstones_);
    std::swap(thrownstones_, other->thrownstones_);
    std::swap(colorcats_, other->colorcats_);
    std::swap(consumegolds_, other->consumegolds_);
    std::swap(consumeitems1_, other->consumeitems1_);
    std::swap(consumeitems2_, other->consumeitems2_);
    std::swap(consumeitems3_, other->consumeitems3_);
    std::swap(consumeitems4_, other->consumeitems4_);
    std::swap(golds_, other->golds_);
    std::swap(experience_, other->experience_);
    std::swap(maxexperience_, other->maxexperience_);
    buyequipframe_.Swap(&other->buyequipframe_);
    std::swap(gamescore_, other->gamescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserBasicInfo::GetTypeName() const {
  return "message.UserBasicInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
