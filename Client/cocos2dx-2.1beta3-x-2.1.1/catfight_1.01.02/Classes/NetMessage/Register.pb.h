// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Register.proto

#ifndef PROTOBUF_Register_2eproto__INCLUDED
#define PROTOBUF_Register_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Register_2eproto();
void protobuf_AssignDesc_Register_2eproto();
void protobuf_ShutdownFile_Register_2eproto();

class RegisterRequest;
class RegisterResponse;

enum RegisterResponse_RegisterStatus {
  RegisterResponse_RegisterStatus_RegisterStatus_SUCCESS = 1,
  RegisterResponse_RegisterStatus_RegisterStatus_FAIL = 0
};
bool RegisterResponse_RegisterStatus_IsValid(int value);
const RegisterResponse_RegisterStatus RegisterResponse_RegisterStatus_RegisterStatus_MIN = RegisterResponse_RegisterStatus_RegisterStatus_FAIL;
const RegisterResponse_RegisterStatus RegisterResponse_RegisterStatus_RegisterStatus_MAX = RegisterResponse_RegisterStatus_RegisterStatus_SUCCESS;
const int RegisterResponse_RegisterStatus_RegisterStatus_ARRAYSIZE = RegisterResponse_RegisterStatus_RegisterStatus_MAX + 1;

// ===================================================================

class RegisterRequest : public ::google::protobuf::MessageLite {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const RegisterRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RegisterRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RegisterRequest* other);

  // implements Message ----------------------------------------------

  RegisterRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required int32 userIconId = 2;
  inline bool has_usericonid() const;
  inline void clear_usericonid();
  static const int kUserIconIdFieldNumber = 2;
  inline ::google::protobuf::int32 usericonid() const;
  inline void set_usericonid(::google::protobuf::int32 value);

  // optional uint32 channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint32 version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.RegisterRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_usericonid();
  inline void clear_has_usericonid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_version();
  inline void clear_has_version();

  ::std::string* username_;
  ::google::protobuf::int32 usericonid_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Register_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Register_2eproto();
  #endif
  friend void protobuf_AssignDesc_Register_2eproto();
  friend void protobuf_ShutdownFile_Register_2eproto();

  void InitAsDefaultInstance();
  static RegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegisterResponse : public ::google::protobuf::MessageLite {
 public:
  RegisterResponse();
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const RegisterResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RegisterResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RegisterResponse* other);

  // implements Message ----------------------------------------------

  RegisterResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef RegisterResponse_RegisterStatus RegisterStatus;
  static const RegisterStatus RegisterStatus_SUCCESS = RegisterResponse_RegisterStatus_RegisterStatus_SUCCESS;
  static const RegisterStatus RegisterStatus_FAIL = RegisterResponse_RegisterStatus_RegisterStatus_FAIL;
  static inline bool RegisterStatus_IsValid(int value) {
    return RegisterResponse_RegisterStatus_IsValid(value);
  }
  static const RegisterStatus RegisterStatus_MIN =
    RegisterResponse_RegisterStatus_RegisterStatus_MIN;
  static const RegisterStatus RegisterStatus_MAX =
    RegisterResponse_RegisterStatus_RegisterStatus_MAX;
  static const int RegisterStatus_ARRAYSIZE =
    RegisterResponse_RegisterStatus_RegisterStatus_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .message.RegisterResponse.RegisterStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::message::RegisterResponse_RegisterStatus status() const;
  inline void set_status(::message::RegisterResponse_RegisterStatus value);

  // optional uint32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.RegisterResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_version();
  inline void clear_has_version();

  int status_;
  ::google::protobuf::uint32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Register_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Register_2eproto();
  #endif
  friend void protobuf_AssignDesc_Register_2eproto();
  friend void protobuf_ShutdownFile_Register_2eproto();

  void InitAsDefaultInstance();
  static RegisterResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RegisterRequest

// required string userName = 1;
inline bool RegisterRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& RegisterRequest::username() const {
  return *username_;
}
inline void RegisterRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void RegisterRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void RegisterRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* RegisterRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 userIconId = 2;
inline bool RegisterRequest::has_usericonid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterRequest::set_has_usericonid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterRequest::clear_has_usericonid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterRequest::clear_usericonid() {
  usericonid_ = 0;
  clear_has_usericonid();
}
inline ::google::protobuf::int32 RegisterRequest::usericonid() const {
  return usericonid_;
}
inline void RegisterRequest::set_usericonid(::google::protobuf::int32 value) {
  set_has_usericonid();
  usericonid_ = value;
}

// optional uint32 channel = 3;
inline bool RegisterRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterRequest::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 RegisterRequest::channel() const {
  return channel_;
}
inline void RegisterRequest::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// optional uint32 version = 4;
inline bool RegisterRequest::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterRequest::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterRequest::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 RegisterRequest::version() const {
  return version_;
}
inline void RegisterRequest::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// RegisterResponse

// required .message.RegisterResponse.RegisterStatus status = 1;
inline bool RegisterResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::message::RegisterResponse_RegisterStatus RegisterResponse::status() const {
  return static_cast< ::message::RegisterResponse_RegisterStatus >(status_);
}
inline void RegisterResponse::set_status(::message::RegisterResponse_RegisterStatus value) {
  assert(::message::RegisterResponse_RegisterStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 version = 2;
inline bool RegisterResponse::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterResponse::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterResponse::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 RegisterResponse::version() const {
  return version_;
}
inline void RegisterResponse::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Register_2eproto__INCLUDED
