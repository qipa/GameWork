// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Achievement.proto

#ifndef PROTOBUF_Achievement_2eproto__INCLUDED
#define PROTOBUF_Achievement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Achievement_2eproto();
void protobuf_AssignDesc_Achievement_2eproto();
void protobuf_ShutdownFile_Achievement_2eproto();

class AchievementRequest;
class AchievementResponse;
class AchievementResponse_AchievemenStateInfo;

enum AchievementResponse_AchievemenStateInfo_State {
  AchievementResponse_AchievemenStateInfo_State_State_Not_Receive = 0,
  AchievementResponse_AchievemenStateInfo_State_State_Can_Receive = 1,
  AchievementResponse_AchievemenStateInfo_State_State_Have_Receive = 2
};
bool AchievementResponse_AchievemenStateInfo_State_IsValid(int value);
const AchievementResponse_AchievemenStateInfo_State AchievementResponse_AchievemenStateInfo_State_State_MIN = AchievementResponse_AchievemenStateInfo_State_State_Not_Receive;
const AchievementResponse_AchievemenStateInfo_State AchievementResponse_AchievemenStateInfo_State_State_MAX = AchievementResponse_AchievemenStateInfo_State_State_Have_Receive;
const int AchievementResponse_AchievemenStateInfo_State_State_ARRAYSIZE = AchievementResponse_AchievemenStateInfo_State_State_MAX + 1;

// ===================================================================

class AchievementRequest : public ::google::protobuf::MessageLite {
 public:
  AchievementRequest();
  virtual ~AchievementRequest();

  AchievementRequest(const AchievementRequest& from);

  inline AchievementRequest& operator=(const AchievementRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const AchievementRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AchievementRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AchievementRequest* other);

  // implements Message ----------------------------------------------

  AchievementRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AchievementRequest& from);
  void MergeFrom(const AchievementRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:message.AchievementRequest)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Achievement_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Achievement_2eproto();
  #endif
  friend void protobuf_AssignDesc_Achievement_2eproto();
  friend void protobuf_ShutdownFile_Achievement_2eproto();

  void InitAsDefaultInstance();
  static AchievementRequest* default_instance_;
};
// -------------------------------------------------------------------

class AchievementResponse_AchievemenStateInfo : public ::google::protobuf::MessageLite {
 public:
  AchievementResponse_AchievemenStateInfo();
  virtual ~AchievementResponse_AchievemenStateInfo();

  AchievementResponse_AchievemenStateInfo(const AchievementResponse_AchievemenStateInfo& from);

  inline AchievementResponse_AchievemenStateInfo& operator=(const AchievementResponse_AchievemenStateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const AchievementResponse_AchievemenStateInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AchievementResponse_AchievemenStateInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AchievementResponse_AchievemenStateInfo* other);

  // implements Message ----------------------------------------------

  AchievementResponse_AchievemenStateInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AchievementResponse_AchievemenStateInfo& from);
  void MergeFrom(const AchievementResponse_AchievemenStateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef AchievementResponse_AchievemenStateInfo_State State;
  static const State State_Not_Receive = AchievementResponse_AchievemenStateInfo_State_State_Not_Receive;
  static const State State_Can_Receive = AchievementResponse_AchievemenStateInfo_State_State_Can_Receive;
  static const State State_Have_Receive = AchievementResponse_AchievemenStateInfo_State_State_Have_Receive;
  static inline bool State_IsValid(int value) {
    return AchievementResponse_AchievemenStateInfo_State_IsValid(value);
  }
  static const State State_MIN =
    AchievementResponse_AchievemenStateInfo_State_State_MIN;
  static const State State_MAX =
    AchievementResponse_AchievemenStateInfo_State_State_MAX;
  static const int State_ARRAYSIZE =
    AchievementResponse_AchievemenStateInfo_State_State_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required int32 achievementID = 1;
  inline bool has_achievementid() const;
  inline void clear_achievementid();
  static const int kAchievementIDFieldNumber = 1;
  inline ::google::protobuf::int32 achievementid() const;
  inline void set_achievementid(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required .message.AchievementResponse.AchievemenStateInfo.State state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::message::AchievementResponse_AchievemenStateInfo_State state() const;
  inline void set_state(::message::AchievementResponse_AchievemenStateInfo_State value);

  // @@protoc_insertion_point(class_scope:message.AchievementResponse.AchievemenStateInfo)
 private:
  inline void set_has_achievementid();
  inline void clear_has_achievementid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_state();
  inline void clear_has_state();

  ::std::string* name_;
  ::google::protobuf::int32 achievementid_;
  int state_;
  ::std::string* desc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Achievement_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Achievement_2eproto();
  #endif
  friend void protobuf_AssignDesc_Achievement_2eproto();
  friend void protobuf_ShutdownFile_Achievement_2eproto();

  void InitAsDefaultInstance();
  static AchievementResponse_AchievemenStateInfo* default_instance_;
};
// -------------------------------------------------------------------

class AchievementResponse : public ::google::protobuf::MessageLite {
 public:
  AchievementResponse();
  virtual ~AchievementResponse();

  AchievementResponse(const AchievementResponse& from);

  inline AchievementResponse& operator=(const AchievementResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const AchievementResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AchievementResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AchievementResponse* other);

  // implements Message ----------------------------------------------

  AchievementResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AchievementResponse& from);
  void MergeFrom(const AchievementResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef AchievementResponse_AchievemenStateInfo AchievemenStateInfo;

  // accessors -------------------------------------------------------

  // repeated .message.AchievementResponse.AchievemenStateInfo AchievementList = 1;
  inline int achievementlist_size() const;
  inline void clear_achievementlist();
  static const int kAchievementListFieldNumber = 1;
  inline const ::message::AchievementResponse_AchievemenStateInfo& achievementlist(int index) const;
  inline ::message::AchievementResponse_AchievemenStateInfo* mutable_achievementlist(int index);
  inline ::message::AchievementResponse_AchievemenStateInfo* add_achievementlist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::AchievementResponse_AchievemenStateInfo >&
      achievementlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::AchievementResponse_AchievemenStateInfo >*
      mutable_achievementlist();

  // @@protoc_insertion_point(class_scope:message.AchievementResponse)
 private:

  ::google::protobuf::RepeatedPtrField< ::message::AchievementResponse_AchievemenStateInfo > achievementlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Achievement_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Achievement_2eproto();
  #endif
  friend void protobuf_AssignDesc_Achievement_2eproto();
  friend void protobuf_ShutdownFile_Achievement_2eproto();

  void InitAsDefaultInstance();
  static AchievementResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AchievementRequest

// -------------------------------------------------------------------

// AchievementResponse_AchievemenStateInfo

// required int32 achievementID = 1;
inline bool AchievementResponse_AchievemenStateInfo::has_achievementid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchievementResponse_AchievemenStateInfo::set_has_achievementid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchievementResponse_AchievemenStateInfo::clear_has_achievementid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchievementResponse_AchievemenStateInfo::clear_achievementid() {
  achievementid_ = 0;
  clear_has_achievementid();
}
inline ::google::protobuf::int32 AchievementResponse_AchievemenStateInfo::achievementid() const {
  return achievementid_;
}
inline void AchievementResponse_AchievemenStateInfo::set_achievementid(::google::protobuf::int32 value) {
  set_has_achievementid();
  achievementid_ = value;
}

// required string name = 2;
inline bool AchievementResponse_AchievemenStateInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchievementResponse_AchievemenStateInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchievementResponse_AchievemenStateInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchievementResponse_AchievemenStateInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AchievementResponse_AchievemenStateInfo::name() const {
  return *name_;
}
inline void AchievementResponse_AchievemenStateInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AchievementResponse_AchievemenStateInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AchievementResponse_AchievemenStateInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AchievementResponse_AchievemenStateInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AchievementResponse_AchievemenStateInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AchievementResponse_AchievemenStateInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string desc = 3;
inline bool AchievementResponse_AchievemenStateInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AchievementResponse_AchievemenStateInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AchievementResponse_AchievemenStateInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AchievementResponse_AchievemenStateInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& AchievementResponse_AchievemenStateInfo::desc() const {
  return *desc_;
}
inline void AchievementResponse_AchievemenStateInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void AchievementResponse_AchievemenStateInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void AchievementResponse_AchievemenStateInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AchievementResponse_AchievemenStateInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* AchievementResponse_AchievemenStateInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AchievementResponse_AchievemenStateInfo::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .message.AchievementResponse.AchievemenStateInfo.State state = 4;
inline bool AchievementResponse_AchievemenStateInfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AchievementResponse_AchievemenStateInfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AchievementResponse_AchievemenStateInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AchievementResponse_AchievemenStateInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::message::AchievementResponse_AchievemenStateInfo_State AchievementResponse_AchievemenStateInfo::state() const {
  return static_cast< ::message::AchievementResponse_AchievemenStateInfo_State >(state_);
}
inline void AchievementResponse_AchievemenStateInfo::set_state(::message::AchievementResponse_AchievemenStateInfo_State value) {
  assert(::message::AchievementResponse_AchievemenStateInfo_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// AchievementResponse

// repeated .message.AchievementResponse.AchievemenStateInfo AchievementList = 1;
inline int AchievementResponse::achievementlist_size() const {
  return achievementlist_.size();
}
inline void AchievementResponse::clear_achievementlist() {
  achievementlist_.Clear();
}
inline const ::message::AchievementResponse_AchievemenStateInfo& AchievementResponse::achievementlist(int index) const {
  return achievementlist_.Get(index);
}
inline ::message::AchievementResponse_AchievemenStateInfo* AchievementResponse::mutable_achievementlist(int index) {
  return achievementlist_.Mutable(index);
}
inline ::message::AchievementResponse_AchievemenStateInfo* AchievementResponse::add_achievementlist() {
  return achievementlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::AchievementResponse_AchievemenStateInfo >&
AchievementResponse::achievementlist() const {
  return achievementlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::AchievementResponse_AchievemenStateInfo >*
AchievementResponse::mutable_achievementlist() {
  return &achievementlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Achievement_2eproto__INCLUDED
