// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleInfoData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleInfoData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_BattleInfoData_2eproto() {
  delete BattleInfo::default_instance_;
  delete BattleInfo_Balloon::default_instance_;
  delete BattleInfo_DropPetrifactionBalloon::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_BattleInfoData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_BattleInfoData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BattleInfo::default_instance_ = new BattleInfo();
  BattleInfo_Balloon::default_instance_ = new BattleInfo_Balloon();
  BattleInfo_DropPetrifactionBalloon::default_instance_ = new BattleInfo_DropPetrifactionBalloon();
  BattleInfo::default_instance_->InitAsDefaultInstance();
  BattleInfo_Balloon::default_instance_->InitAsDefaultInstance();
  BattleInfo_DropPetrifactionBalloon::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleInfoData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BattleInfoData_2eproto_once_);
void protobuf_AddDesc_BattleInfoData_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_BattleInfoData_2eproto_once_,
                 &protobuf_AddDesc_BattleInfoData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleInfoData_2eproto {
  StaticDescriptorInitializer_BattleInfoData_2eproto() {
    protobuf_AddDesc_BattleInfoData_2eproto();
  }
} static_descriptor_initializer_BattleInfoData_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int BattleInfo_Balloon::kIdFieldNumber;
const int BattleInfo_Balloon::kXFieldNumber;
const int BattleInfo_Balloon::kYFieldNumber;
const int BattleInfo_Balloon::kAngleFieldNumber;
const int BattleInfo_Balloon::kColorTypeFieldNumber;
#endif  // !_MSC_VER

BattleInfo_Balloon::BattleInfo_Balloon()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleInfo_Balloon::InitAsDefaultInstance() {
}

BattleInfo_Balloon::BattleInfo_Balloon(const BattleInfo_Balloon& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInfo_Balloon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  colortype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInfo_Balloon::~BattleInfo_Balloon() {
  SharedDtor();
}

void BattleInfo_Balloon::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleInfo_Balloon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleInfo_Balloon& BattleInfo_Balloon::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleInfoData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleInfoData_2eproto();
#endif
  return *default_instance_;
}

BattleInfo_Balloon* BattleInfo_Balloon::default_instance_ = NULL;

BattleInfo_Balloon* BattleInfo_Balloon::New() const {
  return new BattleInfo_Balloon;
}

void BattleInfo_Balloon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
    angle_ = 0;
    colortype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleInfo_Balloon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_angle;
        break;
      }

      // required float angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_colorType;
        break;
      }

      // required int32 colorType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colortype_)));
          set_has_colortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInfo_Balloon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float angle = 4;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle(), output);
  }

  // required int32 colorType = 5;
  if (has_colortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->colortype(), output);
  }

}

int BattleInfo_Balloon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float angle = 4;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required int32 colorType = 5;
    if (has_colortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colortype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInfo_Balloon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleInfo_Balloon*>(&from));
}

void BattleInfo_Balloon::MergeFrom(const BattleInfo_Balloon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_colortype()) {
      set_colortype(from.colortype());
    }
  }
}

void BattleInfo_Balloon::CopyFrom(const BattleInfo_Balloon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInfo_Balloon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BattleInfo_Balloon::Swap(BattleInfo_Balloon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    std::swap(colortype_, other->colortype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleInfo_Balloon::GetTypeName() const {
  return "message.BattleInfo.Balloon";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BattleInfo_DropPetrifactionBalloon::kCountFieldNumber;
const int BattleInfo_DropPetrifactionBalloon::kWillChangeColorTypeFieldNumber;
#endif  // !_MSC_VER

BattleInfo_DropPetrifactionBalloon::BattleInfo_DropPetrifactionBalloon()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleInfo_DropPetrifactionBalloon::InitAsDefaultInstance() {
}

BattleInfo_DropPetrifactionBalloon::BattleInfo_DropPetrifactionBalloon(const BattleInfo_DropPetrifactionBalloon& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInfo_DropPetrifactionBalloon::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  willchangecolortype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInfo_DropPetrifactionBalloon::~BattleInfo_DropPetrifactionBalloon() {
  SharedDtor();
}

void BattleInfo_DropPetrifactionBalloon::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleInfo_DropPetrifactionBalloon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleInfo_DropPetrifactionBalloon& BattleInfo_DropPetrifactionBalloon::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleInfoData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleInfoData_2eproto();
#endif
  return *default_instance_;
}

BattleInfo_DropPetrifactionBalloon* BattleInfo_DropPetrifactionBalloon::default_instance_ = NULL;

BattleInfo_DropPetrifactionBalloon* BattleInfo_DropPetrifactionBalloon::New() const {
  return new BattleInfo_DropPetrifactionBalloon;
}

void BattleInfo_DropPetrifactionBalloon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    willchangecolortype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleInfo_DropPetrifactionBalloon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_willChangeColorType;
        break;
      }

      // required int32 willChangeColorType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_willChangeColorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &willchangecolortype_)));
          set_has_willchangecolortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInfo_DropPetrifactionBalloon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // required int32 willChangeColorType = 2;
  if (has_willchangecolortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->willchangecolortype(), output);
  }

}

int BattleInfo_DropPetrifactionBalloon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 willChangeColorType = 2;
    if (has_willchangecolortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->willchangecolortype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInfo_DropPetrifactionBalloon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleInfo_DropPetrifactionBalloon*>(&from));
}

void BattleInfo_DropPetrifactionBalloon::MergeFrom(const BattleInfo_DropPetrifactionBalloon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_willchangecolortype()) {
      set_willchangecolortype(from.willchangecolortype());
    }
  }
}

void BattleInfo_DropPetrifactionBalloon::CopyFrom(const BattleInfo_DropPetrifactionBalloon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInfo_DropPetrifactionBalloon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BattleInfo_DropPetrifactionBalloon::Swap(BattleInfo_DropPetrifactionBalloon* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(willchangecolortype_, other->willchangecolortype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleInfo_DropPetrifactionBalloon::GetTypeName() const {
  return "message.BattleInfo.DropPetrifactionBalloon";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BattleInfo::kIdFieldNumber;
const int BattleInfo::kTimestampFieldNumber;
const int BattleInfo::kBalloonDataListFieldNumber;
const int BattleInfo::kDropPetrifactionListFieldNumber;
const int BattleInfo::kUserPropIDFieldNumber;
#endif  // !_MSC_VER

BattleInfo::BattleInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleInfo::InitAsDefaultInstance() {
}

BattleInfo::BattleInfo(const BattleInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInfo::~BattleInfo() {
  SharedDtor();
}

void BattleInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleInfo& BattleInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleInfoData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleInfoData_2eproto();
#endif
  return *default_instance_;
}

BattleInfo* BattleInfo::default_instance_ = NULL;

BattleInfo* BattleInfo::New() const {
  return new BattleInfo;
}

void BattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  balloondatalist_.Clear();
  droppetrifactionlist_.Clear();
  userpropid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_balloonDataList;
        break;
      }

      // repeated .message.BattleInfo.Balloon balloonDataList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_balloonDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_balloondatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_balloonDataList;
        if (input->ExpectTag(34)) goto parse_dropPetrifactionList;
        break;
      }

      // repeated .message.BattleInfo.DropPetrifactionBalloon dropPetrifactionList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropPetrifactionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droppetrifactionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dropPetrifactionList;
        if (input->ExpectTag(40)) goto parse_userPropID;
        break;
      }

      // repeated int32 userPropID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userPropID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_userpropid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userpropid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_userPropID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // repeated .message.BattleInfo.Balloon balloonDataList = 3;
  for (int i = 0; i < this->balloondatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->balloondatalist(i), output);
  }

  // repeated .message.BattleInfo.DropPetrifactionBalloon dropPetrifactionList = 4;
  for (int i = 0; i < this->droppetrifactionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->droppetrifactionlist(i), output);
  }

  // repeated int32 userPropID = 5;
  for (int i = 0; i < this->userpropid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->userpropid(i), output);
  }

}

int BattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  // repeated .message.BattleInfo.Balloon balloonDataList = 3;
  total_size += 1 * this->balloondatalist_size();
  for (int i = 0; i < this->balloondatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->balloondatalist(i));
  }

  // repeated .message.BattleInfo.DropPetrifactionBalloon dropPetrifactionList = 4;
  total_size += 1 * this->droppetrifactionlist_size();
  for (int i = 0; i < this->droppetrifactionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droppetrifactionlist(i));
  }

  // repeated int32 userPropID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->userpropid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userpropid(i));
    }
    total_size += 1 * this->userpropid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleInfo*>(&from));
}

void BattleInfo::MergeFrom(const BattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  balloondatalist_.MergeFrom(from.balloondatalist_);
  droppetrifactionlist_.MergeFrom(from.droppetrifactionlist_);
  userpropid_.MergeFrom(from.userpropid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void BattleInfo::CopyFrom(const BattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < balloondatalist_size(); i++) {
    if (!this->balloondatalist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < droppetrifactionlist_size(); i++) {
    if (!this->droppetrifactionlist(i).IsInitialized()) return false;
  }
  return true;
}

void BattleInfo::Swap(BattleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(timestamp_, other->timestamp_);
    balloondatalist_.Swap(&other->balloondatalist_);
    droppetrifactionlist_.Swap(&other->droppetrifactionlist_);
    userpropid_.Swap(&other->userpropid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleInfo::GetTypeName() const {
  return "message.BattleInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
