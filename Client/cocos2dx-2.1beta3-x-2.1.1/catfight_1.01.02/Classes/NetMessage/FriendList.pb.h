// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendList.proto

#ifndef PROTOBUF_FriendList_2eproto__INCLUDED
#define PROTOBUF_FriendList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FriendList_2eproto();
void protobuf_AssignDesc_FriendList_2eproto();
void protobuf_ShutdownFile_FriendList_2eproto();

class FriendListRequest;
class FriendListResponse;
class FriendListResponse_PlayerInfo;

enum FriendListResponse_PlayerInfo_State {
  FriendListResponse_PlayerInfo_State_State_Online = 0,
  FriendListResponse_PlayerInfo_State_State_Battle = 1,
  FriendListResponse_PlayerInfo_State_State_Offline = 2
};
bool FriendListResponse_PlayerInfo_State_IsValid(int value);
const FriendListResponse_PlayerInfo_State FriendListResponse_PlayerInfo_State_State_MIN = FriendListResponse_PlayerInfo_State_State_Online;
const FriendListResponse_PlayerInfo_State FriendListResponse_PlayerInfo_State_State_MAX = FriendListResponse_PlayerInfo_State_State_Offline;
const int FriendListResponse_PlayerInfo_State_State_ARRAYSIZE = FriendListResponse_PlayerInfo_State_State_MAX + 1;

// ===================================================================

class FriendListRequest : public ::google::protobuf::MessageLite {
 public:
  FriendListRequest();
  virtual ~FriendListRequest();

  FriendListRequest(const FriendListRequest& from);

  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendListRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendListRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendListRequest* other);

  // implements Message ----------------------------------------------

  FriendListRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendListRequest& from);
  void MergeFrom(const FriendListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 wb_Type = 1;
  inline bool has_wb_type() const;
  inline void clear_wb_type();
  static const int kWbTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 wb_type() const;
  inline void set_wb_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.FriendListRequest)
 private:
  inline void set_has_wb_type();
  inline void clear_has_wb_type();

  ::google::protobuf::uint32 wb_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FriendList_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FriendList_2eproto();
  #endif
  friend void protobuf_AssignDesc_FriendList_2eproto();
  friend void protobuf_ShutdownFile_FriendList_2eproto();

  void InitAsDefaultInstance();
  static FriendListRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendListResponse_PlayerInfo : public ::google::protobuf::MessageLite {
 public:
  FriendListResponse_PlayerInfo();
  virtual ~FriendListResponse_PlayerInfo();

  FriendListResponse_PlayerInfo(const FriendListResponse_PlayerInfo& from);

  inline FriendListResponse_PlayerInfo& operator=(const FriendListResponse_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendListResponse_PlayerInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendListResponse_PlayerInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendListResponse_PlayerInfo* other);

  // implements Message ----------------------------------------------

  FriendListResponse_PlayerInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendListResponse_PlayerInfo& from);
  void MergeFrom(const FriendListResponse_PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef FriendListResponse_PlayerInfo_State State;
  static const State State_Online = FriendListResponse_PlayerInfo_State_State_Online;
  static const State State_Battle = FriendListResponse_PlayerInfo_State_State_Battle;
  static const State State_Offline = FriendListResponse_PlayerInfo_State_State_Offline;
  static inline bool State_IsValid(int value) {
    return FriendListResponse_PlayerInfo_State_IsValid(value);
  }
  static const State State_MIN =
    FriendListResponse_PlayerInfo_State_State_MIN;
  static const State State_MAX =
    FriendListResponse_PlayerInfo_State_State_MAX;
  static const int State_ARRAYSIZE =
    FriendListResponse_PlayerInfo_State_State_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string game_UUID = 1;
  inline bool has_game_uuid() const;
  inline void clear_game_uuid();
  static const int kGameUUIDFieldNumber = 1;
  inline const ::std::string& game_uuid() const;
  inline void set_game_uuid(const ::std::string& value);
  inline void set_game_uuid(const char* value);
  inline void set_game_uuid(const char* value, size_t size);
  inline ::std::string* mutable_game_uuid();
  inline ::std::string* release_game_uuid();
  inline void set_allocated_game_uuid(::std::string* game_uuid);

  // required string friendName = 2;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 2;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // required int32 gameScore = 3;
  inline bool has_gamescore() const;
  inline void clear_gamescore();
  static const int kGameScoreFieldNumber = 3;
  inline ::google::protobuf::int32 gamescore() const;
  inline void set_gamescore(::google::protobuf::int32 value);

  // required int32 headIcon = 4;
  inline bool has_headicon() const;
  inline void clear_headicon();
  static const int kHeadIconFieldNumber = 4;
  inline ::google::protobuf::int32 headicon() const;
  inline void set_headicon(::google::protobuf::int32 value);

  // required bool isAllowGive = 5;
  inline bool has_isallowgive() const;
  inline void clear_isallowgive();
  static const int kIsAllowGiveFieldNumber = 5;
  inline bool isallowgive() const;
  inline void set_isallowgive(bool value);

  // required .message.FriendListResponse.PlayerInfo.State state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::message::FriendListResponse_PlayerInfo_State state() const;
  inline void set_state(::message::FriendListResponse_PlayerInfo_State value);

  // required string friendNickName = 7;
  inline bool has_friendnickname() const;
  inline void clear_friendnickname();
  static const int kFriendNickNameFieldNumber = 7;
  inline const ::std::string& friendnickname() const;
  inline void set_friendnickname(const ::std::string& value);
  inline void set_friendnickname(const char* value);
  inline void set_friendnickname(const char* value, size_t size);
  inline ::std::string* mutable_friendnickname();
  inline ::std::string* release_friendnickname();
  inline void set_allocated_friendnickname(::std::string* friendnickname);

  // @@protoc_insertion_point(class_scope:message.FriendListResponse.PlayerInfo)
 private:
  inline void set_has_game_uuid();
  inline void clear_has_game_uuid();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_gamescore();
  inline void clear_has_gamescore();
  inline void set_has_headicon();
  inline void clear_has_headicon();
  inline void set_has_isallowgive();
  inline void clear_has_isallowgive();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_friendnickname();
  inline void clear_has_friendnickname();

  ::std::string* game_uuid_;
  ::std::string* friendname_;
  ::google::protobuf::int32 gamescore_;
  ::google::protobuf::int32 headicon_;
  bool isallowgive_;
  int state_;
  ::std::string* friendnickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FriendList_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FriendList_2eproto();
  #endif
  friend void protobuf_AssignDesc_FriendList_2eproto();
  friend void protobuf_ShutdownFile_FriendList_2eproto();

  void InitAsDefaultInstance();
  static FriendListResponse_PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendListResponse : public ::google::protobuf::MessageLite {
 public:
  FriendListResponse();
  virtual ~FriendListResponse();

  FriendListResponse(const FriendListResponse& from);

  inline FriendListResponse& operator=(const FriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendListResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendListResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendListResponse* other);

  // implements Message ----------------------------------------------

  FriendListResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendListResponse& from);
  void MergeFrom(const FriendListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef FriendListResponse_PlayerInfo PlayerInfo;

  // accessors -------------------------------------------------------

  // repeated .message.FriendListResponse.PlayerInfo friendList = 1;
  inline int friendlist_size() const;
  inline void clear_friendlist();
  static const int kFriendListFieldNumber = 1;
  inline const ::message::FriendListResponse_PlayerInfo& friendlist(int index) const;
  inline ::message::FriendListResponse_PlayerInfo* mutable_friendlist(int index);
  inline ::message::FriendListResponse_PlayerInfo* add_friendlist();
  inline const ::google::protobuf::RepeatedPtrField< ::message::FriendListResponse_PlayerInfo >&
      friendlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::FriendListResponse_PlayerInfo >*
      mutable_friendlist();

  // @@protoc_insertion_point(class_scope:message.FriendListResponse)
 private:

  ::google::protobuf::RepeatedPtrField< ::message::FriendListResponse_PlayerInfo > friendlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FriendList_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FriendList_2eproto();
  #endif
  friend void protobuf_AssignDesc_FriendList_2eproto();
  friend void protobuf_ShutdownFile_FriendList_2eproto();

  void InitAsDefaultInstance();
  static FriendListResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendListRequest

// optional uint32 wb_Type = 1;
inline bool FriendListRequest::has_wb_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListRequest::set_has_wb_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListRequest::clear_has_wb_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListRequest::clear_wb_type() {
  wb_type_ = 0u;
  clear_has_wb_type();
}
inline ::google::protobuf::uint32 FriendListRequest::wb_type() const {
  return wb_type_;
}
inline void FriendListRequest::set_wb_type(::google::protobuf::uint32 value) {
  set_has_wb_type();
  wb_type_ = value;
}

// -------------------------------------------------------------------

// FriendListResponse_PlayerInfo

// required string game_UUID = 1;
inline bool FriendListResponse_PlayerInfo::has_game_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListResponse_PlayerInfo::set_has_game_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListResponse_PlayerInfo::clear_has_game_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListResponse_PlayerInfo::clear_game_uuid() {
  if (game_uuid_ != &::google::protobuf::internal::kEmptyString) {
    game_uuid_->clear();
  }
  clear_has_game_uuid();
}
inline const ::std::string& FriendListResponse_PlayerInfo::game_uuid() const {
  return *game_uuid_;
}
inline void FriendListResponse_PlayerInfo::set_game_uuid(const ::std::string& value) {
  set_has_game_uuid();
  if (game_uuid_ == &::google::protobuf::internal::kEmptyString) {
    game_uuid_ = new ::std::string;
  }
  game_uuid_->assign(value);
}
inline void FriendListResponse_PlayerInfo::set_game_uuid(const char* value) {
  set_has_game_uuid();
  if (game_uuid_ == &::google::protobuf::internal::kEmptyString) {
    game_uuid_ = new ::std::string;
  }
  game_uuid_->assign(value);
}
inline void FriendListResponse_PlayerInfo::set_game_uuid(const char* value, size_t size) {
  set_has_game_uuid();
  if (game_uuid_ == &::google::protobuf::internal::kEmptyString) {
    game_uuid_ = new ::std::string;
  }
  game_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendListResponse_PlayerInfo::mutable_game_uuid() {
  set_has_game_uuid();
  if (game_uuid_ == &::google::protobuf::internal::kEmptyString) {
    game_uuid_ = new ::std::string;
  }
  return game_uuid_;
}
inline ::std::string* FriendListResponse_PlayerInfo::release_game_uuid() {
  clear_has_game_uuid();
  if (game_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_uuid_;
    game_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendListResponse_PlayerInfo::set_allocated_game_uuid(::std::string* game_uuid) {
  if (game_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete game_uuid_;
  }
  if (game_uuid) {
    set_has_game_uuid();
    game_uuid_ = game_uuid;
  } else {
    clear_has_game_uuid();
    game_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string friendName = 2;
inline bool FriendListResponse_PlayerInfo::has_friendname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendListResponse_PlayerInfo::set_has_friendname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendListResponse_PlayerInfo::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendListResponse_PlayerInfo::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& FriendListResponse_PlayerInfo::friendname() const {
  return *friendname_;
}
inline void FriendListResponse_PlayerInfo::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void FriendListResponse_PlayerInfo::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void FriendListResponse_PlayerInfo::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendListResponse_PlayerInfo::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* FriendListResponse_PlayerInfo::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendListResponse_PlayerInfo::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 gameScore = 3;
inline bool FriendListResponse_PlayerInfo::has_gamescore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendListResponse_PlayerInfo::set_has_gamescore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendListResponse_PlayerInfo::clear_has_gamescore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendListResponse_PlayerInfo::clear_gamescore() {
  gamescore_ = 0;
  clear_has_gamescore();
}
inline ::google::protobuf::int32 FriendListResponse_PlayerInfo::gamescore() const {
  return gamescore_;
}
inline void FriendListResponse_PlayerInfo::set_gamescore(::google::protobuf::int32 value) {
  set_has_gamescore();
  gamescore_ = value;
}

// required int32 headIcon = 4;
inline bool FriendListResponse_PlayerInfo::has_headicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendListResponse_PlayerInfo::set_has_headicon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendListResponse_PlayerInfo::clear_has_headicon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendListResponse_PlayerInfo::clear_headicon() {
  headicon_ = 0;
  clear_has_headicon();
}
inline ::google::protobuf::int32 FriendListResponse_PlayerInfo::headicon() const {
  return headicon_;
}
inline void FriendListResponse_PlayerInfo::set_headicon(::google::protobuf::int32 value) {
  set_has_headicon();
  headicon_ = value;
}

// required bool isAllowGive = 5;
inline bool FriendListResponse_PlayerInfo::has_isallowgive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendListResponse_PlayerInfo::set_has_isallowgive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendListResponse_PlayerInfo::clear_has_isallowgive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendListResponse_PlayerInfo::clear_isallowgive() {
  isallowgive_ = false;
  clear_has_isallowgive();
}
inline bool FriendListResponse_PlayerInfo::isallowgive() const {
  return isallowgive_;
}
inline void FriendListResponse_PlayerInfo::set_isallowgive(bool value) {
  set_has_isallowgive();
  isallowgive_ = value;
}

// required .message.FriendListResponse.PlayerInfo.State state = 6;
inline bool FriendListResponse_PlayerInfo::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendListResponse_PlayerInfo::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendListResponse_PlayerInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendListResponse_PlayerInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::message::FriendListResponse_PlayerInfo_State FriendListResponse_PlayerInfo::state() const {
  return static_cast< ::message::FriendListResponse_PlayerInfo_State >(state_);
}
inline void FriendListResponse_PlayerInfo::set_state(::message::FriendListResponse_PlayerInfo_State value) {
  assert(::message::FriendListResponse_PlayerInfo_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// required string friendNickName = 7;
inline bool FriendListResponse_PlayerInfo::has_friendnickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendListResponse_PlayerInfo::set_has_friendnickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendListResponse_PlayerInfo::clear_has_friendnickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendListResponse_PlayerInfo::clear_friendnickname() {
  if (friendnickname_ != &::google::protobuf::internal::kEmptyString) {
    friendnickname_->clear();
  }
  clear_has_friendnickname();
}
inline const ::std::string& FriendListResponse_PlayerInfo::friendnickname() const {
  return *friendnickname_;
}
inline void FriendListResponse_PlayerInfo::set_friendnickname(const ::std::string& value) {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::kEmptyString) {
    friendnickname_ = new ::std::string;
  }
  friendnickname_->assign(value);
}
inline void FriendListResponse_PlayerInfo::set_friendnickname(const char* value) {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::kEmptyString) {
    friendnickname_ = new ::std::string;
  }
  friendnickname_->assign(value);
}
inline void FriendListResponse_PlayerInfo::set_friendnickname(const char* value, size_t size) {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::kEmptyString) {
    friendnickname_ = new ::std::string;
  }
  friendnickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendListResponse_PlayerInfo::mutable_friendnickname() {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::kEmptyString) {
    friendnickname_ = new ::std::string;
  }
  return friendnickname_;
}
inline ::std::string* FriendListResponse_PlayerInfo::release_friendnickname() {
  clear_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendnickname_;
    friendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendListResponse_PlayerInfo::set_allocated_friendnickname(::std::string* friendnickname) {
  if (friendnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendnickname_;
  }
  if (friendnickname) {
    set_has_friendnickname();
    friendnickname_ = friendnickname;
  } else {
    clear_has_friendnickname();
    friendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendListResponse

// repeated .message.FriendListResponse.PlayerInfo friendList = 1;
inline int FriendListResponse::friendlist_size() const {
  return friendlist_.size();
}
inline void FriendListResponse::clear_friendlist() {
  friendlist_.Clear();
}
inline const ::message::FriendListResponse_PlayerInfo& FriendListResponse::friendlist(int index) const {
  return friendlist_.Get(index);
}
inline ::message::FriendListResponse_PlayerInfo* FriendListResponse::mutable_friendlist(int index) {
  return friendlist_.Mutable(index);
}
inline ::message::FriendListResponse_PlayerInfo* FriendListResponse::add_friendlist() {
  return friendlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::FriendListResponse_PlayerInfo >&
FriendListResponse::friendlist() const {
  return friendlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::FriendListResponse_PlayerInfo >*
FriendListResponse::mutable_friendlist() {
  return &friendlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FriendList_2eproto__INCLUDED
