// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PropInfoData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PropInfoData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_PropInfoData_2eproto() {
  delete PropInfoData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PropInfoData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PropInfoData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::message::protobuf_AddDesc_PropInfo_2eproto();
  ::message::protobuf_AddDesc_BuyGold_2eproto();
  PropInfoData::default_instance_ = new PropInfoData();
  PropInfoData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PropInfoData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PropInfoData_2eproto_once_);
void protobuf_AddDesc_PropInfoData_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PropInfoData_2eproto_once_,
                 &protobuf_AddDesc_PropInfoData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PropInfoData_2eproto {
  StaticDescriptorInitializer_PropInfoData_2eproto() {
    protobuf_AddDesc_PropInfoData_2eproto();
  }
} static_descriptor_initializer_PropInfoData_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PropInfoData::kManualPropInfoListFieldNumber;
const int PropInfoData::kBufferPropInfoListFieldNumber;
const int PropInfoData::kEffectPropInfoListFieldNumber;
const int PropInfoData::kLockPropInfoListFieldNumber;
const int PropInfoData::kBuyGoldListFieldNumber;
const int PropInfoData::kHeadListFieldNumber;
#endif  // !_MSC_VER

PropInfoData::PropInfoData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PropInfoData::InitAsDefaultInstance() {
}

PropInfoData::PropInfoData(const PropInfoData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PropInfoData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropInfoData::~PropInfoData() {
  SharedDtor();
}

void PropInfoData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropInfoData& PropInfoData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PropInfoData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PropInfoData_2eproto();
#endif
  return *default_instance_;
}

PropInfoData* PropInfoData::default_instance_ = NULL;

PropInfoData* PropInfoData::New() const {
  return new PropInfoData;
}

void PropInfoData::Clear() {
  manualpropinfolist_.Clear();
  bufferpropinfolist_.Clear();
  effectpropinfolist_.Clear();
  lockpropinfolist_.Clear();
  buygoldlist_.Clear();
  headlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PropInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.PropInfo manualPropInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manualPropInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manualpropinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manualPropInfoList;
        if (input->ExpectTag(18)) goto parse_bufferPropInfoList;
        break;
      }

      // repeated .message.PropInfo bufferPropInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bufferPropInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bufferpropinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bufferPropInfoList;
        if (input->ExpectTag(26)) goto parse_effectPropInfoList;
        break;
      }

      // repeated .message.PropInfo effectPropInfoList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effectPropInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effectpropinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effectPropInfoList;
        if (input->ExpectTag(34)) goto parse_lockPropInfoList;
        break;
      }

      // repeated .message.PropInfo lockPropInfoList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lockPropInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lockpropinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lockPropInfoList;
        if (input->ExpectTag(42)) goto parse_buyGoldList;
        break;
      }

      // repeated .message.BuyGold buyGoldList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyGoldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buygoldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buyGoldList;
        if (input->ExpectTag(50)) goto parse_headList;
        break;
      }

      // repeated .message.PropInfo headList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_headList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.PropInfo manualPropInfoList = 1;
  for (int i = 0; i < this->manualpropinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->manualpropinfolist(i), output);
  }

  // repeated .message.PropInfo bufferPropInfoList = 2;
  for (int i = 0; i < this->bufferpropinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->bufferpropinfolist(i), output);
  }

  // repeated .message.PropInfo effectPropInfoList = 3;
  for (int i = 0; i < this->effectpropinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->effectpropinfolist(i), output);
  }

  // repeated .message.PropInfo lockPropInfoList = 4;
  for (int i = 0; i < this->lockpropinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->lockpropinfolist(i), output);
  }

  // repeated .message.BuyGold buyGoldList = 5;
  for (int i = 0; i < this->buygoldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->buygoldlist(i), output);
  }

  // repeated .message.PropInfo headList = 6;
  for (int i = 0; i < this->headlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->headlist(i), output);
  }

}

int PropInfoData::ByteSize() const {
  int total_size = 0;

  // repeated .message.PropInfo manualPropInfoList = 1;
  total_size += 1 * this->manualpropinfolist_size();
  for (int i = 0; i < this->manualpropinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manualpropinfolist(i));
  }

  // repeated .message.PropInfo bufferPropInfoList = 2;
  total_size += 1 * this->bufferpropinfolist_size();
  for (int i = 0; i < this->bufferpropinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufferpropinfolist(i));
  }

  // repeated .message.PropInfo effectPropInfoList = 3;
  total_size += 1 * this->effectpropinfolist_size();
  for (int i = 0; i < this->effectpropinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effectpropinfolist(i));
  }

  // repeated .message.PropInfo lockPropInfoList = 4;
  total_size += 1 * this->lockpropinfolist_size();
  for (int i = 0; i < this->lockpropinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lockpropinfolist(i));
  }

  // repeated .message.BuyGold buyGoldList = 5;
  total_size += 1 * this->buygoldlist_size();
  for (int i = 0; i < this->buygoldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buygoldlist(i));
  }

  // repeated .message.PropInfo headList = 6;
  total_size += 1 * this->headlist_size();
  for (int i = 0; i < this->headlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropInfoData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropInfoData*>(&from));
}

void PropInfoData::MergeFrom(const PropInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  manualpropinfolist_.MergeFrom(from.manualpropinfolist_);
  bufferpropinfolist_.MergeFrom(from.bufferpropinfolist_);
  effectpropinfolist_.MergeFrom(from.effectpropinfolist_);
  lockpropinfolist_.MergeFrom(from.lockpropinfolist_);
  buygoldlist_.MergeFrom(from.buygoldlist_);
  headlist_.MergeFrom(from.headlist_);
}

void PropInfoData::CopyFrom(const PropInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropInfoData::IsInitialized() const {

  return true;
}

void PropInfoData::Swap(PropInfoData* other) {
  if (other != this) {
    manualpropinfolist_.Swap(&other->manualpropinfolist_);
    bufferpropinfolist_.Swap(&other->bufferpropinfolist_);
    effectpropinfolist_.Swap(&other->effectpropinfolist_);
    lockpropinfolist_.Swap(&other->lockpropinfolist_);
    buygoldlist_.Swap(&other->buygoldlist_);
    headlist_.Swap(&other->headlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropInfoData::GetTypeName() const {
  return "message.PropInfoData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
