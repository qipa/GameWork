// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PropInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PropInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_PropInfo_2eproto() {
  delete PropInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PropInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PropInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PropInfo::default_instance_ = new PropInfo();
  PropInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PropInfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PropInfo_2eproto_once_);
void protobuf_AddDesc_PropInfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PropInfo_2eproto_once_,
                 &protobuf_AddDesc_PropInfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PropInfo_2eproto {
  StaticDescriptorInitializer_PropInfo_2eproto() {
    protobuf_AddDesc_PropInfo_2eproto();
  }
} static_descriptor_initializer_PropInfo_2eproto_;
#endif

// ===================================================================

bool PropInfo_ActionObjectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PropInfo_ActionObjectType PropInfo::ACTION_UNKONW;
const PropInfo_ActionObjectType PropInfo::ACTION_OWN;
const PropInfo_ActionObjectType PropInfo::ACTION_OPPOSITE;
const PropInfo_ActionObjectType PropInfo::ActionObjectType_MIN;
const PropInfo_ActionObjectType PropInfo::ActionObjectType_MAX;
const int PropInfo::ActionObjectType_ARRAYSIZE;
#endif  // _MSC_VER
bool PropInfo_PropType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PropInfo_PropType PropInfo::Unknow;
const PropInfo_PropType PropInfo::ManualProp;
const PropInfo_PropType PropInfo::BufferProp;
const PropInfo_PropType PropInfo::EffectProp;
const PropInfo_PropType PropInfo::HeadProp;
const PropInfo_PropType PropInfo::PropType_MIN;
const PropInfo_PropType PropInfo::PropType_MAX;
const int PropInfo::PropType_ARRAYSIZE;
#endif  // _MSC_VER
bool PropInfo_ManualPropType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PropInfo_ManualPropType PropInfo::MANUAL_PROPS_Unknow;
const PropInfo_ManualPropType PropInfo::MANUAL_PROPS_LaserGun;
const PropInfo_ManualPropType PropInfo::ManualPropType_MIN;
const PropInfo_ManualPropType PropInfo::ManualPropType_MAX;
const int PropInfo::ManualPropType_ARRAYSIZE;
#endif  // _MSC_VER
bool PropInfo_BufferPropType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PropInfo_BufferPropType PropInfo::BUFFER_PROPS_Unkonw;
const PropInfo_BufferPropType PropInfo::BUFFER_PROPS_Chameleon;
const PropInfo_BufferPropType PropInfo::BUFFER_PROPS_Meidusha;
const PropInfo_BufferPropType PropInfo::BUFFER_PROPS_EnergyShield;
const PropInfo_BufferPropType PropInfo::BufferPropType_MIN;
const PropInfo_BufferPropType PropInfo::BufferPropType_MAX;
const int PropInfo::BufferPropType_ARRAYSIZE;
#endif  // _MSC_VER
bool PropInfo_EffectPropType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PropInfo_EffectPropType PropInfo::Effect_Unkonw;
const PropInfo_EffectPropType PropInfo::Effect_ColorfulCandy;
const PropInfo_EffectPropType PropInfo::Effect_SickMucus;
const PropInfo_EffectPropType PropInfo::Effect_BlackInk;
const PropInfo_EffectPropType PropInfo::EffectPropType_MIN;
const PropInfo_EffectPropType PropInfo::EffectPropType_MAX;
const int PropInfo::EffectPropType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PropInfo::kIdFieldNumber;
const int PropInfo::kNameFieldNumber;
const int PropInfo::kLocalnameFieldNumber;
const int PropInfo::kDescribFieldNumber;
const int PropInfo::kPropTypeFieldNumber;
const int PropInfo::kManualPropTypeFieldNumber;
const int PropInfo::kBufferPropTypeFieldNumber;
const int PropInfo::kLevelFieldNumber;
const int PropInfo::kUnlockLevelFieldNumber;
const int PropInfo::kUseNumberFieldNumber;
const int PropInfo::kActionTypeFieldNumber;
const int PropInfo::kGoldFieldNumber;
const int PropInfo::kUnlockGoldFieldNumber;
const int PropInfo::kCtTimeFieldNumber;
const int PropInfo::kDurationFieldNumber;
const int PropInfo::kEffectPropTypeFieldNumber;
#endif  // !_MSC_VER

PropInfo::PropInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PropInfo::InitAsDefaultInstance() {
}

PropInfo::PropInfo(const PropInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PropInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  localname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  describ_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proptype_ = 0;
  manualproptype_ = 0;
  bufferproptype_ = 0;
  level_ = 1u;
  unlocklevel_ = 1u;
  usenumber_ = 0u;
  actiontype_ = 0;
  gold_ = 0;
  unlockgold_ = 0;
  cttime_ = 0;
  duration_ = 0;
  effectproptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropInfo::~PropInfo() {
  SharedDtor();
}

void PropInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (localname_ != &::google::protobuf::internal::kEmptyString) {
    delete localname_;
  }
  if (describ_ != &::google::protobuf::internal::kEmptyString) {
    delete describ_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropInfo& PropInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PropInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PropInfo_2eproto();
#endif
  return *default_instance_;
}

PropInfo* PropInfo::default_instance_ = NULL;

PropInfo* PropInfo::New() const {
  return new PropInfo;
}

void PropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_localname()) {
      if (localname_ != &::google::protobuf::internal::kEmptyString) {
        localname_->clear();
      }
    }
    if (has_describ()) {
      if (describ_ != &::google::protobuf::internal::kEmptyString) {
        describ_->clear();
      }
    }
    proptype_ = 0;
    manualproptype_ = 0;
    bufferproptype_ = 0;
    level_ = 1u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    unlocklevel_ = 1u;
    usenumber_ = 0u;
    actiontype_ = 0;
    gold_ = 0;
    unlockgold_ = 0;
    cttime_ = 0;
    duration_ = 0;
    effectproptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_localname;
        break;
      }

      // optional string localname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_describ;
        break;
      }

      // optional string describ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describ()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_propType;
        break;
      }

      // optional .message.PropInfo.PropType propType = 5 [default = Unknow];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PropInfo_PropType_IsValid(value)) {
            set_proptype(static_cast< ::message::PropInfo_PropType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_manualPropType;
        break;
      }

      // optional .message.PropInfo.ManualPropType manualPropType = 6 [default = MANUAL_PROPS_Unknow];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manualPropType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PropInfo_ManualPropType_IsValid(value)) {
            set_manualproptype(static_cast< ::message::PropInfo_ManualPropType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bufferPropType;
        break;
      }

      // optional .message.PropInfo.BufferPropType bufferPropType = 7 [default = BUFFER_PROPS_Unkonw];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bufferPropType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PropInfo_BufferPropType_IsValid(value)) {
            set_bufferproptype(static_cast< ::message::PropInfo_BufferPropType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_unlockLevel;
        break;
      }

      // optional uint32 unlockLevel = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_useNumber;
        break;
      }

      // optional uint32 useNumber = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usenumber_)));
          set_has_usenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_actionType;
        break;
      }

      // optional .message.PropInfo.ActionObjectType actionType = 11 [default = ACTION_UNKONW];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PropInfo_ActionObjectType_IsValid(value)) {
            set_actiontype(static_cast< ::message::PropInfo_ActionObjectType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gold;
        break;
      }

      // optional int32 gold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_unlockGold;
        break;
      }

      // optional int32 unlockGold = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlockgold_)));
          set_has_unlockgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_ctTime;
        break;
      }

      // optional float ctTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ctTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cttime_)));
          set_has_cttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_duration;
        break;
      }

      // optional float duration = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_effectPropType;
        break;
      }

      // optional .message.PropInfo.EffectPropType effectPropType = 16 [default = Effect_Unkonw];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectPropType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PropInfo_EffectPropType_IsValid(value)) {
            set_effectproptype(static_cast< ::message::PropInfo_EffectPropType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string localname = 3;
  if (has_localname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->localname(), output);
  }

  // optional string describ = 4;
  if (has_describ()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->describ(), output);
  }

  // optional .message.PropInfo.PropType propType = 5 [default = Unknow];
  if (has_proptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->proptype(), output);
  }

  // optional .message.PropInfo.ManualPropType manualPropType = 6 [default = MANUAL_PROPS_Unknow];
  if (has_manualproptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->manualproptype(), output);
  }

  // optional .message.PropInfo.BufferPropType bufferPropType = 7 [default = BUFFER_PROPS_Unkonw];
  if (has_bufferproptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->bufferproptype(), output);
  }

  // optional uint32 level = 8 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional uint32 unlockLevel = 9 [default = 1];
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->unlocklevel(), output);
  }

  // optional uint32 useNumber = 10 [default = 0];
  if (has_usenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->usenumber(), output);
  }

  // optional .message.PropInfo.ActionObjectType actionType = 11 [default = ACTION_UNKONW];
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->actiontype(), output);
  }

  // optional int32 gold = 12;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gold(), output);
  }

  // optional int32 unlockGold = 13;
  if (has_unlockgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->unlockgold(), output);
  }

  // optional float ctTime = 14;
  if (has_cttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->cttime(), output);
  }

  // optional float duration = 15;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->duration(), output);
  }

  // optional .message.PropInfo.EffectPropType effectPropType = 16 [default = Effect_Unkonw];
  if (has_effectproptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->effectproptype(), output);
  }

}

int PropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string localname = 3;
    if (has_localname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localname());
    }

    // optional string describ = 4;
    if (has_describ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describ());
    }

    // optional .message.PropInfo.PropType propType = 5 [default = Unknow];
    if (has_proptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proptype());
    }

    // optional .message.PropInfo.ManualPropType manualPropType = 6 [default = MANUAL_PROPS_Unknow];
    if (has_manualproptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualproptype());
    }

    // optional .message.PropInfo.BufferPropType bufferPropType = 7 [default = BUFFER_PROPS_Unkonw];
    if (has_bufferproptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bufferproptype());
    }

    // optional uint32 level = 8 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 unlockLevel = 9 [default = 1];
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlocklevel());
    }

    // optional uint32 useNumber = 10 [default = 0];
    if (has_usenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usenumber());
    }

    // optional .message.PropInfo.ActionObjectType actionType = 11 [default = ACTION_UNKONW];
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->actiontype());
    }

    // optional int32 gold = 12;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 unlockGold = 13;
    if (has_unlockgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlockgold());
    }

    // optional float ctTime = 14;
    if (has_cttime()) {
      total_size += 1 + 4;
    }

    // optional float duration = 15;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional .message.PropInfo.EffectPropType effectPropType = 16 [default = Effect_Unkonw];
    if (has_effectproptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effectproptype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropInfo*>(&from));
}

void PropInfo::MergeFrom(const PropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_localname()) {
      set_localname(from.localname());
    }
    if (from.has_describ()) {
      set_describ(from.describ());
    }
    if (from.has_proptype()) {
      set_proptype(from.proptype());
    }
    if (from.has_manualproptype()) {
      set_manualproptype(from.manualproptype());
    }
    if (from.has_bufferproptype()) {
      set_bufferproptype(from.bufferproptype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
    if (from.has_usenumber()) {
      set_usenumber(from.usenumber());
    }
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_unlockgold()) {
      set_unlockgold(from.unlockgold());
    }
    if (from.has_cttime()) {
      set_cttime(from.cttime());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_effectproptype()) {
      set_effectproptype(from.effectproptype());
    }
  }
}

void PropInfo::CopyFrom(const PropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropInfo::IsInitialized() const {

  return true;
}

void PropInfo::Swap(PropInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(localname_, other->localname_);
    std::swap(describ_, other->describ_);
    std::swap(proptype_, other->proptype_);
    std::swap(manualproptype_, other->manualproptype_);
    std::swap(bufferproptype_, other->bufferproptype_);
    std::swap(level_, other->level_);
    std::swap(unlocklevel_, other->unlocklevel_);
    std::swap(usenumber_, other->usenumber_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(gold_, other->gold_);
    std::swap(unlockgold_, other->unlockgold_);
    std::swap(cttime_, other->cttime_);
    std::swap(duration_, other->duration_);
    std::swap(effectproptype_, other->effectproptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropInfo::GetTypeName() const {
  return "message.PropInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
