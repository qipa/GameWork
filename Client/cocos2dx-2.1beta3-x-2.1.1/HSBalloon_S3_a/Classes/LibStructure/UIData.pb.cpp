// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UIData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UIData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_UIData_2eproto() {
  delete UI::default_instance_;
  delete UI::_default_version_;
  delete UI_Field::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_UIData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_UIData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  UI::_default_version_ =
      new ::std::string("V.13.06.27", 10);
  UI::default_instance_ = new UI();
  UI_Field::default_instance_ = new UI_Field();
  UI::default_instance_->InitAsDefaultInstance();
  UI_Field::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UIData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_UIData_2eproto_once_);
void protobuf_AddDesc_UIData_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_UIData_2eproto_once_,
                 &protobuf_AddDesc_UIData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UIData_2eproto {
  StaticDescriptorInitializer_UIData_2eproto() {
    protobuf_AddDesc_UIData_2eproto();
  }
} static_descriptor_initializer_UIData_2eproto_;
#endif

// ===================================================================

bool UI_Field_Anchor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UI_Field_Anchor UI_Field::Anchor_Centre;
const UI_Field_Anchor UI_Field::Anchor_LEFT_UP;
const UI_Field_Anchor UI_Field::Anchor_LEFT_DOWN;
const UI_Field_Anchor UI_Field::Anchor_LEFT_Centre;
const UI_Field_Anchor UI_Field::Anchor_RIGHT_UP;
const UI_Field_Anchor UI_Field::Anchor_RIGHT_DOWN;
const UI_Field_Anchor UI_Field::Anchor_RIGHT_Centre;
const UI_Field_Anchor UI_Field::Anchor_UP_Centre;
const UI_Field_Anchor UI_Field::Anchor_DOWN_Centre;
const UI_Field_Anchor UI_Field::Anchor_MIN;
const UI_Field_Anchor UI_Field::Anchor_MAX;
const int UI_Field::Anchor_ARRAYSIZE;
#endif  // _MSC_VER
bool UI_Field_ElementType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UI_Field_ElementType UI_Field::ElementType_UnKnow;
const UI_Field_ElementType UI_Field::ElementType_Sprite;
const UI_Field_ElementType UI_Field::ElementType_Menu;
const UI_Field_ElementType UI_Field::ElementType_Panel;
const UI_Field_ElementType UI_Field::ElementType_Spx;
const UI_Field_ElementType UI_Field::ElementType_MIN;
const UI_Field_ElementType UI_Field::ElementType_MAX;
const int UI_Field::ElementType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UI_Field::kResNameFieldNumber;
const int UI_Field::kObjectNameFieldNumber;
const int UI_Field::kElementTypeFieldNumber;
const int UI_Field::kDescribeFieldNumber;
const int UI_Field::kSrcPointXFieldNumber;
const int UI_Field::kSrcPointYFieldNumber;
const int UI_Field::kDstPointXFieldNumber;
const int UI_Field::kDstPointYFieldNumber;
const int UI_Field::kImageWFieldNumber;
const int UI_Field::kImageHFieldNumber;
const int UI_Field::kOriginXFieldNumber;
const int UI_Field::kOriginYFieldNumber;
const int UI_Field::kIsVisibleFieldNumber;
const int UI_Field::kOpacityFieldNumber;
const int UI_Field::kScaleXFieldNumber;
const int UI_Field::kScaleYFieldNumber;
const int UI_Field::kRotationFieldNumber;
const int UI_Field::kSkewXFieldNumber;
const int UI_Field::kSkewYFieldNumber;
const int UI_Field::kAnchorFieldNumber;
const int UI_Field::kIntervalTimeFieldNumber;
const int UI_Field::kEventFieldNumber;
const int UI_Field::kIdFieldNumber;
const int UI_Field::kChildIDListFieldNumber;
const int UI_Field::kIsChildTypeFieldNumber;
const int UI_Field::kChildListFieldNumber;
#endif  // !_MSC_VER

UI_Field::UI_Field()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UI_Field::InitAsDefaultInstance() {
}

UI_Field::UI_Field(const UI_Field& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UI_Field::SharedCtor() {
  _cached_size_ = 0;
  resname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elementtype_ = 0;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srcpointx_ = 0;
  srcpointy_ = 0;
  dstpointx_ = 0;
  dstpointy_ = 0;
  imagew_ = 0;
  imageh_ = 0;
  originx_ = 0;
  originy_ = 0;
  isvisible_ = true;
  opacity_ = 255;
  scalex_ = 1;
  scaley_ = 1;
  rotation_ = 0;
  skewx_ = 0;
  skewy_ = 0;
  anchor_ = 0;
  intervaltime_ = 0;
  event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  ischildtype_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UI_Field::~UI_Field() {
  SharedDtor();
}

void UI_Field::SharedDtor() {
  if (resname_ != &::google::protobuf::internal::kEmptyString) {
    delete resname_;
  }
  if (objectname_ != &::google::protobuf::internal::kEmptyString) {
    delete objectname_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UI_Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UI_Field& UI_Field::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UIData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UIData_2eproto();
#endif
  return *default_instance_;
}

UI_Field* UI_Field::default_instance_ = NULL;

UI_Field* UI_Field::New() const {
  return new UI_Field;
}

void UI_Field::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_resname()) {
      if (resname_ != &::google::protobuf::internal::kEmptyString) {
        resname_->clear();
      }
    }
    if (has_objectname()) {
      if (objectname_ != &::google::protobuf::internal::kEmptyString) {
        objectname_->clear();
      }
    }
    elementtype_ = 0;
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    srcpointx_ = 0;
    srcpointy_ = 0;
    dstpointx_ = 0;
    dstpointy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    imagew_ = 0;
    imageh_ = 0;
    originx_ = 0;
    originy_ = 0;
    isvisible_ = true;
    opacity_ = 255;
    scalex_ = 1;
    scaley_ = 1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    rotation_ = 0;
    skewx_ = 0;
    skewy_ = 0;
    anchor_ = 0;
    intervaltime_ = 0;
    if (has_event()) {
      if (event_ != &::google::protobuf::internal::kEmptyString) {
        event_->clear();
      }
    }
    id_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ischildtype_ = false;
  }
  childidlist_.Clear();
  childlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UI_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string resName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objectName;
        break;
      }

      // optional string objectName = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_elementType;
        break;
      }

      // optional .message.UI.Field.ElementType elementType = 3 [default = ElementType_UnKnow];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elementType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::UI_Field_ElementType_IsValid(value)) {
            set_elementtype(static_cast< ::message::UI_Field_ElementType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_describe;
        break;
      }

      // optional string describe = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_srcPointX;
        break;
      }

      // optional float srcPointX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_srcPointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &srcpointx_)));
          set_has_srcpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_srcPointY;
        break;
      }

      // optional float srcPointY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_srcPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &srcpointy_)));
          set_has_srcpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_dstPointX;
        break;
      }

      // optional float dstPointX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dstPointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dstpointx_)));
          set_has_dstpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_dstPointY;
        break;
      }

      // optional float dstPointY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dstPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dstpointy_)));
          set_has_dstpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_imageW;
        break;
      }

      // optional float imageW = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_imageW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imagew_)));
          set_has_imagew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_imageH;
        break;
      }

      // optional float imageH = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_imageH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imageh_)));
          set_has_imageh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_originX;
        break;
      }

      // optional float originX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_originX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &originx_)));
          set_has_originx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_originY;
        break;
      }

      // optional float originY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_originY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &originy_)));
          set_has_originy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isVisible;
        break;
      }

      // optional bool isVisible = 13 [default = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 14 [default = 255];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_scaleX;
        break;
      }

      // optional float scaleX = 15 [default = 1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaleX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalex_)));
          set_has_scalex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_scaleY;
        break;
      }

      // optional float scaleY = 16 [default = 1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaleY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaley_)));
          set_has_scaley();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_rotation;
        break;
      }

      // optional float rotation = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_skewX;
        break;
      }

      // optional float skewX = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_skewX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skewx_)));
          set_has_skewx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_skewY;
        break;
      }

      // optional float skewY = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_skewY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skewy_)));
          set_has_skewy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_anchor;
        break;
      }

      // optional .message.UI.Field.Anchor anchor = 20 [default = Anchor_Centre];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anchor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::UI_Field_Anchor_IsValid(value)) {
            set_anchor(static_cast< ::message::UI_Field_Anchor >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_intervalTime;
        break;
      }

      // optional float intervalTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intervaltime_)));
          set_has_intervaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_event;
        break;
      }

      // optional string event = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_id;
        break;
      }

      // optional int32 id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_childIDList;
        break;
      }

      // repeated int32 childIDList = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_childIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_childidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_childidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_childIDList;
        if (input->ExpectTag(200)) goto parse_isChildType;
        break;
      }

      // optional bool isChildType = 25 [default = false];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChildType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischildtype_)));
          set_has_ischildtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_childList;
        break;
      }

      // repeated .message.UI.Field childList = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_childList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_childList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UI_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string resName = 1;
  if (has_resname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resname(), output);
  }

  // optional string objectName = 2 [default = ""];
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->objectname(), output);
  }

  // optional .message.UI.Field.ElementType elementType = 3 [default = ElementType_UnKnow];
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->elementtype(), output);
  }

  // optional string describe = 4 [default = ""];
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->describe(), output);
  }

  // optional float srcPointX = 5;
  if (has_srcpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->srcpointx(), output);
  }

  // optional float srcPointY = 6;
  if (has_srcpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->srcpointy(), output);
  }

  // optional float dstPointX = 7;
  if (has_dstpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dstpointx(), output);
  }

  // optional float dstPointY = 8;
  if (has_dstpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dstpointy(), output);
  }

  // optional float imageW = 9;
  if (has_imagew()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->imagew(), output);
  }

  // optional float imageH = 10;
  if (has_imageh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->imageh(), output);
  }

  // optional float originX = 11;
  if (has_originx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->originx(), output);
  }

  // optional float originY = 12;
  if (has_originy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->originy(), output);
  }

  // optional bool isVisible = 13 [default = true];
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isvisible(), output);
  }

  // optional int32 opacity = 14 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->opacity(), output);
  }

  // optional float scaleX = 15 [default = 1];
  if (has_scalex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->scalex(), output);
  }

  // optional float scaleY = 16 [default = 1];
  if (has_scaley()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->scaley(), output);
  }

  // optional float rotation = 17 [default = 0];
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->rotation(), output);
  }

  // optional float skewX = 18 [default = 0];
  if (has_skewx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->skewx(), output);
  }

  // optional float skewY = 19 [default = 0];
  if (has_skewy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->skewy(), output);
  }

  // optional .message.UI.Field.Anchor anchor = 20 [default = Anchor_Centre];
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->anchor(), output);
  }

  // optional float intervalTime = 21;
  if (has_intervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->intervaltime(), output);
  }

  // optional string event = 22;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->event(), output);
  }

  // optional int32 id = 23;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->id(), output);
  }

  // repeated int32 childIDList = 24;
  for (int i = 0; i < this->childidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->childidlist(i), output);
  }

  // optional bool isChildType = 25 [default = false];
  if (has_ischildtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->ischildtype(), output);
  }

  // repeated .message.UI.Field childList = 26;
  for (int i = 0; i < this->childlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->childlist(i), output);
  }

}

int UI_Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string resName = 1;
    if (has_resname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resname());
    }

    // optional string objectName = 2 [default = ""];
    if (has_objectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectname());
    }

    // optional .message.UI.Field.ElementType elementType = 3 [default = ElementType_UnKnow];
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elementtype());
    }

    // optional string describe = 4 [default = ""];
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

    // optional float srcPointX = 5;
    if (has_srcpointx()) {
      total_size += 1 + 4;
    }

    // optional float srcPointY = 6;
    if (has_srcpointy()) {
      total_size += 1 + 4;
    }

    // optional float dstPointX = 7;
    if (has_dstpointx()) {
      total_size += 1 + 4;
    }

    // optional float dstPointY = 8;
    if (has_dstpointy()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float imageW = 9;
    if (has_imagew()) {
      total_size += 1 + 4;
    }

    // optional float imageH = 10;
    if (has_imageh()) {
      total_size += 1 + 4;
    }

    // optional float originX = 11;
    if (has_originx()) {
      total_size += 1 + 4;
    }

    // optional float originY = 12;
    if (has_originy()) {
      total_size += 1 + 4;
    }

    // optional bool isVisible = 13 [default = true];
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // optional int32 opacity = 14 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional float scaleX = 15 [default = 1];
    if (has_scalex()) {
      total_size += 1 + 4;
    }

    // optional float scaleY = 16 [default = 1];
    if (has_scaley()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float rotation = 17 [default = 0];
    if (has_rotation()) {
      total_size += 2 + 4;
    }

    // optional float skewX = 18 [default = 0];
    if (has_skewx()) {
      total_size += 2 + 4;
    }

    // optional float skewY = 19 [default = 0];
    if (has_skewy()) {
      total_size += 2 + 4;
    }

    // optional .message.UI.Field.Anchor anchor = 20 [default = Anchor_Centre];
    if (has_anchor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->anchor());
    }

    // optional float intervalTime = 21;
    if (has_intervaltime()) {
      total_size += 2 + 4;
    }

    // optional string event = 22;
    if (has_event()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event());
    }

    // optional int32 id = 23;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool isChildType = 25 [default = false];
    if (has_ischildtype()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 childIDList = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->childidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->childidlist(i));
    }
    total_size += 2 * this->childidlist_size() + data_size;
  }

  // repeated .message.UI.Field childList = 26;
  total_size += 2 * this->childlist_size();
  for (int i = 0; i < this->childlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UI_Field::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UI_Field*>(&from));
}

void UI_Field::MergeFrom(const UI_Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  childidlist_.MergeFrom(from.childidlist_);
  childlist_.MergeFrom(from.childlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resname()) {
      set_resname(from.resname());
    }
    if (from.has_objectname()) {
      set_objectname(from.objectname());
    }
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_srcpointx()) {
      set_srcpointx(from.srcpointx());
    }
    if (from.has_srcpointy()) {
      set_srcpointy(from.srcpointy());
    }
    if (from.has_dstpointx()) {
      set_dstpointx(from.dstpointx());
    }
    if (from.has_dstpointy()) {
      set_dstpointy(from.dstpointy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imagew()) {
      set_imagew(from.imagew());
    }
    if (from.has_imageh()) {
      set_imageh(from.imageh());
    }
    if (from.has_originx()) {
      set_originx(from.originx());
    }
    if (from.has_originy()) {
      set_originy(from.originy());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_scalex()) {
      set_scalex(from.scalex());
    }
    if (from.has_scaley()) {
      set_scaley(from.scaley());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_skewx()) {
      set_skewx(from.skewx());
    }
    if (from.has_skewy()) {
      set_skewy(from.skewy());
    }
    if (from.has_anchor()) {
      set_anchor(from.anchor());
    }
    if (from.has_intervaltime()) {
      set_intervaltime(from.intervaltime());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ischildtype()) {
      set_ischildtype(from.ischildtype());
    }
  }
}

void UI_Field::CopyFrom(const UI_Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UI_Field::IsInitialized() const {

  return true;
}

void UI_Field::Swap(UI_Field* other) {
  if (other != this) {
    std::swap(resname_, other->resname_);
    std::swap(objectname_, other->objectname_);
    std::swap(elementtype_, other->elementtype_);
    std::swap(describe_, other->describe_);
    std::swap(srcpointx_, other->srcpointx_);
    std::swap(srcpointy_, other->srcpointy_);
    std::swap(dstpointx_, other->dstpointx_);
    std::swap(dstpointy_, other->dstpointy_);
    std::swap(imagew_, other->imagew_);
    std::swap(imageh_, other->imageh_);
    std::swap(originx_, other->originx_);
    std::swap(originy_, other->originy_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(opacity_, other->opacity_);
    std::swap(scalex_, other->scalex_);
    std::swap(scaley_, other->scaley_);
    std::swap(rotation_, other->rotation_);
    std::swap(skewx_, other->skewx_);
    std::swap(skewy_, other->skewy_);
    std::swap(anchor_, other->anchor_);
    std::swap(intervaltime_, other->intervaltime_);
    std::swap(event_, other->event_);
    std::swap(id_, other->id_);
    childidlist_.Swap(&other->childidlist_);
    std::swap(ischildtype_, other->ischildtype_);
    childlist_.Swap(&other->childlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UI_Field::GetTypeName() const {
  return "message.UI.Field";
}


// -------------------------------------------------------------------

::std::string* UI::_default_version_ = NULL;
#ifndef _MSC_VER
const int UI::kLayerNameFieldNumber;
const int UI::kFieldListFieldNumber;
const int UI::kVersionFieldNumber;
#endif  // !_MSC_VER

UI::UI()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UI::InitAsDefaultInstance() {
}

UI::UI(const UI& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UI::SharedCtor() {
  _cached_size_ = 0;
  layername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(_default_version_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UI::~UI() {
  SharedDtor();
}

void UI::SharedDtor() {
  if (layername_ != &::google::protobuf::internal::kEmptyString) {
    delete layername_;
  }
  if (version_ != _default_version_) {
    delete version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UI& UI::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UIData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UIData_2eproto();
#endif
  return *default_instance_;
}

UI* UI::default_instance_ = NULL;

UI* UI::New() const {
  return new UI;
}

void UI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_layername()) {
      if (layername_ != &::google::protobuf::internal::kEmptyString) {
        layername_->clear();
      }
    }
    if (has_version()) {
      if (version_ != _default_version_) {
        version_->assign(*_default_version_);
      }
    }
  }
  fieldlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string layerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fieldList;
        break;
      }

      // repeated .message.UI.Field fieldList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fieldList;
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3 [default = "V.13.06.27"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string layerName = 1;
  if (has_layername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->layername(), output);
  }

  // repeated .message.UI.Field fieldList = 2;
  for (int i = 0; i < this->fieldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->fieldlist(i), output);
  }

  // optional string version = 3 [default = "V.13.06.27"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

}

int UI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string layerName = 1;
    if (has_layername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layername());
    }

    // optional string version = 3 [default = "V.13.06.27"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated .message.UI.Field fieldList = 2;
  total_size += 1 * this->fieldlist_size();
  for (int i = 0; i < this->fieldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UI::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UI*>(&from));
}

void UI::MergeFrom(const UI& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldlist_.MergeFrom(from.fieldlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layername()) {
      set_layername(from.layername());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
}

void UI::CopyFrom(const UI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UI::Swap(UI* other) {
  if (other != this) {
    std::swap(layername_, other->layername_);
    fieldlist_.Swap(&other->fieldlist_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UI::GetTypeName() const {
  return "message.UI";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
