// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SearchUserInfo.proto

#ifndef PROTOBUF_SearchUserInfo_2eproto__INCLUDED
#define PROTOBUF_SearchUserInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "UserInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SearchUserInfo_2eproto();
void protobuf_AssignDesc_SearchUserInfo_2eproto();
void protobuf_ShutdownFile_SearchUserInfo_2eproto();

class SearchUserInfoRequest;
class SearchUserInfoResponse;

enum SearchUserInfoResponse_SearchStatus {
  SearchUserInfoResponse_SearchStatus_SearchStatus_SUCCESS = 1,
  SearchUserInfoResponse_SearchStatus_SearchStatus_FAIL = 0
};
bool SearchUserInfoResponse_SearchStatus_IsValid(int value);
const SearchUserInfoResponse_SearchStatus SearchUserInfoResponse_SearchStatus_SearchStatus_MIN = SearchUserInfoResponse_SearchStatus_SearchStatus_FAIL;
const SearchUserInfoResponse_SearchStatus SearchUserInfoResponse_SearchStatus_SearchStatus_MAX = SearchUserInfoResponse_SearchStatus_SearchStatus_SUCCESS;
const int SearchUserInfoResponse_SearchStatus_SearchStatus_ARRAYSIZE = SearchUserInfoResponse_SearchStatus_SearchStatus_MAX + 1;

// ===================================================================

class SearchUserInfoRequest : public ::google::protobuf::MessageLite {
 public:
  SearchUserInfoRequest();
  virtual ~SearchUserInfoRequest();

  SearchUserInfoRequest(const SearchUserInfoRequest& from);

  inline SearchUserInfoRequest& operator=(const SearchUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const SearchUserInfoRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SearchUserInfoRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SearchUserInfoRequest* other);

  // implements Message ----------------------------------------------

  SearchUserInfoRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SearchUserInfoRequest& from);
  void MergeFrom(const SearchUserInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string did = 1;
  inline bool has_did() const;
  inline void clear_did();
  static const int kDidFieldNumber = 1;
  inline const ::std::string& did() const;
  inline void set_did(const ::std::string& value);
  inline void set_did(const char* value);
  inline void set_did(const char* value, size_t size);
  inline ::std::string* mutable_did();
  inline ::std::string* release_did();
  inline void set_allocated_did(::std::string* did);

  // @@protoc_insertion_point(class_scope:message.SearchUserInfoRequest)
 private:
  inline void set_has_did();
  inline void clear_has_did();

  ::std::string* did_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SearchUserInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SearchUserInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_SearchUserInfo_2eproto();
  friend void protobuf_ShutdownFile_SearchUserInfo_2eproto();

  void InitAsDefaultInstance();
  static SearchUserInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class SearchUserInfoResponse : public ::google::protobuf::MessageLite {
 public:
  SearchUserInfoResponse();
  virtual ~SearchUserInfoResponse();

  SearchUserInfoResponse(const SearchUserInfoResponse& from);

  inline SearchUserInfoResponse& operator=(const SearchUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const SearchUserInfoResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SearchUserInfoResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SearchUserInfoResponse* other);

  // implements Message ----------------------------------------------

  SearchUserInfoResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SearchUserInfoResponse& from);
  void MergeFrom(const SearchUserInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SearchUserInfoResponse_SearchStatus SearchStatus;
  static const SearchStatus SearchStatus_SUCCESS = SearchUserInfoResponse_SearchStatus_SearchStatus_SUCCESS;
  static const SearchStatus SearchStatus_FAIL = SearchUserInfoResponse_SearchStatus_SearchStatus_FAIL;
  static inline bool SearchStatus_IsValid(int value) {
    return SearchUserInfoResponse_SearchStatus_IsValid(value);
  }
  static const SearchStatus SearchStatus_MIN =
    SearchUserInfoResponse_SearchStatus_SearchStatus_MIN;
  static const SearchStatus SearchStatus_MAX =
    SearchUserInfoResponse_SearchStatus_SearchStatus_MAX;
  static const int SearchStatus_ARRAYSIZE =
    SearchUserInfoResponse_SearchStatus_SearchStatus_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .message.SearchUserInfoResponse.SearchStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::message::SearchUserInfoResponse_SearchStatus status() const;
  inline void set_status(::message::SearchUserInfoResponse_SearchStatus value);

  // optional .message.UserBasicInfo userInfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  inline const ::message::UserBasicInfo& userinfo() const;
  inline ::message::UserBasicInfo* mutable_userinfo();
  inline ::message::UserBasicInfo* release_userinfo();
  inline void set_allocated_userinfo(::message::UserBasicInfo* userinfo);

  // @@protoc_insertion_point(class_scope:message.SearchUserInfoResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::message::UserBasicInfo* userinfo_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SearchUserInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SearchUserInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_SearchUserInfo_2eproto();
  friend void protobuf_ShutdownFile_SearchUserInfo_2eproto();

  void InitAsDefaultInstance();
  static SearchUserInfoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SearchUserInfoRequest

// optional string did = 1;
inline bool SearchUserInfoRequest::has_did() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchUserInfoRequest::set_has_did() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchUserInfoRequest::clear_has_did() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchUserInfoRequest::clear_did() {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    did_->clear();
  }
  clear_has_did();
}
inline const ::std::string& SearchUserInfoRequest::did() const {
  return *did_;
}
inline void SearchUserInfoRequest::set_did(const ::std::string& value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(value);
}
inline void SearchUserInfoRequest::set_did(const char* value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(value);
}
inline void SearchUserInfoRequest::set_did(const char* value, size_t size) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchUserInfoRequest::mutable_did() {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  return did_;
}
inline ::std::string* SearchUserInfoRequest::release_did() {
  clear_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = did_;
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchUserInfoRequest::set_allocated_did(::std::string* did) {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    delete did_;
  }
  if (did) {
    set_has_did();
    did_ = did;
  } else {
    clear_has_did();
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SearchUserInfoResponse

// required .message.SearchUserInfoResponse.SearchStatus status = 1;
inline bool SearchUserInfoResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchUserInfoResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchUserInfoResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchUserInfoResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::message::SearchUserInfoResponse_SearchStatus SearchUserInfoResponse::status() const {
  return static_cast< ::message::SearchUserInfoResponse_SearchStatus >(status_);
}
inline void SearchUserInfoResponse::set_status(::message::SearchUserInfoResponse_SearchStatus value) {
  assert(::message::SearchUserInfoResponse_SearchStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .message.UserBasicInfo userInfo = 2;
inline bool SearchUserInfoResponse::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchUserInfoResponse::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchUserInfoResponse::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchUserInfoResponse::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::message::UserBasicInfo::Clear();
  clear_has_userinfo();
}
inline const ::message::UserBasicInfo& SearchUserInfoResponse::userinfo() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return userinfo_ != NULL ? *userinfo_ : *default_instance().userinfo_;
#else
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
#endif
}
inline ::message::UserBasicInfo* SearchUserInfoResponse::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::message::UserBasicInfo;
  return userinfo_;
}
inline ::message::UserBasicInfo* SearchUserInfoResponse::release_userinfo() {
  clear_has_userinfo();
  ::message::UserBasicInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void SearchUserInfoResponse::set_allocated_userinfo(::message::UserBasicInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SearchUserInfo_2eproto__INCLUDED
