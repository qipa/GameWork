// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoomData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RoomData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_RoomData_2eproto() {
  delete RoomDataRequest::default_instance_;
  delete RoomDataResponse::default_instance_;
  delete RoomDataResponse_Room::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_RoomData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_RoomData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RoomDataRequest::default_instance_ = new RoomDataRequest();
  RoomDataResponse::default_instance_ = new RoomDataResponse();
  RoomDataResponse_Room::default_instance_ = new RoomDataResponse_Room();
  RoomDataRequest::default_instance_->InitAsDefaultInstance();
  RoomDataResponse::default_instance_->InitAsDefaultInstance();
  RoomDataResponse_Room::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RoomData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_RoomData_2eproto_once_);
void protobuf_AddDesc_RoomData_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_RoomData_2eproto_once_,
                 &protobuf_AddDesc_RoomData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RoomData_2eproto {
  StaticDescriptorInitializer_RoomData_2eproto() {
    protobuf_AddDesc_RoomData_2eproto();
  }
} static_descriptor_initializer_RoomData_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoomDataRequest::RoomDataRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RoomDataRequest::InitAsDefaultInstance() {
}

RoomDataRequest::RoomDataRequest(const RoomDataRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RoomDataRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomDataRequest::~RoomDataRequest() {
  SharedDtor();
}

void RoomDataRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoomDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoomDataRequest& RoomDataRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoomData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoomData_2eproto();
#endif
  return *default_instance_;
}

RoomDataRequest* RoomDataRequest::default_instance_ = NULL;

RoomDataRequest* RoomDataRequest::New() const {
  return new RoomDataRequest;
}

void RoomDataRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RoomDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void RoomDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int RoomDataRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDataRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoomDataRequest*>(&from));
}

void RoomDataRequest::MergeFrom(const RoomDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void RoomDataRequest::CopyFrom(const RoomDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDataRequest::IsInitialized() const {

  return true;
}

void RoomDataRequest::Swap(RoomDataRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoomDataRequest::GetTypeName() const {
  return "message.RoomDataRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RoomDataResponse_Room::kIdFieldNumber;
const int RoomDataResponse_Room::kPlayerCountFieldNumber;
const int RoomDataResponse_Room::kStakeGoldFieldNumber;
const int RoomDataResponse_Room::kSweepStakeGoldFieldNumber;
#endif  // !_MSC_VER

RoomDataResponse_Room::RoomDataResponse_Room()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RoomDataResponse_Room::InitAsDefaultInstance() {
}

RoomDataResponse_Room::RoomDataResponse_Room(const RoomDataResponse_Room& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RoomDataResponse_Room::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  playercount_ = 0u;
  stakegold_ = 0;
  sweepstakegold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomDataResponse_Room::~RoomDataResponse_Room() {
  SharedDtor();
}

void RoomDataResponse_Room::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoomDataResponse_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoomDataResponse_Room& RoomDataResponse_Room::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoomData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoomData_2eproto();
#endif
  return *default_instance_;
}

RoomDataResponse_Room* RoomDataResponse_Room::default_instance_ = NULL;

RoomDataResponse_Room* RoomDataResponse_Room::New() const {
  return new RoomDataResponse_Room;
}

void RoomDataResponse_Room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    playercount_ = 0u;
    stakegold_ = 0;
    sweepstakegold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RoomDataResponse_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerCount;
        break;
      }

      // required uint32 playerCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playercount_)));
          set_has_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stakeGold;
        break;
      }

      // required int32 stakeGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stakeGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stakegold_)));
          set_has_stakegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sweepStakeGold;
        break;
      }

      // required int32 sweepStakeGold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepStakeGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweepstakegold_)));
          set_has_sweepstakegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomDataResponse_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 playerCount = 2;
  if (has_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playercount(), output);
  }

  // required int32 stakeGold = 3;
  if (has_stakegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stakegold(), output);
  }

  // required int32 sweepStakeGold = 4;
  if (has_sweepstakegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sweepstakegold(), output);
  }

}

int RoomDataResponse_Room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 playerCount = 2;
    if (has_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playercount());
    }

    // required int32 stakeGold = 3;
    if (has_stakegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stakegold());
    }

    // required int32 sweepStakeGold = 4;
    if (has_sweepstakegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweepstakegold());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDataResponse_Room::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoomDataResponse_Room*>(&from));
}

void RoomDataResponse_Room::MergeFrom(const RoomDataResponse_Room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_playercount()) {
      set_playercount(from.playercount());
    }
    if (from.has_stakegold()) {
      set_stakegold(from.stakegold());
    }
    if (from.has_sweepstakegold()) {
      set_sweepstakegold(from.sweepstakegold());
    }
  }
}

void RoomDataResponse_Room::CopyFrom(const RoomDataResponse_Room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDataResponse_Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RoomDataResponse_Room::Swap(RoomDataResponse_Room* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(playercount_, other->playercount_);
    std::swap(stakegold_, other->stakegold_);
    std::swap(sweepstakegold_, other->sweepstakegold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoomDataResponse_Room::GetTypeName() const {
  return "message.RoomDataResponse.Room";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoomDataResponse::kRoomListFieldNumber;
#endif  // !_MSC_VER

RoomDataResponse::RoomDataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RoomDataResponse::InitAsDefaultInstance() {
}

RoomDataResponse::RoomDataResponse(const RoomDataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RoomDataResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomDataResponse::~RoomDataResponse() {
  SharedDtor();
}

void RoomDataResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoomDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoomDataResponse& RoomDataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoomData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoomData_2eproto();
#endif
  return *default_instance_;
}

RoomDataResponse* RoomDataResponse::default_instance_ = NULL;

RoomDataResponse* RoomDataResponse::New() const {
  return new RoomDataResponse;
}

void RoomDataResponse::Clear() {
  roomlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RoomDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.RoomDataResponse.Room roomList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roomList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .message.RoomDataResponse.Room roomList = 1;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->roomlist(i), output);
  }

}

int RoomDataResponse::ByteSize() const {
  int total_size = 0;

  // repeated .message.RoomDataResponse.Room roomList = 1;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoomDataResponse*>(&from));
}

void RoomDataResponse::MergeFrom(const RoomDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
}

void RoomDataResponse::CopyFrom(const RoomDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDataResponse::IsInitialized() const {

  for (int i = 0; i < roomlist_size(); i++) {
    if (!this->roomlist(i).IsInitialized()) return false;
  }
  return true;
}

void RoomDataResponse::Swap(RoomDataResponse* other) {
  if (other != this) {
    roomlist_.Swap(&other->roomlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoomDataResponse::GetTypeName() const {
  return "message.RoomDataResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
