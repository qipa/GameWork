// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UseProp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UseProp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace message {

void protobuf_ShutdownFile_UseProp_2eproto() {
  delete UsePropRequest::default_instance_;
  delete UsePropResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_UseProp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_UseProp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  UsePropRequest::default_instance_ = new UsePropRequest();
  UsePropResponse::default_instance_ = new UsePropResponse();
  UsePropRequest::default_instance_->InitAsDefaultInstance();
  UsePropResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UseProp_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_UseProp_2eproto_once_);
void protobuf_AddDesc_UseProp_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_UseProp_2eproto_once_,
                 &protobuf_AddDesc_UseProp_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UseProp_2eproto {
  StaticDescriptorInitializer_UseProp_2eproto() {
    protobuf_AddDesc_UseProp_2eproto();
  }
} static_descriptor_initializer_UseProp_2eproto_;
#endif

// ===================================================================

bool UsePropRequest_OperateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UsePropRequest_OperateType UsePropRequest::Type_use;
const UsePropRequest_OperateType UsePropRequest::Type_unlock;
const UsePropRequest_OperateType UsePropRequest::OperateType_MIN;
const UsePropRequest_OperateType UsePropRequest::OperateType_MAX;
const int UsePropRequest::OperateType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UsePropRequest::kDidFieldNumber;
const int UsePropRequest::kTypeFieldNumber;
const int UsePropRequest::kUsePropIDFieldNumber;
#endif  // !_MSC_VER

UsePropRequest::UsePropRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UsePropRequest::InitAsDefaultInstance() {
}

UsePropRequest::UsePropRequest(const UsePropRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UsePropRequest::SharedCtor() {
  _cached_size_ = 0;
  did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  usepropid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsePropRequest::~UsePropRequest() {
  SharedDtor();
}

void UsePropRequest::SharedDtor() {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    delete did_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UsePropRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UsePropRequest& UsePropRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UseProp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UseProp_2eproto();
#endif
  return *default_instance_;
}

UsePropRequest* UsePropRequest::default_instance_ = NULL;

UsePropRequest* UsePropRequest::New() const {
  return new UsePropRequest;
}

void UsePropRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_did()) {
      if (did_ != &::google::protobuf::internal::kEmptyString) {
        did_->clear();
      }
    }
    type_ = 1;
    usepropid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UsePropRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string did = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .message.UsePropRequest.OperateType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::UsePropRequest_OperateType_IsValid(value)) {
            set_type(static_cast< ::message::UsePropRequest_OperateType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usePropID;
        break;
      }

      // required uint32 usePropID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usePropID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usepropid_)));
          set_has_usepropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsePropRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string did = 1;
  if (has_did()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->did(), output);
  }

  // required .message.UsePropRequest.OperateType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 usePropID = 3;
  if (has_usepropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usepropid(), output);
  }

}

int UsePropRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string did = 1;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->did());
    }

    // required .message.UsePropRequest.OperateType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 usePropID = 3;
    if (has_usepropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usepropid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsePropRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UsePropRequest*>(&from));
}

void UsePropRequest::MergeFrom(const UsePropRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_did()) {
      set_did(from.did());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_usepropid()) {
      set_usepropid(from.usepropid());
    }
  }
}

void UsePropRequest::CopyFrom(const UsePropRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsePropRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void UsePropRequest::Swap(UsePropRequest* other) {
  if (other != this) {
    std::swap(did_, other->did_);
    std::swap(type_, other->type_);
    std::swap(usepropid_, other->usepropid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UsePropRequest::GetTypeName() const {
  return "message.UsePropRequest";
}


// ===================================================================

bool UsePropResponse_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UsePropResponse_State UsePropResponse::State_Succeed;
const UsePropResponse_State UsePropResponse::State_Fail;
const UsePropResponse_State UsePropResponse::State_MIN;
const UsePropResponse_State UsePropResponse::State_MAX;
const int UsePropResponse::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UsePropResponse::kStateFieldNumber;
const int UsePropResponse::kGoldsFieldNumber;
#endif  // !_MSC_VER

UsePropResponse::UsePropResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UsePropResponse::InitAsDefaultInstance() {
}

UsePropResponse::UsePropResponse(const UsePropResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UsePropResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  golds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsePropResponse::~UsePropResponse() {
  SharedDtor();
}

void UsePropResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UsePropResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UsePropResponse& UsePropResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UseProp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UseProp_2eproto();
#endif
  return *default_instance_;
}

UsePropResponse* UsePropResponse::default_instance_ = NULL;

UsePropResponse* UsePropResponse::New() const {
  return new UsePropResponse;
}

void UsePropResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    golds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UsePropResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.UsePropResponse.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::UsePropResponse_State_IsValid(value)) {
            set_state(static_cast< ::message::UsePropResponse_State >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_golds;
        break;
      }

      // optional uint32 golds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &golds_)));
          set_has_golds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsePropResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .message.UsePropResponse.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint32 golds = 2;
  if (has_golds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->golds(), output);
  }

}

int UsePropResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message.UsePropResponse.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 golds = 2;
    if (has_golds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->golds());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsePropResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UsePropResponse*>(&from));
}

void UsePropResponse::MergeFrom(const UsePropResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_golds()) {
      set_golds(from.golds());
    }
  }
}

void UsePropResponse::CopyFrom(const UsePropResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsePropResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UsePropResponse::Swap(UsePropResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(golds_, other->golds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UsePropResponse::GetTypeName() const {
  return "message.UsePropResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
