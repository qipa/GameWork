// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfoUpdate.proto

#ifndef PROTOBUF_UserInfoUpdate_2eproto__INCLUDED
#define PROTOBUF_UserInfoUpdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UserInfoUpdate_2eproto();
void protobuf_AssignDesc_UserInfoUpdate_2eproto();
void protobuf_ShutdownFile_UserInfoUpdate_2eproto();

class UserInfoUpdateRequest;
class UserInfoUpdateResponse;

enum UserInfoUpdateRequest_UpdateType {
  UserInfoUpdateRequest_UpdateType_User_IconId = 1,
  UserInfoUpdateRequest_UpdateType_User_Name = 2
};
bool UserInfoUpdateRequest_UpdateType_IsValid(int value);
const UserInfoUpdateRequest_UpdateType UserInfoUpdateRequest_UpdateType_UpdateType_MIN = UserInfoUpdateRequest_UpdateType_User_IconId;
const UserInfoUpdateRequest_UpdateType UserInfoUpdateRequest_UpdateType_UpdateType_MAX = UserInfoUpdateRequest_UpdateType_User_Name;
const int UserInfoUpdateRequest_UpdateType_UpdateType_ARRAYSIZE = UserInfoUpdateRequest_UpdateType_UpdateType_MAX + 1;

enum UserInfoUpdateResponse_UpdateState {
  UserInfoUpdateResponse_UpdateState_OK = 1,
  UserInfoUpdateResponse_UpdateState_FAIL = 2
};
bool UserInfoUpdateResponse_UpdateState_IsValid(int value);
const UserInfoUpdateResponse_UpdateState UserInfoUpdateResponse_UpdateState_UpdateState_MIN = UserInfoUpdateResponse_UpdateState_OK;
const UserInfoUpdateResponse_UpdateState UserInfoUpdateResponse_UpdateState_UpdateState_MAX = UserInfoUpdateResponse_UpdateState_FAIL;
const int UserInfoUpdateResponse_UpdateState_UpdateState_ARRAYSIZE = UserInfoUpdateResponse_UpdateState_UpdateState_MAX + 1;

// ===================================================================

class UserInfoUpdateRequest : public ::google::protobuf::MessageLite {
 public:
  UserInfoUpdateRequest();
  virtual ~UserInfoUpdateRequest();

  UserInfoUpdateRequest(const UserInfoUpdateRequest& from);

  inline UserInfoUpdateRequest& operator=(const UserInfoUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserInfoUpdateRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserInfoUpdateRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserInfoUpdateRequest* other);

  // implements Message ----------------------------------------------

  UserInfoUpdateRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserInfoUpdateRequest& from);
  void MergeFrom(const UserInfoUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef UserInfoUpdateRequest_UpdateType UpdateType;
  static const UpdateType User_IconId = UserInfoUpdateRequest_UpdateType_User_IconId;
  static const UpdateType User_Name = UserInfoUpdateRequest_UpdateType_User_Name;
  static inline bool UpdateType_IsValid(int value) {
    return UserInfoUpdateRequest_UpdateType_IsValid(value);
  }
  static const UpdateType UpdateType_MIN =
    UserInfoUpdateRequest_UpdateType_UpdateType_MIN;
  static const UpdateType UpdateType_MAX =
    UserInfoUpdateRequest_UpdateType_UpdateType_MAX;
  static const int UpdateType_ARRAYSIZE =
    UserInfoUpdateRequest_UpdateType_UpdateType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .message.UserInfoUpdateRequest.UpdateType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::message::UserInfoUpdateRequest_UpdateType type() const;
  inline void set_type(::message::UserInfoUpdateRequest_UpdateType value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 iconId = 3;
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconIdFieldNumber = 3;
  inline ::google::protobuf::uint32 iconid() const;
  inline void set_iconid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.UserInfoUpdateRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_iconid();
  inline void clear_has_iconid();

  ::std::string* name_;
  int type_;
  ::google::protobuf::uint32 iconid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_UserInfoUpdate_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_UserInfoUpdate_2eproto();
  #endif
  friend void protobuf_AssignDesc_UserInfoUpdate_2eproto();
  friend void protobuf_ShutdownFile_UserInfoUpdate_2eproto();

  void InitAsDefaultInstance();
  static UserInfoUpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserInfoUpdateResponse : public ::google::protobuf::MessageLite {
 public:
  UserInfoUpdateResponse();
  virtual ~UserInfoUpdateResponse();

  UserInfoUpdateResponse(const UserInfoUpdateResponse& from);

  inline UserInfoUpdateResponse& operator=(const UserInfoUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserInfoUpdateResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserInfoUpdateResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserInfoUpdateResponse* other);

  // implements Message ----------------------------------------------

  UserInfoUpdateResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserInfoUpdateResponse& from);
  void MergeFrom(const UserInfoUpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef UserInfoUpdateResponse_UpdateState UpdateState;
  static const UpdateState OK = UserInfoUpdateResponse_UpdateState_OK;
  static const UpdateState FAIL = UserInfoUpdateResponse_UpdateState_FAIL;
  static inline bool UpdateState_IsValid(int value) {
    return UserInfoUpdateResponse_UpdateState_IsValid(value);
  }
  static const UpdateState UpdateState_MIN =
    UserInfoUpdateResponse_UpdateState_UpdateState_MIN;
  static const UpdateState UpdateState_MAX =
    UserInfoUpdateResponse_UpdateState_UpdateState_MAX;
  static const int UpdateState_ARRAYSIZE =
    UserInfoUpdateResponse_UpdateState_UpdateState_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .message.UserInfoUpdateResponse.UpdateState state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::message::UserInfoUpdateResponse_UpdateState state() const;
  inline void set_state(::message::UserInfoUpdateResponse_UpdateState value);

  // @@protoc_insertion_point(class_scope:message.UserInfoUpdateResponse)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_UserInfoUpdate_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_UserInfoUpdate_2eproto();
  #endif
  friend void protobuf_AssignDesc_UserInfoUpdate_2eproto();
  friend void protobuf_ShutdownFile_UserInfoUpdate_2eproto();

  void InitAsDefaultInstance();
  static UserInfoUpdateResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// UserInfoUpdateRequest

// required .message.UserInfoUpdateRequest.UpdateType type = 1;
inline bool UserInfoUpdateRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfoUpdateRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfoUpdateRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfoUpdateRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::message::UserInfoUpdateRequest_UpdateType UserInfoUpdateRequest::type() const {
  return static_cast< ::message::UserInfoUpdateRequest_UpdateType >(type_);
}
inline void UserInfoUpdateRequest::set_type(::message::UserInfoUpdateRequest_UpdateType value) {
  assert(::message::UserInfoUpdateRequest_UpdateType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string name = 2;
inline bool UserInfoUpdateRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfoUpdateRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfoUpdateRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfoUpdateRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserInfoUpdateRequest::name() const {
  return *name_;
}
inline void UserInfoUpdateRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserInfoUpdateRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserInfoUpdateRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfoUpdateRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UserInfoUpdateRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInfoUpdateRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 iconId = 3;
inline bool UserInfoUpdateRequest::has_iconid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfoUpdateRequest::set_has_iconid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfoUpdateRequest::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfoUpdateRequest::clear_iconid() {
  iconid_ = 0u;
  clear_has_iconid();
}
inline ::google::protobuf::uint32 UserInfoUpdateRequest::iconid() const {
  return iconid_;
}
inline void UserInfoUpdateRequest::set_iconid(::google::protobuf::uint32 value) {
  set_has_iconid();
  iconid_ = value;
}

// -------------------------------------------------------------------

// UserInfoUpdateResponse

// required .message.UserInfoUpdateResponse.UpdateState state = 1;
inline bool UserInfoUpdateResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfoUpdateResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfoUpdateResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfoUpdateResponse::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::message::UserInfoUpdateResponse_UpdateState UserInfoUpdateResponse::state() const {
  return static_cast< ::message::UserInfoUpdateResponse_UpdateState >(state_);
}
inline void UserInfoUpdateResponse::set_state(::message::UserInfoUpdateResponse_UpdateState value) {
  assert(::message::UserInfoUpdateResponse_UpdateState_IsValid(value));
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserInfoUpdate_2eproto__INCLUDED
